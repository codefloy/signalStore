import { DestroyRef, Injector, type EffectRef, type WritableSignal } from '@angular/core';
import { Subscription, type Observable } from 'rxjs';
export type PartialOrValue<TValue> = TValue extends object ? Partial<TValue> : TValue;
export type Reducer<TValue, TNext> = (previous: TValue, next: TNext) => PartialOrValue<TValue>;
type ConnectedSignal<TSignalValue> = {
    with<TObservableValue extends PartialOrValue<TSignalValue>>(observable: Observable<TObservableValue>): ConnectedSignal<TSignalValue>;
    with<TObservableValue>(observable: Observable<TObservableValue>, reducer: Reducer<TSignalValue, TObservableValue>): ConnectedSignal<TSignalValue>;
    with<TOriginSignalValue extends PartialOrValue<TSignalValue>>(originSignal: () => TOriginSignalValue): ConnectedSignal<TSignalValue>;
    subscription: Subscription;
};
/**
 * Connects a signal to an observable and returns a subscription. The subscription is automatically
 * unsubscribed when the component is destroyed. If it's not called in an injection context, it must
 * be called with an injector or DestroyRef.
 *
 *
 * Usage
 * ```ts
 * @Component({})
 * export class MyComponent {
 *  private dataService = inject(DataService);
 *
 *  data = signal([] as string[]);
 *
 *  constructor() {
 *    connect(this.data, this.dataService.data$);
 *  }
 * }
 * ```
 */
export declare function connect<TSignalValue>(signal: WritableSignal<TSignalValue>, injectorOrDestroyRef?: Injector | DestroyRef, useUntracked?: boolean): ConnectedSignal<TSignalValue>;
/**
 * Connects a signal to another signal value.
 * @param signal The signal to connect to.
 * @param originSignal A callback fn that includes a signal call. The signal call will be tracked.
 *
 * Usage
 * ```ts
 * export class MyComponent {
 * 	private dataService = inject(DataService);
 *
 * 	name = signal('');
 *
 *  constructor() {
 *    connect(this.name, () => this.dataService.user().name);
 *  }
 * }
 * ```
 */
export declare function connect<TSignalValue>(signal: WritableSignal<TSignalValue>, originSignal: () => TSignalValue): EffectRef;
export declare function connect<TSignalValue, TObservableValue extends PartialOrValue<TSignalValue>>(signal: WritableSignal<TSignalValue>, observable: Observable<TObservableValue>, injectorOrDestroyRef?: Injector | DestroyRef, useUntracked?: boolean): Subscription;
export declare function connect<TSignalValue, TObservableValue>(signal: WritableSignal<TSignalValue>, observable: Observable<TObservableValue>, reducer: Reducer<TSignalValue, TObservableValue>, injectorOrDestroyRef?: Injector | DestroyRef, useUntracked?: boolean): Subscription;
export {};
