import { InjectionToken, type Injector, type WritableSignal } from '@angular/core';
export declare const NGXTENSION_LOCAL_STORAGE: InjectionToken<Storage>;
export declare function provideLocalStorageImpl(impl: typeof globalThis.localStorage): {
    provide: InjectionToken<Storage>;
    useValue: Storage;
};
/**
 * Options to override the default behavior of the local storage signal.
 */
export type LocalStorageOptions<T> = {
    /**
     * The default value to use when the key is not present in local storage.
     */
    defaultValue?: T | (() => T);
    /**
     *
     * Determines if local storage syncs with the signal.
     * When true, updates in one tab reflect in others, ideal for shared-state apps.
     * Defaults to true.
     */
    storageSync?: boolean;
    /**
     * Override the default JSON.stringify function for custom serialization.
     * @param value
     */
    stringify?: (value: unknown) => string;
    /**
     * Override the default JSON.parse function for custom deserialization.
     * @param value
     */
    parse?: (value: string) => unknown;
    /**
     * Injector for the Injection Context
     */
    injector?: Injector;
};
export declare const injectLocalStorage: <T>(key: string, options?: LocalStorageOptions<T>) => WritableSignal<T | undefined>;
