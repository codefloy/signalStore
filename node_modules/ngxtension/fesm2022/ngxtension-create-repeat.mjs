import { assertInInjectionContext, inject, DestroyRef } from '@angular/core';
import { Subject, repeat } from 'rxjs';

function createRepeat(generalCountOrDestroyRef, destroyRef) {
    const [generalCount, _destroyRef] = parseArgs(generalCountOrDestroyRef, destroyRef);
    const repeat$ = new Subject();
    _destroyRef.onDestroy(() => repeat$.complete());
    const repeatFn = (count) => repeat({ count: count ?? generalCount, delay: () => repeat$ });
    repeatFn.emit = () => repeat$.next();
    return repeatFn;
}
function parseArgs(generalCountOrDestroyRef, destroyRef) {
    const isGeneralCount = typeof generalCountOrDestroyRef === 'number';
    const generalCount = isGeneralCount ? generalCountOrDestroyRef : undefined;
    destroyRef ??= !isGeneralCount ? generalCountOrDestroyRef : undefined;
    if (!destroyRef)
        assertInInjectionContext(createRepeat);
    destroyRef ??= inject(DestroyRef);
    return [generalCount, destroyRef];
}

/**
 * Generated bundle index. Do not edit.
 */

export { createRepeat };
//# sourceMappingURL=ngxtension-create-repeat.mjs.map
