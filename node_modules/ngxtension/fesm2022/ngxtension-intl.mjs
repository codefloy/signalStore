import * as i0 from '@angular/core';
import { inject, LOCALE_ID, Pipe } from '@angular/core';
import { createInjectionToken } from 'ngxtension/create-injection-token';

/**
 * @internal
 */
const defaultOptions$3 = {
    style: 'short',
    localeMatcher: 'lookup',
    fallback: 'code',
};
/**
 * @internal
 */
const [injectFn$3, provideFn$3] = createInjectionToken(() => defaultOptions$3);
/**
 * Provides a way to inject the options for the DisplayNamesPipe.
 *
 * @param options The options to use for the DisplayNamesPipe.
 * @returns The provider for the DisplayNamesPipe.
 */
function provideDisplayNamesOptions(options) {
    return provideFn$3({ ...defaultOptions$3, ...options });
}
/**
 * This pipe is a wrapper around the [Intl.DisplayNames](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames) API.
 *
 * @returns The display name of the code or the code as it is in case of errors.
 */
class DisplayNamesPipe {
    constructor() {
        this.defaultOptions = injectFn$3();
        this.locale = inject(LOCALE_ID);
    }
    /**
     * Displays the name of the given code in the given locale.
     *
     * @param code The code to transform.
     * @param type DisplayNamesType to use.
     * @param style Optional. The formatting style to use. Defaults to "short".
     * @param locale Optional. The locale to use for the transformation. Defaults to LOCALE_ID.
     * @returns The name of the given code in the given locale or the code itself if the name could not be found.
     */
    transform(code, type, style, locale) {
        try {
            return new Intl.DisplayNames(locale || this.locale, {
                ...this.defaultOptions,
                type,
                ...(style ? { style } : {}),
            }).of(code);
        }
        catch (e) {
            console.error(e);
            return code;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: DisplayNamesPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "18.0.3", ngImport: i0, type: DisplayNamesPipe, isStandalone: true, name: "displayNames" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: DisplayNamesPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'displayNames',
                    standalone: true,
                }]
        }] });

/**
 * @internal
 */
const defaultOptions$2 = {
    style: 'long',
    type: 'conjunction',
};
/**
 * @internal
 */
const [injectFn$2, provideFn$2] = createInjectionToken(() => defaultOptions$2);
/**
 * Provides a way to inject the options for the ListFormatPipe.
 *
 * @param options The options to use for the ListFormatPipe.
 * @returns The provider for the ListFormatPipe.
 */
function provideListFormatOptions(options) {
    return provideFn$2({ ...defaultOptions$2, ...options });
}
/**
 * This pipe is a wrapper around the [Intl.ListFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat) API.
 *
 * @returns The formatted list of values or the list as string in case of errors.
 */
class ListFormatPipe {
    constructor() {
        this.defaultOptions = injectFn$2();
        this.locale = inject(LOCALE_ID);
    }
    /**
     * Transforms the list of values into a formatted string.
     *
     * @param value The list of values to format.
     * @param style Optional. The formatting style to use. Defaults to "long".
     * @param locale Optional. The locale to use for the transformation. Defaults to LOCALE_ID.
     * @returns The formatted list of values or the list as string in case of errors.
     */
    transform(value, style, locale) {
        try {
            return new Intl.ListFormat(locale || this.locale, {
                ...this.defaultOptions,
                ...(style ? { style } : {}),
            }).format(Array.from(value));
        }
        catch (e) {
            console.error(e);
            return Array.from(value).join(', ');
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: ListFormatPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "18.0.3", ngImport: i0, type: ListFormatPipe, isStandalone: true, name: "listFormat" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: ListFormatPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'listFormat',
                    standalone: true,
                }]
        }] });

/**
 * @internal
 */
const defaultOptions$1 = {
    localeMatcher: 'best fit', // other values: "lookup",
    type: 'cardinal', // other values: "ordinal"
};
/**
 * @internal
 */
const [injectFn$1, provideFn$1] = createInjectionToken(() => defaultOptions$1);
/**
 * Provides a way to inject the options for the PluralRules.
 *
 * @param options The options to use for the PluralRules.
 * @returns The provider for the PluralRules.
 */
function providePluralRulesOptions(options) {
    return provideFn$1({ ...defaultOptions$1, ...options });
}
/**
 * This pipe is a wrapper around the [Intl.PluralRules](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules) API.
 * It takes a value and returns the plural category for that value.
 *
 * @returns The plural category for the value or the value as string in case of errors.
 */
class PluralRulesPipe {
    constructor() {
        this.defaultOptions = injectFn$1();
        this.locale = inject(LOCALE_ID);
    }
    /**
     * Transforms the value into a plural category.
     *
     * @param value The value to transform.
     * @param locale Optional, the locale to use for the formatting.
     * @returns The plural category for the value or the value as string in case of errors.
     */
    transform(value, locale) {
        try {
            return new Intl.PluralRules(locale || this.locale, this.defaultOptions).select(value);
        }
        catch (e) {
            console.error(e);
            return String(value);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: PluralRulesPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "18.0.3", ngImport: i0, type: PluralRulesPipe, isStandalone: true, name: "pluralRules" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: PluralRulesPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'pluralRules',
                    standalone: true,
                }]
        }] });

/**
 * @internal
 */
const defaultOptions = {
    localeMatcher: 'best fit', // other values: "lookup"
    numeric: 'always', // other values: "auto"
    style: 'long', // other values: "short" or "narrow"
};
/**
 * @internal
 */
const [injectFn, provideFn] = createInjectionToken(() => defaultOptions);
/**
 * Provides a way to inject the options for the RelativeTimeFormatPipe.
 * @param options The options to use for the RelativeTimeFormatPipe.
 *
 * @returns The provider for the RelativeTimeFormatPipe.
 */
function provideRelativeTimeFormatOptions(options) {
    return provideFn({ ...defaultOptions, ...options });
}
/**
 * This pipe is a wrapper around the [Intl.RelativeTimeFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat) API.
 *
 * @returns The relative time format of the value or the value as it is in case of errors.
 */
class RelativeTimeFormatPipe {
    constructor() {
        this.defaultOptions = injectFn();
        this.locale = inject(LOCALE_ID);
    }
    /**
     * Transforms the value into a relative time format.
     *
     * @param value The value to format.
     * @param unit The unit of the value.
     * @param style Optional, the formatting style to use.
     * @param locale Optional, the locale to use for the formatting.
     * @returns The relative time format of the value or the value as it is in case of errors.
     */
    transform(value, unit, style, locale) {
        try {
            return new Intl.RelativeTimeFormat(locale || this.locale, {
                ...this.defaultOptions,
                ...(style ? { style } : {}),
            }).format(value, unit);
        }
        catch (e) {
            console.error(e);
            return value.toString();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: RelativeTimeFormatPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "18.0.3", ngImport: i0, type: RelativeTimeFormatPipe, isStandalone: true, name: "relativeTimeFormat" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: RelativeTimeFormatPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'relativeTimeFormat',
                    standalone: true,
                }]
        }] });

/**
 * This pipe is a wrapper around the [Intl.supportedValuesOf](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/supportedValuesOf) method.
 *
 * @returns An array containing the supported calendar, collation, currency, numbering systems, or unit values supported by the implementation.
 */
class SupportedValuesOf {
    /**
     * Transforms a key into an array containing the supported calendar, collation, currency, numbering systems, or unit values supported by the implementation.
     *
     * @param key A key string indicating the category of values to be returned. This is one of: "calendar", "collation", "currency","numberingSystem", "timeZone", "unit"
     * @returns An array containing the supported values for the key or an empty array if the input is invalid.
     */
    transform(key) {
        try {
            return Intl.supportedValuesOf(key);
        }
        catch (e) {
            console.error(e);
            return [];
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: SupportedValuesOf, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "18.0.3", ngImport: i0, type: SupportedValuesOf, isStandalone: true, name: "supportedValuesOf" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: SupportedValuesOf, decorators: [{
            type: Pipe,
            args: [{
                    name: 'supportedValuesOf',
                    standalone: true,
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { DisplayNamesPipe, ListFormatPipe, PluralRulesPipe, RelativeTimeFormatPipe, SupportedValuesOf, provideDisplayNamesOptions, provideListFormatOptions, providePluralRulesOptions, provideRelativeTimeFormatOptions };
//# sourceMappingURL=ngxtension-intl.mjs.map
