{"version":3,"file":"ngxtension-inject-params.mjs","sources":["../../../../libs/ngxtension/inject-params/src/inject-params.ts","../../../../libs/ngxtension/inject-params/src/ngxtension-inject-params.ts"],"sourcesContent":["import { assertInInjectionContext, inject, type Signal } from '@angular/core';\nimport { toSignal } from '@angular/core/rxjs-interop';\nimport { ActivatedRoute, type Params } from '@angular/router';\nimport { map } from 'rxjs';\n\n/**\n * Injects the params from the current route.\n */\nexport function injectParams(): Signal<Params>;\n\n/**\n * Injects the params from the current route and returns the value of the provided key.\n * @param key\n */\nexport function injectParams(key: string): Signal<string | null>;\n\n/**\n * Injects the params from the current route and returns the result of the provided transform function.\n * @param transform\n */\nexport function injectParams<T>(transform: (params: Params) => T): Signal<T>;\n\n/**\n * Injects the params from the current route.\n * If a key is provided, it will return the value of that key.\n * If a transform function is provided, it will return the result of that function.\n * Otherwise, it will return the entire params object.\n *\n * @example\n * const userId = injectParams('id'); // returns the value of the 'id' param\n * const userId = injectParams(p => p['id'] as string); // same as above but can be used with a custom transform function\n * const params = injectParams(); // returns the entire params object\n *\n * @param keyOrTransform OPTIONAL The key of the param to return, or a transform function to apply to the params object\n */\nexport function injectParams<T>(\n\tkeyOrTransform?: string | ((params: Params) => T),\n): Signal<T | Params | string | null> {\n\tassertInInjectionContext(injectParams);\n\tconst route = inject(ActivatedRoute);\n\tconst params = route.snapshot.params;\n\n\tif (typeof keyOrTransform === 'function') {\n\t\treturn toSignal(route.params.pipe(map(keyOrTransform)), {\n\t\t\tinitialValue: keyOrTransform(params),\n\t\t});\n\t}\n\n\tconst getParam = (params: Params) =>\n\t\tkeyOrTransform ? params?.[keyOrTransform] ?? null : params;\n\n\treturn toSignal(route.params.pipe(map(getParam)), {\n\t\tinitialValue: getParam(params),\n\t});\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":";;;;;AAsBA;;;;;;;;;;;;AAYG;AACG,SAAU,YAAY,CAC3B,cAAiD,EAAA;IAEjD,wBAAwB,CAAC,YAAY,CAAC,CAAC;AACvC,IAAA,MAAM,KAAK,GAAG,MAAM,CAAC,cAAc,CAAC,CAAC;AACrC,IAAA,MAAM,MAAM,GAAG,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC;AAErC,IAAA,IAAI,OAAO,cAAc,KAAK,UAAU,EAAE;AACzC,QAAA,OAAO,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,EAAE;AACvD,YAAA,YAAY,EAAE,cAAc,CAAC,MAAM,CAAC;AACpC,SAAA,CAAC,CAAC;KACH;IAED,MAAM,QAAQ,GAAG,CAAC,MAAc,KAC/B,cAAc,GAAG,MAAM,GAAG,cAAc,CAAC,IAAI,IAAI,GAAG,MAAM,CAAC;AAE5D,IAAA,OAAO,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,EAAE;AACjD,QAAA,YAAY,EAAE,QAAQ,CAAC,MAAM,CAAC;AAC9B,KAAA,CAAC,CAAC;AACJ;;ACtDA;;AAEG;;;;"}