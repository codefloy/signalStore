import { injectDocumentVisibilityStream } from 'ngxtension/inject-document-visibility';
import { partition, takeUntil, repeat } from 'rxjs';

/**
 * RxJS operator to pause a stream when the document is hidden (i.e.: tab is not active)
 * and to resume the stream when the document is visible (i.e.: tab is active).
 *
 * @example This example shows how to do an HTTP GET every 5 seconds only when the page is visible in the browser:
 * ```typescript
 * http.get('http://api').pipe(poll(5000), whenPageVisible()).subscribe(result => {})
 * ```
 * @public
 */
function whenDocumentVisible(options) {
    const visibilityChanged$ = injectDocumentVisibilityStream(options);
    const [pageVisible$, pageHidden$] = partition(visibilityChanged$, () => {
        return document.visibilityState === 'visible';
    });
    return (source) => {
        return source.pipe(takeUntil(pageHidden$), repeat({ delay: () => pageVisible$ }));
    };
}

/**
 * Generated bundle index. Do not edit.
 */

export { whenDocumentVisible };
//# sourceMappingURL=ngxtension-when-document-visible.mjs.map
