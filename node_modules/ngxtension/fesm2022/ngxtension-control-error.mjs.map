{"version":3,"file":"ngxtension-control-error.mjs","sources":["../../../../libs/ngxtension/control-error/src/control-error.ts","../../../../libs/ngxtension/control-error/src/ngxtension-control-error.ts"],"sourcesContent":["import {\n\tDirective,\n\tEmbeddedViewRef,\n\tInjectionToken,\n\tInput,\n\tTemplateRef,\n\tViewContainerRef,\n\tinject,\n\tsignal,\n\ttype Provider,\n} from '@angular/core';\nimport {\n\ttakeUntilDestroyed,\n\ttoObservable,\n\ttoSignal,\n} from '@angular/core/rxjs-interop';\nimport {\n\tAbstractControl,\n\tFormGroupDirective,\n\tNgForm,\n\ttype ValidationErrors,\n} from '@angular/forms';\nimport { filterNil } from 'ngxtension/filter-nil';\nimport {\n\tBehaviorSubject,\n\tObservable,\n\tcombineLatest,\n\tdistinctUntilChanged,\n\tmap,\n\tof,\n\tshareReplay,\n\tstartWith,\n\tswitchMap,\n} from 'rxjs';\n\nexport const dirty$ = (control: AbstractControl) => {\n\tconst dirty$ = new BehaviorSubject(control.dirty);\n\n\tconst markAsPristine = control.markAsPristine.bind(control);\n\n\tconst markAsDirty = control.markAsDirty.bind(control);\n\n\tcontrol.markAsPristine = (\n\t\t...args: Parameters<AbstractControl['markAsPristine']>\n\t) => {\n\t\tmarkAsPristine(...args);\n\t\tdirty$.next(false);\n\t};\n\n\tcontrol.markAsDirty = (\n\t\t...args: Parameters<AbstractControl['markAsDirty']>\n\t) => {\n\t\tmarkAsDirty(...args);\n\t\tdirty$.next(true);\n\t};\n\n\treturn dirty$.pipe(distinctUntilChanged());\n};\n\nexport const touched$ = (control: AbstractControl) => {\n\tconst touched$ = new BehaviorSubject(control.touched);\n\n\tconst markAsTouched = control.markAsTouched.bind(control);\n\n\tconst markAsUntouched = control.markAsUntouched.bind(control);\n\n\tcontrol.markAsTouched = (\n\t\t...args: Parameters<AbstractControl['markAsTouched']>\n\t) => {\n\t\tmarkAsTouched(...args);\n\t\ttouched$.next(true);\n\t};\n\n\tcontrol.markAsUntouched = (\n\t\t...args: Parameters<AbstractControl['markAsUntouched']>\n\t) => {\n\t\tmarkAsUntouched(...args);\n\t\ttouched$.next(false);\n\t};\n\n\treturn touched$.pipe(distinctUntilChanged());\n};\n\n/**\n *  Defines when a {@link AbstractControl control} is in an *state*.\n */\nexport type StateMatcher = (\n\tcontrol: AbstractControl,\n\tparent?: FormGroupDirective | NgForm,\n) => Observable<boolean>;\n\n/**\n * Emits whenever the value, status, touched/untouched state of the control changes or the parent submits.\n *\n * Evaluates to `true` when the control status is `INVALID` and it is `touched` or the parent is `submitted`.\n */\nexport const NGX_DEFAULT_CONTROL_ERROR_STATE_MATCHER: StateMatcher = (\n\tcontrol,\n\tparent,\n) =>\n\tcombineLatest(\n\t\t[\n\t\t\tcontrol.valueChanges.pipe(startWith(control.value)),\n\t\t\tcontrol.statusChanges.pipe(\n\t\t\t\tstartWith(control.status),\n\t\t\t\tdistinctUntilChanged(),\n\t\t\t),\n\t\t\ttouched$(control),\n\t\t\tparent?.ngSubmit.pipe(\n\t\t\t\tmap(() => true),\n\t\t\t\tstartWith(parent.submitted),\n\t\t\t\tdistinctUntilChanged(),\n\t\t\t) ?? of(false),\n\t\t],\n\t\t(value, status, touched, submitted) =>\n\t\t\tstatus === 'INVALID' && (touched || submitted),\n\t);\n\nexport const NGX_CONTROL_ERROR_STATE_MATCHER = new InjectionToken<StateMatcher>(\n\t'NGX_CONTROL_ERROR_STATE_MATCHER',\n\t{ factory: () => NGX_DEFAULT_CONTROL_ERROR_STATE_MATCHER },\n);\n\nexport const NGX_CONTROL_ERROR_PARENT = new InjectionToken<\n\tFormGroupDirective | NgForm\n>('NGX_CONTROL_ERROR_PARENT');\n\n/**\n * Configures {@link NgxControlError}.\n */\nexport const provideNgxControlError = (options?: {\n\terrorStateMatcher?: () => StateMatcher;\n\tparent?: () => NgForm | FormGroupDirective;\n}): Provider[] => {\n\tconst provider = [];\n\n\tif (options?.errorStateMatcher)\n\t\tprovider.push({\n\t\t\tprovide: NGX_CONTROL_ERROR_STATE_MATCHER,\n\t\t\tuseFactory: options.errorStateMatcher,\n\t\t});\n\n\tif (options?.parent)\n\t\tprovider.push({\n\t\t\tprovide: NGX_CONTROL_ERROR_PARENT,\n\t\t\tuseFactory: options.parent,\n\t\t});\n\n\treturn provider;\n};\n\n/**\n * Represents the context of the template the {@link NgxControlError} sits on.\n */\nexport interface NgxControlErrorContext {\n\t/**\n\t * Reference to the `errors` of {@link NgxControlError.control}\n\t */\n\t$implicit: ValidationErrors;\n\n\t/**\n\t * Reference to {@link NgxControlError.control}\n\t */\n\tcontrol: AbstractControl;\n\n\t/**\n\t * Reference to {@link NgxControlError.track}\n\t */\n\ttrack: string | string[];\n}\n\n/**\n * Structural directive for displaying form control errors consistently and reduce boilerplate.\n *\n * ## Usage\n *\n * ```html\n * <label>\n * \t<b>Name</b>\n * \t<input type=\"text\" [formControl]=\"name\" />\n * \t<strong *ngxControlError=\"name; track: 'required'\">Name is required.</strong>\n * </label>\n * ```\n *\n * The template will be rendered, when the control is in an [_error state_](#configuration) and its errors include the tracked error(s).\n *\n * without `NgxControlError`:\n *\n * ```html\n * <label>\n * \t<b>Name</b>\n * \t<input type=\"text\" [formControl]=\"name\" />\n * \t@if (name.hasError('required') && (name.touched || form.submitted)) {\n * \t<strong>Name is required.</strong>\n * \t}\n * </label>\n * ```\n *\n * ## Configuration\n *\n * A `StateMatcher` defines when the provided control is in an _error state_.\n * A `StateMatcher` is a function which returns an observable. Every time the `StateMatcher` emits a value, the directive checks whether it should render or hide its template:\n * The directive renders its template when the `StateMatcher` emits `true` and the errors of the control include at least 1 tracked error, else its template will be hidden.\n *\n * ```ts\n * export type StateMatcher = (\n * control: AbstractControl,\n * parent?: FormGroupDirective | NgForm,\n * ) => Observable<boolean>;\n * ```\n *\n * Per default the control is considered in an _error state_ when 1. its status is `INVALID` and 2. it is `touched` or its form has been `submitted`.\n *\n * You can override this behavior:\n *\n * ```ts\n * //\n * // A control is in an error state when its status is invalid.\n * // Emits whenever statusChanges emits.\n * // You may want to add more sources, such as valueChanges.\n * //\n * export const customErrorStateMatcher: StateMatcher = (control) =>\n * control.statusChanges.pipe(\n * startWith(control.status),\n * map((status) => status === 'INVALID'),\n * );\n * ```\n *\n * ### Via DI\n *\n * ```ts\n * provideNgxControlError({ errorStateMatcher: customErrorStateMatcher });\n * ```\n *\n * ### Via Input\n *\n * ```html\n * <label>\n * \t<b>Name</b>\n * \t<input type=\"text\" [formControl]=\"name\" />\n * \t<strong *ngxControlError=\"name; track: 'required'; errorStateMatcher: customErrorStateMatcher\">Name is required.</strong>\n * </label>\n * ```\n *\n * ## Integration\n *\n * ### [NGX Translate](https://github.com/ngx-translate/core)\n *\n * You can iterate over all possible errors and pass the `errors` to the translate pipe:\n *\n * ```html\n * <label>\n * \t<b>Mail</b>\n * \t<input type=\"email\" [formControl]=\"mail\" />\n * \t@for (error of ['required', 'email', 'myCustomError']; track error) {\n * \t<strong *ngxControlError=\"mail; track: error\">{{ \"PATH.TO.MAIL_CONTROL.ERRORS.\" + error | translate: mail.errors }}</strong>\n * \t}\n * </label>\n * ```\n *\n * ### [Angular Material](https://github.com/angular/components)\n *\n * ```html\n * <mat-form-field>\n * \t<mat-label>Name</mat-label>\n * \t<input matInput [formControl]=\"name\" />\n * \t<mat-error *ngxControlError=\"name; track: 'required'\">Name is required.</mat-error>\n * </mat-form-field>\n * ```\n */\n@Directive({\n\tselector: '[ngxControlError]',\n\tstandalone: true,\n})\nexport class NgxControlError {\n\t/** @ignore */\n\tprivate readonly templateRef = inject(TemplateRef);\n\n\t/** @ignore */\n\tprivate readonly viewContainerRef = inject(ViewContainerRef);\n\n\tpublic constructor() {\n\t\t// Whenever one of the tracked errors are included in the controls errors and the control is in an error state, render this template.\n\t\tcombineLatest(\n\t\t\t[toObservable(this.track$), toObservable(this.control$), this._hasError$],\n\t\t\t(track, control, hasError) => {\n\t\t\t\tthis.viewContainerRef.clear();\n\n\t\t\t\tif (hasError && control != null && track != null)\n\t\t\t\t\tthis.viewContainerRef.createEmbeddedView(this.templateRef, {\n\t\t\t\t\t\t$implicit: control.errors ?? {},\n\t\t\t\t\t\ttrack,\n\t\t\t\t\t\tcontrol,\n\t\t\t\t\t} satisfies NgxControlErrorContext);\n\t\t\t},\n\t\t)\n\t\t\t.pipe(takeUntilDestroyed())\n\t\t\t.subscribe();\n\t}\n\n\t/**\n\t * The errors this directive tracks, when a {@link control$ control} is provided.\n\t */\n\t@Input({ alias: 'ngxControlErrorTrack', required: true })\n\tpublic set track(track) {\n\t\tthis.track$.set(track);\n\t}\n\n\tpublic get track() {\n\t\treturn this.track$();\n\t}\n\n\t/**\n\t * The control which `errors` are tracked.\n\t *\n\t * @see {@link AbstractControl.errors}\n\t */\n\t@Input({ alias: 'ngxControlError', required: true })\n\tpublic set control(control) {\n\t\tthis.control$.set(control);\n\t}\n\n\tpublic get control() {\n\t\treturn this.control$();\n\t}\n\n\t/**\n\t *  A `StateMatcher` which defines when this {@link control$ control} is in an *error state*.\n\t *  This directive **ONLY** renders this template when the `StateMatcher` evaluates to `true`.\n\t *\n\t *  Defaults to {@link NGX_CONTROL_ERROR_STATE_MATCHER}.\n\t */\n\t@Input({ alias: 'ngxControlErrorErrorStateMatcher' })\n\tpublic set errorStateMatcher(errorStateMatcher: StateMatcher) {\n\t\tthis.errorStateMatcher$.set(errorStateMatcher);\n\t}\n\n\tpublic get errorStateMatcher() {\n\t\treturn this.errorStateMatcher$();\n\t}\n\n\t/**\n\t * The parent of this {@link control$ control}.\n\t *\n\t * NOTE: Might not be the control referenced by {@link AbstractControl.parent parent} of this {@link control$ control}.\n\t */\n\t@Input({ alias: 'ngxControlErrorParent' })\n\tpublic set parent(parent) {\n\t\tthis.parent$.set(parent);\n\t}\n\n\tpublic get parent() {\n\t\treturn this.parent$();\n\t}\n\n\t/**\n\t * The errors this directive tracks, when a {@link control$ control} is provided.\n\t */\n\tpublic readonly track$ = signal<undefined | string | string[]>(undefined);\n\n\t/**\n\t * The parent of this {@link control$ control}.\n\t *\n\t * NOTE: Might not be the control referenced by {@link AbstractControl.parent parent} of this {@link control$ control}.\n\t */\n\tpublic readonly parent$ = signal(\n\t\tinject(NGX_CONTROL_ERROR_PARENT, { optional: true }) ??\n\t\t\tinject(FormGroupDirective, { optional: true }) ??\n\t\t\tinject(NgForm, { optional: true }) ??\n\t\t\tundefined,\n\t);\n\n\t/**\n\t * The control which `errors` are tracked.\n\t *\n\t * @see {@link AbstractControl.errors}\n\t */\n\tpublic readonly control$ = signal<AbstractControl | undefined>(undefined);\n\n\t/**\n\t *  A `StateMatcher` which defines when this {@link control$ control} is in an *error state*.\n\t *  This directive **ONLY** renders this template when the `StateMatcher` evaluates to `true`.\n\t *\n\t *  Defaults to {@link NGX_CONTROL_ERROR_STATE_MATCHER}.\n\t */\n\tpublic readonly errorStateMatcher$ = signal(\n\t\tinject(NGX_CONTROL_ERROR_STATE_MATCHER),\n\t);\n\n\t/**\n\t * The context of this template.\n\t */\n\tpublic get context() {\n\t\treturn (\n\t\t\tthis.viewContainerRef.get(0) as EmbeddedViewRef<NgxControlErrorContext>\n\t\t)?.context;\n\t}\n\n\t/**\n\t * Whether this {@link control$ control's} errors include one of the {@link track$ tracked errors} and whether it is in an *{@link errorState$ error state}*.\n\t */\n\tprivate readonly _hasError$ = combineLatest([\n\t\ttoObservable(this.track$),\n\t\ttoObservable(this.errorStateMatcher$),\n\t\ttoObservable(this.control$).pipe(filterNil()),\n\t\ttoObservable(this.parent$),\n\t]).pipe(\n\t\tswitchMap(([track, errorStateMatcher, control, parent]) =>\n\t\t\terrorStateMatcher(control, parent).pipe(\n\t\t\t\tmap(\n\t\t\t\t\t(errorState) =>\n\t\t\t\t\t\terrorState &&\n\t\t\t\t\t\ttrack != null &&\n\t\t\t\t\t\tcontrol != null &&\n\t\t\t\t\t\t(typeof track === 'string'\n\t\t\t\t\t\t\t? control.hasError(track)\n\t\t\t\t\t\t\t: track.some((x) => control.hasError(x))),\n\t\t\t\t),\n\t\t\t),\n\t\t),\n\t\tshareReplay(1), // cache the latest errorStateMatcher computation\n\t);\n\n\t/**\n\t * Whether this {@link control$ control's} errors include one of the {@link track$ tracked errors} and whether it is in an *{@link errorState$ error state}*.\n\t */\n\tpublic readonly hasError$ = toSignal(this._hasError$, {\n\t\tinitialValue: false,\n\t});\n\n\t/** @ignore */\n\tpublic static ngTemplateContextGuard = (\n\t\tdirective: NgxControlError,\n\t\tcontext: unknown,\n\t): context is NgxControlErrorContext => true;\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}