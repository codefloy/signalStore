import { toSignal } from '@angular/core/rxjs-interop';
import { ValueChangeEvent, StatusChangeEvent, TouchedChangeEvent, PristineChangeEvent } from '@angular/forms';
import { filter, defer, combineLatest, startWith, map, distinctUntilChanged } from 'rxjs';

function valueEvents$(form) {
    return form.events.pipe(filter((event) => event instanceof ValueChangeEvent));
}
function statusEvents$(form) {
    return form.events.pipe(filter((event) => event instanceof StatusChangeEvent));
}
function touchedEvents$(form) {
    return form.events.pipe(filter((event) => event instanceof TouchedChangeEvent));
}
function pristineEvents$(form) {
    return form.events.pipe(filter((event) => event instanceof PristineChangeEvent));
}
function isValueEvent(event) {
    return event instanceof ValueChangeEvent;
}
function isStatusEvent(event) {
    return event instanceof StatusChangeEvent;
}
function isPristineEvent(event) {
    return event instanceof PristineChangeEvent;
}
function isTouchedEvent(event) {
    return event instanceof TouchedChangeEvent;
}
function allEventsObservable(form) {
    return defer(() => combineLatest([
        valueEvents$(form).pipe(startWith(form.value), map((value) => (isValueEvent(value) ? value.value : value)), distinctUntilChanged((previous, current) => JSON.stringify(previous) === JSON.stringify(current))),
        statusEvents$(form).pipe(startWith(form.status)),
        touchedEvents$(form).pipe(startWith(form.touched)),
        pristineEvents$(form).pipe(startWith(form.pristine)),
    ]).pipe(map(([valueParam, statusParam, touchedParam, pristineParam]) => {
        // Original values (plus value)
        const stat = isStatusEvent(statusParam)
            ? statusParam.status
            : statusParam;
        const touch = isTouchedEvent(touchedParam)
            ? touchedParam.touched
            : touchedParam;
        const prist = isPristineEvent(pristineParam)
            ? pristineParam.pristine
            : pristineParam;
        // Derived values - not directly named as events but are aliases for something that can be derived from original values
        const validDerived = stat === 'VALID';
        const invalidDerived = stat === 'INVALID';
        const pendingDerived = stat === 'PENDING';
        const dirtyDerived = !prist;
        const untouchedDerived = !touch;
        return {
            value: valueParam,
            status: stat,
            touched: touch,
            pristine: prist,
            valid: validDerived,
            invalid: invalidDerived,
            pending: pendingDerived,
            dirty: dirtyDerived,
            untouched: untouchedDerived,
        };
    })));
}
function allEventsSignal(form) {
    return toSignal(allEventsObservable(form), {
        initialValue: {
            value: form.value,
            status: form.status,
            pristine: form.pristine,
            touched: form.touched,
            valid: form.valid,
            invalid: form.invalid,
            pending: form.pending,
            dirty: form.dirty,
            untouched: form.untouched,
        },
    });
}

/**
 * Generated bundle index. Do not edit.
 */

export { allEventsObservable, allEventsSignal };
//# sourceMappingURL=ngxtension-form-events.mjs.map
