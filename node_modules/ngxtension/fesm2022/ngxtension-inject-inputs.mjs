import { reflectComponentType, isSignal, computed } from '@angular/core';

function inputs(dir, dirType) {
    const mirror = reflectComponentType(dirType);
    if (!mirror) {
        throw new Error(`[ngxtension] The provided symbol is not a component nor a directive`);
    }
    const inputs = mirror.inputs.reduce((inputs, cur) => {
        if (dir[cur.propName] && isSignal(dir[cur.propName])) {
            inputs[cur.propName] = dir[cur.propName];
        }
        return inputs;
    }, {});
    return computed(() => Object.keys(inputs).reduce((acc, key) => {
        acc[key] = inputs[key]();
        return acc;
    }, {}));
}
/**
 * @deprecated Please use `inputs()` instead
 */
function injectInputs(dir, dirType) {
    return inputs(dir, dirType);
}

/**
 * `mergeInputs` is meant to be used as a `transform` function for Object-input (input with object value)
 */
function mergeInputs(defaultValue = {}) {
    return (value) => {
        // NOTE: if the directive is used as `<div directive></div>` without binding syntax
        // then the bound value is `''` in which case we'll return the `defaultValue` for the input
        if (value === '')
            return defaultValue;
        return { ...defaultValue, ...value };
    };
}

/**
 * Generated bundle index. Do not edit.
 */

export { injectInputs, inputs, mergeInputs };
//# sourceMappingURL=ngxtension-inject-inputs.mjs.map
