{"version":3,"file":"ngxtension-navigation-end.mjs","sources":["../../../../libs/ngxtension/navigation-end/src/navigation-end.ts","../../../../libs/ngxtension/navigation-end/src/ngxtension-navigation-end.ts"],"sourcesContent":["import { Injector, inject, runInInjectionContext } from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { NavigationEnd, Router, type Event } from '@angular/router';\nimport { assertInjector } from 'ngxtension/assert-injector';\nimport { filter, type Observable } from 'rxjs';\n\n/**\n * Creates an Observable that emits when a navigation ends.\n * @returns An Observable of NavigationEnd events.\n */\nexport function injectNavigationEnd(\n\tinjector?: Injector,\n): Observable<NavigationEnd> {\n\tinjector = assertInjector(injectNavigationEnd, injector);\n\treturn runInInjectionContext(injector, () => {\n\t\treturn inject(Router).events.pipe(\n\t\t\tfilter(\n\t\t\t\t(event: Event): event is NavigationEnd =>\n\t\t\t\t\tevent instanceof NavigationEnd,\n\t\t\t),\n\t\t\ttakeUntilDestroyed(),\n\t\t);\n\t});\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":";;;;;;AAMA;;;AAGG;AACG,SAAU,mBAAmB,CAClC,QAAmB,EAAA;AAEnB,IAAA,QAAQ,GAAG,cAAc,CAAC,mBAAmB,EAAE,QAAQ,CAAC,CAAC;AACzD,IAAA,OAAO,qBAAqB,CAAC,QAAQ,EAAE,MAAK;QAC3C,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,IAAI,CAChC,MAAM,CACL,CAAC,KAAY,KACZ,KAAK,YAAY,aAAa,CAC/B,EACD,kBAAkB,EAAE,CACpB,CAAC;AACH,KAAC,CAAC,CAAC;AACJ;;ACvBA;;AAEG;;;;"}