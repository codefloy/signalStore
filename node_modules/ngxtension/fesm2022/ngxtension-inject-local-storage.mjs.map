{"version":3,"file":"ngxtension-inject-local-storage.mjs","sources":["../../../../libs/ngxtension/inject-local-storage/src/inject-local-storage.ts","../../../../libs/ngxtension/inject-local-storage/src/ngxtension-inject-local-storage.ts"],"sourcesContent":["import {\n\tDestroyRef,\n\tInjectionToken,\n\teffect,\n\tinject,\n\tsignal,\n\ttype Injector,\n\ttype WritableSignal,\n} from '@angular/core';\nimport { assertInjector } from 'ngxtension/assert-injector';\n\nexport const NGXTENSION_LOCAL_STORAGE = new InjectionToken(\n\t'NGXTENSION_LOCAL_STORAGE',\n\t{\n\t\tprovidedIn: 'root',\n\t\tfactory: () => localStorage, // this would be the default\n\t},\n);\n\nexport function provideLocalStorageImpl(impl: typeof globalThis.localStorage) {\n\treturn {\n\t\tprovide: NGXTENSION_LOCAL_STORAGE,\n\t\tuseValue: impl,\n\t};\n}\n\n/**\n * Options to override the default behavior of the local storage signal.\n */\nexport type LocalStorageOptions<T> = {\n\t/**\n\t * The default value to use when the key is not present in local storage.\n\t */\n\tdefaultValue?: T | (() => T);\n\t/**\n\t *\n\t * Determines if local storage syncs with the signal.\n\t * When true, updates in one tab reflect in others, ideal for shared-state apps.\n\t * Defaults to true.\n\t */\n\tstorageSync?: boolean;\n\t/**\n\t * Override the default JSON.stringify function for custom serialization.\n\t * @param value\n\t */\n\tstringify?: (value: unknown) => string;\n\t/**\n\t * Override the default JSON.parse function for custom deserialization.\n\t * @param value\n\t */\n\tparse?: (value: string) => unknown;\n\n\t/**\n\t * Injector for the Injection Context\n\t */\n\tinjector?: Injector;\n};\n\nfunction isFunction(value: unknown): value is (...args: unknown[]) => unknown {\n\treturn typeof value === 'function';\n}\n\nfunction goodTry<T>(tryFn: () => T): T | undefined {\n\ttry {\n\t\treturn tryFn();\n\t} catch {\n\t\treturn undefined;\n\t}\n}\n\nfunction parseJSON(value: string): unknown {\n\treturn value === 'undefined' ? undefined : JSON.parse(value);\n}\n\nexport const injectLocalStorage = <T>(\n\tkey: string,\n\toptions: LocalStorageOptions<T> = {},\n): WritableSignal<T | undefined> => {\n\tconst defaultValue = isFunction(options.defaultValue)\n\t\t? options.defaultValue()\n\t\t: options.defaultValue;\n\tconst stringify = isFunction(options.stringify)\n\t\t? options.stringify\n\t\t: JSON.stringify;\n\tconst parse = isFunction(options.parse) ? options.parse : parseJSON;\n\tconst storageSync = options.storageSync ?? true;\n\n\treturn assertInjector(injectLocalStorage, options.injector, () => {\n\t\tconst localStorage = inject(NGXTENSION_LOCAL_STORAGE);\n\t\tconst destroyRef = inject(DestroyRef);\n\n\t\tconst initialStoredValue = goodTry(() => localStorage.getItem(key));\n\t\tconst initialValue = initialStoredValue\n\t\t\t? goodTry(() => parse(initialStoredValue) as T)\n\t\t\t: defaultValue;\n\t\tconst internalSignal = signal<T | undefined>(initialValue);\n\n\t\teffect(() => {\n\t\t\tconst value = internalSignal();\n\t\t\tif (value === undefined) {\n\t\t\t\tgoodTry(() => localStorage.removeItem(key));\n\t\t\t} else {\n\t\t\t\tgoodTry(() => localStorage.setItem(key, stringify(value)));\n\t\t\t}\n\t\t});\n\n\t\tif (storageSync) {\n\t\t\tconst onStorage = (event: StorageEvent) => {\n\t\t\t\tif (event.storageArea === localStorage && event.key === key) {\n\t\t\t\t\tconst newValue =\n\t\t\t\t\t\tevent.newValue !== null ? (parse(event.newValue) as T) : undefined;\n\t\t\t\t\tinternalSignal.set(newValue);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\twindow.addEventListener('storage', onStorage);\n\t\t\tdestroyRef.onDestroy(() => {\n\t\t\t\twindow.removeEventListener('storage', onStorage);\n\t\t\t});\n\t\t}\n\n\t\treturn internalSignal;\n\t});\n};\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}