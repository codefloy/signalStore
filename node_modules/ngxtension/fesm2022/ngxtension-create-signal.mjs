import { signal, computed } from '@angular/core';

/**
 * Creates a writable signal with a `value` property.
 *
 * @example
 * const state = createSignal({ count: 0 });
 *
 * effect(() => {
 *  // Works as expected
 *  console.log(state.value.count);
 * })
 *
 * // Effect will log: 1
 *
 * state.value = { count: 1 }; // Sets the value
 * // Effect will log: 1
 *
 * double = createComputed(() => state.value.count * 2);
 *
 * console.log(double.value); // Logs 2
 *
 * @param args - Arguments to pass to `signal()`.
 * @returns A writable signal with a `value` property.
 */
function createSignal(...args) {
    const sig = signal(...args);
    return Object.defineProperty(sig, 'value', {
        get: sig.asReadonly(),
        set: sig.set.bind(sig),
    });
}
/**
 * Creates a computed signal with a `value` property.
 * @param args - Arguments to pass to `computed()`.
 * @returns A computed signal with a `value` property.
 * @see createSignal
 */
function createComputed(...args) {
    const sig = computed(...args);
    return Object.defineProperty(sig, 'value', { get: sig });
}

/**
 * Generated bundle index. Do not edit.
 */

export { createComputed, createSignal };
//# sourceMappingURL=ngxtension-create-signal.mjs.map
