/**
 * Original code by PMNDRS
 * Source: https://github.com/pmndrs/react-three-rapier
 * License: MIT License (or specify the appropriate license)
 *
 * Creates a proxy that will create a singleton instance of the given class
 * when a property is accessed, and not before.
 *
 * @returns A proxy and a reset function, so that the instance can created again
 */
function createSingletonProxy(
/**
 * A function that returns a new instance of the class
 */
createInstance) {
    let instance;
    const handler = {
        get(_, prop) {
            if (!instance) {
                instance = createInstance();
            }
            return Reflect.get(instance, prop);
        },
        set(_, prop, value) {
            if (!instance) {
                instance = createInstance();
            }
            return Reflect.set(instance, prop, value);
        },
    };
    const proxy = new Proxy({}, handler);
    const reset = () => {
        instance = undefined;
    };
    /**
     * Return the proxy and a reset function
     */
    return { proxy, reset };
}

/**
 * Generated bundle index. Do not edit.
 */

export { createSingletonProxy };
//# sourceMappingURL=ngxtension-singleton-proxy.mjs.map
