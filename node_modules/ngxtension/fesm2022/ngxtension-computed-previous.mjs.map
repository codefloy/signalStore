{"version":3,"file":"ngxtension-computed-previous.mjs","sources":["../../../../libs/ngxtension/computed-previous/src/computed-previous.ts","../../../../libs/ngxtension/computed-previous/src/ngxtension-computed-previous.ts"],"sourcesContent":["import { computed, untracked, type Signal } from '@angular/core';\n\n/**\n * Returns a signal that emits the previous value of the given signal.\n * The first time the signal is emitted, the previous value will be the same as the current value.\n *\n * @example\n * ```ts\n * const value = signal(0);\n * const previous = computedPrevious(value);\n *\n * effect(() => {\n *  console.log('Current value:', value());\n *  console.log('Previous value:', previous());\n * });\n *\n * Logs:\n * // Current value: 0\n * // Previous value: 0\n *\n * value.set(1);\n *\n * Logs:\n * // Current value: 1\n * // Previous value: 0\n *\n * value.set(2);\n *\n * Logs:\n * // Current value: 2\n * // Previous value: 1\n *```\n *\n * @param s Signal to compute previous value for\n * @returns Signal that emits previous value of `s`\n */\nexport function computedPrevious<T>(s: Signal<T>): Signal<T> {\n\tlet current = null as T;\n\tlet previous = untracked(() => s()); // initial value is the current value\n\n\treturn computed(() => {\n\t\tcurrent = s();\n\t\tconst result = previous;\n\t\tprevious = current;\n\t\treturn result;\n\t});\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":";;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCG;AACG,SAAU,gBAAgB,CAAI,CAAY,EAAA;IAC/C,IAAI,OAAO,GAAG,IAAS,CAAC;AACxB,IAAA,IAAI,QAAQ,GAAG,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IAEpC,OAAO,QAAQ,CAAC,MAAK;QACpB,OAAO,GAAG,CAAC,EAAE,CAAC;QACd,MAAM,MAAM,GAAG,QAAQ,CAAC;QACxB,QAAQ,GAAG,OAAO,CAAC;AACnB,QAAA,OAAO,MAAM,CAAC;AACf,KAAC,CAAC,CAAC;AACJ;;AC9CA;;AAEG;;;;"}