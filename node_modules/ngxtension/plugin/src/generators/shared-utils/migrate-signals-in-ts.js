"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAngularCoreImports = exports.getStartLineInfo = exports.migrateSignalsInClassOrDecorator = void 0;
const devkit_1 = require("@nx/devkit");
const node_path_1 = require("node:path");
const ts_morph_1 = require("ts-morph");
const migrate_signals_in_template_1 = require("./migrate-signals-in-template");
function migrateSignalsInClassOrDecorator(tree, sourcePath, targetClass, applicableDecorator, convertedVariables) {
    if (convertedVariables.size) {
        // process decorator metadata references
        const decoratorArg = applicableDecorator.getArguments()[0];
        if (ts_morph_1.Node.isObjectLiteralExpression(decoratorArg)) {
            decoratorArg
                .getChildrenOfKind(ts_morph_1.SyntaxKind.PropertyAssignment)
                .forEach((property) => {
                const decoratorPropertyName = property.getName();
                if (decoratorPropertyName === 'host' ||
                    decoratorPropertyName === 'template') {
                    let originalText = property.getFullText();
                    originalText = (0, migrate_signals_in_template_1.migrateTemplateVariablesToSignals)(originalText, new Set(convertedVariables.keys()));
                    if (originalText !== property.getFullText()) {
                        property.replaceWithText(originalText);
                    }
                }
                else if (decoratorPropertyName === 'templateUrl') {
                    const dir = (0, node_path_1.dirname)(sourcePath);
                    const templatePath = (0, devkit_1.joinPathFragments)(dir, property
                        .getInitializer()
                        .getText()
                        .slice(1, property.getInitializer().getText().length - 1));
                    let templateText = tree.exists(templatePath)
                        ? tree.read(templatePath, 'utf8')
                        : '';
                    if (templateText) {
                        templateText = (0, migrate_signals_in_template_1.migrateTemplateVariablesToSignals)(templateText, new Set(convertedVariables.keys()));
                        tree.write(templatePath, templateText);
                    }
                }
            });
        }
        // process ts class references
        const nonNullifyProperties = new Map();
        for (const propertyAccessExpression of targetClass.getDescendantsOfKind(ts_morph_1.SyntaxKind.PropertyAccessExpression)) {
            const propertyExpression = propertyAccessExpression.getExpression();
            if (!ts_morph_1.Node.isThisExpression(propertyExpression))
                continue;
            const propertyName = propertyAccessExpression.getName();
            if (!convertedVariables.has(propertyName))
                continue;
            const startLineInfo = getStartLineInfo(propertyAccessExpression);
            const ifParent = propertyAccessExpression.getFirstAncestorByKind(ts_morph_1.SyntaxKind.IfStatement);
            const ternaryParent = propertyAccessExpression.getFirstAncestorByKind(ts_morph_1.SyntaxKind.ConditionalExpression);
            if ((ifParent &&
                getStartLineInfo(ifParent.getExpression()) === startLineInfo) ||
                (ternaryParent &&
                    getStartLineInfo(ternaryParent.getCondition()) === startLineInfo)) {
                nonNullifyProperties.set(propertyName, startLineInfo);
            }
            const callExpression = propertyAccessExpression.replaceWithText(`${propertyAccessExpression.getText()}()`);
            // this means that this property has been used in an if/ternary condition above
            if (nonNullifyProperties.has(propertyName) &&
                nonNullifyProperties.get(propertyName) !== startLineInfo) {
                callExpression.replaceWithText(`${callExpression.getText()}!`);
            }
        }
    }
}
exports.migrateSignalsInClassOrDecorator = migrateSignalsInClassOrDecorator;
function getStartLineInfo(node) {
    return `${node.getStartLineNumber()}:${node.getStartLinePos()}:${node.getFullStart()}:${node.getFullWidth()}`;
}
exports.getStartLineInfo = getStartLineInfo;
function getAngularCoreImports(sourceFile) {
    return sourceFile.getImportDeclaration((importDecl) => {
        return importDecl.getModuleSpecifierValue() === '@angular/core';
    });
}
exports.getAngularCoreImports = getAngularCoreImports;
//# sourceMappingURL=migrate-signals-in-ts.js.map