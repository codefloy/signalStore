import { ChangeDetectorRef, type Injector, type Type } from '@angular/core';
import type { EventTypes, GestureKey, Handler, UserGestureConfig } from '@use-gesture/vanilla';
import type { Recognizer } from '@use-gesture/vanilla/dist/declarations/src/Recognizer';
type InjectGestureFn<TGestureKey extends GestureKey, TGestureHandler extends Handler<TGestureKey, EventTypes[TGestureKey]>, TGestureConfig extends UserGestureConfig[TGestureKey]> = {
    (handler: (state: Parameters<TGestureHandler>[0] & {
        cdr: ChangeDetectorRef;
    }) => ReturnType<TGestureHandler>, options?: {
        injector?: Injector;
        zoneless?: boolean;
        config?: () => TGestureConfig;
    }): void;
};
export type GestureInfer<TInjectGesture extends (...args: any[]) => void> = TInjectGesture extends InjectGestureFn<infer _GestureKey, infer _GestureHandler, infer GestureConfig> ? {
    key: _GestureKey;
    handler: _GestureHandler;
    handlerParameters: Parameters<TInjectGesture>[0];
    state: Parameters<Parameters<TInjectGesture>[0]>[0];
    config: GestureConfig;
} : never;
export declare function createGesture<TGestureKey extends GestureKey, TRecognizer extends Recognizer<TGestureKey>>(_key: TGestureKey, gesture: Type<TRecognizer>): InjectGestureFn<TGestureKey, Handler<TGestureKey, EventTypes[TGestureKey]>, UserGestureConfig[TGestureKey]>;
export {};
