import { EventEmitter, Injector, type OnInit } from '@angular/core';
import { type GestureInfer } from './gesture';
import * as i0 from "@angular/core";
export declare const injectWheel: (handler: (state: Omit<import("@use-gesture/vanilla").FullGestureState<"wheel">, "event"> & {
    event: WheelEvent;
} & {
    cdr: import("@angular/core").ChangeDetectorRef;
}) => any, options?: {
    injector?: Injector | undefined;
    zoneless?: boolean | undefined;
    config?: (() => import("@use-gesture/vanilla").CoordinatesConfig<"wheel"> | undefined) | undefined;
} | undefined) => void;
export type NgxInjectWheel = GestureInfer<typeof injectWheel>;
export declare class NgxWheel implements OnInit {
    private config;
    set _config(config: NgxInjectWheel['config']);
    zoneless?: boolean;
    ngxWheel: EventEmitter<Omit<import("@use-gesture/vanilla").FullGestureState<"wheel">, "event"> & {
        event: WheelEvent;
    } & {
        cdr: import("@angular/core").ChangeDetectorRef;
    }>;
    private injector;
    ngOnInit(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgxWheel, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<NgxWheel, "[ngxWheel]", never, { "_config": { "alias": "ngxWheelConfig"; "required": false; }; "zoneless": { "alias": "ngxWheelZoneless"; "required": false; }; }, { "ngxWheel": "ngxWheel"; }, never, never, true, never>;
}
