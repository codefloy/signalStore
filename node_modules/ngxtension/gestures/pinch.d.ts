import { EventEmitter, Injector, type OnInit } from '@angular/core';
import { type GestureInfer } from './gesture';
import * as i0 from "@angular/core";
export declare const injectPinch: (handler: (state: Omit<import("@use-gesture/vanilla").FullGestureState<"pinch">, "event"> & {
    event: PointerEvent | TouchEvent | WheelEvent | import("@use-gesture/vanilla").WebKitGestureEvent;
} & {
    cdr: import("@angular/core").ChangeDetectorRef;
}) => any, options?: {
    injector?: Injector | undefined;
    zoneless?: boolean | undefined;
    config?: (() => import("@use-gesture/vanilla").PinchConfig | undefined) | undefined;
} | undefined) => void;
export type NgxInjectPinch = GestureInfer<typeof injectPinch>;
export declare class NgxPinch implements OnInit {
    private config;
    set _config(config: NgxInjectPinch['config']);
    zoneless?: boolean;
    ngxPinch: EventEmitter<Omit<import("@use-gesture/vanilla").FullGestureState<"pinch">, "event"> & {
        event: PointerEvent | TouchEvent | WheelEvent | import("@use-gesture/vanilla").WebKitGestureEvent;
    } & {
        cdr: import("@angular/core").ChangeDetectorRef;
    }>;
    private injector;
    ngOnInit(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgxPinch, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<NgxPinch, "[ngxPinch]", never, { "_config": { "alias": "ngxPinchConfig"; "required": false; }; "zoneless": { "alias": "ngxPinchZoneless"; "required": false; }; }, { "ngxPinch": "ngxPinch"; }, never, never, true, never>;
}
