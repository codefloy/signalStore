import { EventEmitter, Injector, type OnInit } from '@angular/core';
import { type GestureInfer } from './gesture';
import * as i0 from "@angular/core";
export declare const injectHover: (handler: (state: Omit<import("@use-gesture/vanilla").FullGestureState<"hover">, "event"> & {
    event: PointerEvent;
} & {
    cdr: import("@angular/core").ChangeDetectorRef;
}) => any, options?: {
    injector?: Injector | undefined;
    zoneless?: boolean | undefined;
    config?: (() => ({
        enabled?: boolean | undefined;
    } & {
        mouseOnly?: boolean | undefined;
    }) | undefined) | undefined;
} | undefined) => void;
export type NgxInjectHover = GestureInfer<typeof injectHover>;
export declare class NgxHover implements OnInit {
    private config;
    set _config(config: NgxInjectHover['config']);
    zoneless?: boolean;
    ngxHover: EventEmitter<Omit<import("@use-gesture/vanilla").FullGestureState<"hover">, "event"> & {
        event: PointerEvent;
    } & {
        cdr: import("@angular/core").ChangeDetectorRef;
    }>;
    private injector;
    ngOnInit(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgxHover, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<NgxHover, "[ngxHover]", never, { "_config": { "alias": "ngxHoverConfig"; "required": false; }; "zoneless": { "alias": "ngxHoverZoneless"; "required": false; }; }, { "ngxHover": "ngxHover"; }, never, never, true, never>;
}
