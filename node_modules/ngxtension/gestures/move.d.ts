import { EventEmitter, Injector, type OnInit } from '@angular/core';
import { type GestureInfer } from './gesture';
import * as i0 from "@angular/core";
export declare const injectMove: (handler: (state: Omit<import("@use-gesture/vanilla").FullGestureState<"move">, "event"> & {
    event: PointerEvent;
} & {
    cdr: import("@angular/core").ChangeDetectorRef;
}) => any, options?: {
    injector?: Injector | undefined;
    zoneless?: boolean | undefined;
    config?: (() => import("@use-gesture/vanilla").MoveConfig | undefined) | undefined;
} | undefined) => void;
export type NgxInjectMove = GestureInfer<typeof injectMove>;
export declare class NgxMove implements OnInit {
    private config;
    set _config(config: NgxInjectMove['config']);
    zoneless?: boolean;
    ngxMove: EventEmitter<Omit<import("@use-gesture/vanilla").FullGestureState<"move">, "event"> & {
        event: PointerEvent;
    } & {
        cdr: import("@angular/core").ChangeDetectorRef;
    }>;
    private injector;
    ngOnInit(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgxMove, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<NgxMove, "[ngxMove]", never, { "_config": { "alias": "ngxMoveConfig"; "required": false; }; "zoneless": { "alias": "ngxMoveZoneless"; "required": false; }; }, { "ngxMove": "ngxMove"; }, never, never, true, never>;
}
