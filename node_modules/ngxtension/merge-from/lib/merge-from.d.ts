import { Injector, type Signal } from '@angular/core';
import { type ObservableInput, type OperatorFunction } from 'rxjs';
export type ObservableSignalInput<T> = ObservableInput<T> | Signal<T>;
/**
 * So that we can have `fn([Observable<A>, Signal<B>]): Observable<[A, B]>`
 */
type ObservableSignalInputTuple<T> = {
    [K in keyof T]: ObservableSignalInput<T[K]>;
};
export type MergeFromOptions<T> = {
    readonly injector?: Injector;
    readonly initialValue?: T | null;
};
export declare function mergeFrom<Inputs extends readonly unknown[], Output = Inputs[number]>(inputs: readonly [...ObservableSignalInputTuple<Inputs>], operator?: OperatorFunction<Inputs[number], Output>, options?: MergeFromOptions<Output>): Signal<Output>;
export declare function mergeFrom<Inputs extends readonly unknown[], Output = Inputs[number]>(inputs: readonly [...ObservableSignalInputTuple<Inputs>], options?: MergeFromOptions<Output>): Signal<Output>;
export {};
