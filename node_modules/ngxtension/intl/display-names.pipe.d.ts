import { type PipeTransform, type Provider } from '@angular/core';
import * as i0 from "@angular/core";
type DisplayNamesOptions = Omit<Intl.DisplayNamesOptions, 'type'>;
/**
 * Provides a way to inject the options for the DisplayNamesPipe.
 *
 * @param options The options to use for the DisplayNamesPipe.
 * @returns The provider for the DisplayNamesPipe.
 */
export declare function provideDisplayNamesOptions(options: Partial<DisplayNamesOptions>): Provider;
/**
 * This pipe is a wrapper around the [Intl.DisplayNames](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames) API.
 *
 * @returns The display name of the code or the code as it is in case of errors.
 */
export declare class DisplayNamesPipe implements PipeTransform {
    readonly defaultOptions: DisplayNamesOptions;
    readonly locale: string;
    /**
     * Displays the name of the given code in the given locale.
     *
     * @param code The code to transform.
     * @param type DisplayNamesType to use.
     * @param style Optional. The formatting style to use. Defaults to "short".
     * @param locale Optional. The locale to use for the transformation. Defaults to LOCALE_ID.
     * @returns The name of the given code in the given locale or the code itself if the name could not be found.
     */
    transform(code: string, type: Intl.DisplayNamesType, style?: Intl.DisplayNamesOptions['style'], locale?: string | string[]): ReturnType<Intl.DisplayNames['of']>;
    static ɵfac: i0.ɵɵFactoryDeclaration<DisplayNamesPipe, never>;
    static ɵpipe: i0.ɵɵPipeDeclaration<DisplayNamesPipe, "displayNames", true>;
}
export {};
