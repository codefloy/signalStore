import { Injector, Type, type ProviderToken } from '@angular/core';
import type { Observable } from 'rxjs';
import * as i0 from "@angular/core";
/**
 * Lazy import type that includes default and normal imports
 */
export type LazyImportLoaderFn<T> = () => Promise<ProviderToken<T>> | Promise<{
    default: ProviderToken<T>;
}>;
export declare class InjectLazyImpl<T> {
    private overrides;
    override<T>(type: Type<T>, mock: Type<unknown>): void;
    get(injector: Injector, loader: LazyImportLoaderFn<T>): Observable<T>;
    static ɵfac: i0.ɵɵFactoryDeclaration<InjectLazyImpl<any>, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<InjectLazyImpl<any>>;
}
/**
 * Helper function to mock the lazy-loaded module in `injectAsync`
 *
 * @usage
 * TestBed.configureTestingModule({
 *   providers: [
 *     mockLazyProvider(SandboxService, fakeSandboxService)
 *   ]
 * });
 */
export declare function mockLazyProvider<T>(type: Type<T>, mock: Type<unknown>): {
    provide: import("@angular/core").InjectionToken<readonly (() => void)[]>;
    multi: boolean;
    useValue: () => void;
}[];
