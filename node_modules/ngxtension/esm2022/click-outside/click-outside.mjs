import { DOCUMENT } from '@angular/common';
import { Directive, ElementRef, EventEmitter, inject, NgZone, Output, } from '@angular/core';
import { createInjectionToken } from 'ngxtension/create-injection-token';
import { injectDestroy } from 'ngxtension/inject-destroy';
import { filter, fromEvent, Subject, takeUntil } from 'rxjs';
import * as i0 from "@angular/core";
/*
 * This function is used to detect clicks in the document.
 * It is used by the clickOutside directive.
 */
const [injectDocumentClick] = createInjectionToken(() => {
    const click$ = new Subject();
    const [ngZone, document] = [inject(NgZone), inject(DOCUMENT)];
    ngZone.runOutsideAngular(() => {
        fromEvent(document, 'click').subscribe(click$);
    });
    return click$;
});
/*
 * This directive is used to detect clicks outside the element.
 *
 * Example:
 * <div (clickOutside)="close()"></div>
 *
 */
export class ClickOutside {
    constructor() {
        this.ngZone = inject(NgZone);
        this.elementRef = inject(ElementRef);
        this.documentClick$ = injectDocumentClick();
        this.destroy$ = injectDestroy();
        /*
         * This event is emitted when a click occurs outside the element.
         */
        this.clickOutside = new EventEmitter();
    }
    ngOnInit() {
        this.documentClick$
            .pipe(takeUntil(this.destroy$), filter((event) => !this.elementRef.nativeElement.contains(event.target)))
            .subscribe((event) => {
            this.ngZone.run(() => this.clickOutside.emit(event));
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: ClickOutside, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.0.3", type: ClickOutside, isStandalone: true, selector: "[clickOutside]", outputs: { clickOutside: "clickOutside" }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: ClickOutside, decorators: [{
            type: Directive,
            args: [{ selector: '[clickOutside]', standalone: true }]
        }], propDecorators: { clickOutside: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpY2stb3V0c2lkZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2xpYnMvbmd4dGVuc2lvbi9jbGljay1vdXRzaWRlL3NyYy9jbGljay1vdXRzaWRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUUzQyxPQUFPLEVBQ04sU0FBUyxFQUNULFVBQVUsRUFDVixZQUFZLEVBQ1osTUFBTSxFQUNOLE1BQU0sRUFDTixNQUFNLEdBQ04sTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDekUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQzFELE9BQU8sRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxNQUFNLENBQUM7O0FBRTdEOzs7R0FHRztBQUNILE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLG9CQUFvQixDQUFDLEdBQUcsRUFBRTtJQUN2RCxNQUFNLE1BQU0sR0FBRyxJQUFJLE9BQU8sRUFBUyxDQUFDO0lBQ3BDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFFOUQsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtRQUM3QixTQUFTLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNoRCxDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8sTUFBTSxDQUFDO0FBQ2YsQ0FBQyxDQUFDLENBQUM7QUFFSDs7Ozs7O0dBTUc7QUFFSCxNQUFNLE9BQU8sWUFBWTtJQUR6QjtRQUVTLFdBQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDeEIsZUFBVSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNoQyxtQkFBYyxHQUFHLG1CQUFtQixFQUFFLENBQUM7UUFFdkMsYUFBUSxHQUFHLGFBQWEsRUFBRSxDQUFDO1FBRW5DOztXQUVHO1FBQ08saUJBQVksR0FBRyxJQUFJLFlBQVksRUFBUyxDQUFDO0tBZ0JuRDtJQWRBLFFBQVE7UUFDUCxJQUFJLENBQUMsY0FBYzthQUNqQixJQUFJLENBQ0osU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFDeEIsTUFBTSxDQUNMLENBQUMsS0FBWSxFQUFFLEVBQUUsQ0FDaEIsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUN0RCxDQUNEO2FBRUEsU0FBUyxDQUFDLENBQUMsS0FBWSxFQUFFLEVBQUU7WUFDM0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUN0RCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7OEdBekJXLFlBQVk7a0dBQVosWUFBWTs7MkZBQVosWUFBWTtrQkFEeEIsU0FBUzttQkFBQyxFQUFFLFFBQVEsRUFBRSxnQkFBZ0IsRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFOzhCQVdoRCxZQUFZO3NCQUFyQixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHR5cGUgeyBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG5cdERpcmVjdGl2ZSxcblx0RWxlbWVudFJlZixcblx0RXZlbnRFbWl0dGVyLFxuXHRpbmplY3QsXG5cdE5nWm9uZSxcblx0T3V0cHV0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGNyZWF0ZUluamVjdGlvblRva2VuIH0gZnJvbSAnbmd4dGVuc2lvbi9jcmVhdGUtaW5qZWN0aW9uLXRva2VuJztcbmltcG9ydCB7IGluamVjdERlc3Ryb3kgfSBmcm9tICduZ3h0ZW5zaW9uL2luamVjdC1kZXN0cm95JztcbmltcG9ydCB7IGZpbHRlciwgZnJvbUV2ZW50LCBTdWJqZWN0LCB0YWtlVW50aWwgfSBmcm9tICdyeGpzJztcblxuLypcbiAqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCB0byBkZXRlY3QgY2xpY2tzIGluIHRoZSBkb2N1bWVudC5cbiAqIEl0IGlzIHVzZWQgYnkgdGhlIGNsaWNrT3V0c2lkZSBkaXJlY3RpdmUuXG4gKi9cbmNvbnN0IFtpbmplY3REb2N1bWVudENsaWNrXSA9IGNyZWF0ZUluamVjdGlvblRva2VuKCgpID0+IHtcblx0Y29uc3QgY2xpY2skID0gbmV3IFN1YmplY3Q8RXZlbnQ+KCk7XG5cdGNvbnN0IFtuZ1pvbmUsIGRvY3VtZW50XSA9IFtpbmplY3QoTmdab25lKSwgaW5qZWN0KERPQ1VNRU5UKV07XG5cblx0bmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcblx0XHRmcm9tRXZlbnQoZG9jdW1lbnQsICdjbGljaycpLnN1YnNjcmliZShjbGljayQpO1xuXHR9KTtcblxuXHRyZXR1cm4gY2xpY2skO1xufSk7XG5cbi8qXG4gKiBUaGlzIGRpcmVjdGl2ZSBpcyB1c2VkIHRvIGRldGVjdCBjbGlja3Mgb3V0c2lkZSB0aGUgZWxlbWVudC5cbiAqXG4gKiBFeGFtcGxlOlxuICogPGRpdiAoY2xpY2tPdXRzaWRlKT1cImNsb3NlKClcIj48L2Rpdj5cbiAqXG4gKi9cbkBEaXJlY3RpdmUoeyBzZWxlY3RvcjogJ1tjbGlja091dHNpZGVdJywgc3RhbmRhbG9uZTogdHJ1ZSB9KVxuZXhwb3J0IGNsYXNzIENsaWNrT3V0c2lkZSBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cdHByaXZhdGUgbmdab25lID0gaW5qZWN0KE5nWm9uZSk7XG5cdHByaXZhdGUgZWxlbWVudFJlZiA9IGluamVjdChFbGVtZW50UmVmKTtcblx0cHJpdmF0ZSBkb2N1bWVudENsaWNrJCA9IGluamVjdERvY3VtZW50Q2xpY2soKTtcblxuXHRwcml2YXRlIGRlc3Ryb3kkID0gaW5qZWN0RGVzdHJveSgpO1xuXG5cdC8qXG5cdCAqIFRoaXMgZXZlbnQgaXMgZW1pdHRlZCB3aGVuIGEgY2xpY2sgb2NjdXJzIG91dHNpZGUgdGhlIGVsZW1lbnQuXG5cdCAqL1xuXHRAT3V0cHV0KCkgY2xpY2tPdXRzaWRlID0gbmV3IEV2ZW50RW1pdHRlcjxFdmVudD4oKTtcblxuXHRuZ09uSW5pdCgpIHtcblx0XHR0aGlzLmRvY3VtZW50Q2xpY2skXG5cdFx0XHQucGlwZShcblx0XHRcdFx0dGFrZVVudGlsKHRoaXMuZGVzdHJveSQpLFxuXHRcdFx0XHRmaWx0ZXIoXG5cdFx0XHRcdFx0KGV2ZW50OiBFdmVudCkgPT5cblx0XHRcdFx0XHRcdCF0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5jb250YWlucyhldmVudC50YXJnZXQpLFxuXHRcdFx0XHQpLFxuXHRcdFx0KVxuXG5cdFx0XHQuc3Vic2NyaWJlKChldmVudDogRXZlbnQpID0+IHtcblx0XHRcdFx0dGhpcy5uZ1pvbmUucnVuKCgpID0+IHRoaXMuY2xpY2tPdXRzaWRlLmVtaXQoZXZlbnQpKTtcblx0XHRcdH0pO1xuXHR9XG59XG4iXX0=