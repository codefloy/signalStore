import { isSignal, untracked } from '@angular/core';
import { toObservable, toSignal } from '@angular/core/rxjs-interop';
import { assertInjector } from 'ngxtension/assert-injector';
import { distinctUntilChanged, from, identity, isObservable, merge, startWith, } from 'rxjs';
export function mergeFrom(...args) {
    const [sources, operator = identity, options = {}] = parseArgs(args);
    const normalizedSources = sources.map((source) => {
        if (isSignal(source)) {
            return toObservable(source, { injector: options.injector }).pipe(startWith(untracked(source)));
        }
        if (!isObservable(source)) {
            source = from(source);
        }
        return source.pipe(distinctUntilChanged());
    });
    const merged = merge(...normalizedSources).pipe(operator);
    return assertInjector(mergeFrom, options.injector, () => {
        if (options.initialValue !== undefined) {
            return toSignal(merged, { initialValue: options.initialValue });
        }
        return toSignal(merged, { requireSync: true });
    });
}
function parseArgs(args) {
    if (args.length === 0) {
        throw new Error(`[ngxtension] mergeFrom: Expected at least one argument, got none.`);
    }
    if (args.length === 1) {
        return [
            args[0],
            undefined,
            undefined,
        ];
    }
    if (args.length === 2) {
        const isOperator = typeof args[1] === 'function';
        if (isOperator) {
            return [
                args[0],
                args[1],
                undefined,
            ];
        }
        return [
            args[0],
            undefined,
            args[1],
        ];
    }
    return args;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVyZ2UtZnJvbS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvbmd4dGVuc2lvbi9tZXJnZS1mcm9tL3NyYy9saWIvbWVyZ2UtZnJvbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQVksUUFBUSxFQUFFLFNBQVMsRUFBZSxNQUFNLGVBQWUsQ0FBQztBQUMzRSxPQUFPLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3BFLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUM1RCxPQUFPLEVBQ04sb0JBQW9CLEVBQ3BCLElBQUksRUFDSixRQUFRLEVBQ1IsWUFBWSxFQUNaLEtBQUssRUFDTCxTQUFTLEdBR1QsTUFBTSxNQUFNLENBQUM7QUFnQ2QsTUFBTSxVQUFVLFNBQVMsQ0FHdkIsR0FBRyxJQUFlO0lBQ25CLE1BQU0sQ0FBQyxPQUFPLEVBQUUsUUFBUSxHQUFHLFFBQVEsRUFBRSxPQUFPLEdBQUcsRUFBRSxDQUFDLEdBQUcsU0FBUyxDQUc1RCxJQUFJLENBQUMsQ0FBQztJQUNSLE1BQU0saUJBQWlCLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFO1FBQ2hELElBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7WUFDdEIsT0FBTyxZQUFZLENBQUMsTUFBTSxFQUFFLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FDL0QsU0FBUyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUM1QixDQUFDO1FBQ0gsQ0FBQztRQUVELElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztZQUMzQixNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3ZCLENBQUM7UUFFRCxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxDQUFDO0lBQzVDLENBQUMsQ0FBQyxDQUFDO0lBRUgsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLEdBQUcsaUJBQWlCLENBQUMsQ0FBQyxJQUFJLENBQzlDLFFBQW9ELENBQ3BELENBQUM7SUFFRixPQUFPLGNBQWMsQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUU7UUFDdkQsSUFBSSxPQUFPLENBQUMsWUFBWSxLQUFLLFNBQVMsRUFBRSxDQUFDO1lBQ3hDLE9BQU8sUUFBUSxDQUFDLE1BQU0sRUFBRSxFQUFFLFlBQVksRUFBRSxPQUFPLENBQUMsWUFBc0IsRUFBRSxDQUFDLENBQUM7UUFDM0UsQ0FBQztRQUNELE9BQU8sUUFBUSxDQUFDLE1BQU0sRUFBRSxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ2hELENBQUMsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUVELFNBQVMsU0FBUyxDQUNqQixJQUFlO0lBRWYsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRSxDQUFDO1FBQ3ZCLE1BQU0sSUFBSSxLQUFLLENBQ2QsbUVBQW1FLENBQ25FLENBQUM7SUFDSCxDQUFDO0lBRUQsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRSxDQUFDO1FBQ3ZCLE9BQU87WUFDTixJQUFJLENBQUMsQ0FBQyxDQUFxRDtZQUMzRCxTQUFTO1lBQ1QsU0FBUztTQUNBLENBQUM7SUFDWixDQUFDO0lBRUQsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRSxDQUFDO1FBQ3ZCLE1BQU0sVUFBVSxHQUFHLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFVBQVUsQ0FBQztRQUNqRCxJQUFJLFVBQVUsRUFBRSxDQUFDO1lBQ2hCLE9BQU87Z0JBQ04sSUFBSSxDQUFDLENBQUMsQ0FBcUQ7Z0JBQzNELElBQUksQ0FBQyxDQUFDLENBQTZDO2dCQUNuRCxTQUFTO2FBQ0EsQ0FBQztRQUNaLENBQUM7UUFFRCxPQUFPO1lBQ04sSUFBSSxDQUFDLENBQUMsQ0FBcUQ7WUFDM0QsU0FBUztZQUNULElBQUksQ0FBQyxDQUFDLENBQTZCO1NBQzFCLENBQUM7SUFDWixDQUFDO0lBRUQsT0FBTyxJQUlOLENBQUM7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0b3IsIGlzU2lnbmFsLCB1bnRyYWNrZWQsIHR5cGUgU2lnbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyB0b09ic2VydmFibGUsIHRvU2lnbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZS9yeGpzLWludGVyb3AnO1xuaW1wb3J0IHsgYXNzZXJ0SW5qZWN0b3IgfSBmcm9tICduZ3h0ZW5zaW9uL2Fzc2VydC1pbmplY3Rvcic7XG5pbXBvcnQge1xuXHRkaXN0aW5jdFVudGlsQ2hhbmdlZCxcblx0ZnJvbSxcblx0aWRlbnRpdHksXG5cdGlzT2JzZXJ2YWJsZSxcblx0bWVyZ2UsXG5cdHN0YXJ0V2l0aCxcblx0dHlwZSBPYnNlcnZhYmxlSW5wdXQsXG5cdHR5cGUgT3BlcmF0b3JGdW5jdGlvbixcbn0gZnJvbSAncnhqcyc7XG5cbmV4cG9ydCB0eXBlIE9ic2VydmFibGVTaWduYWxJbnB1dDxUPiA9IE9ic2VydmFibGVJbnB1dDxUPiB8IFNpZ25hbDxUPjtcblxuLyoqXG4gKiBTbyB0aGF0IHdlIGNhbiBoYXZlIGBmbihbT2JzZXJ2YWJsZTxBPiwgU2lnbmFsPEI+XSk6IE9ic2VydmFibGU8W0EsIEJdPmBcbiAqL1xudHlwZSBPYnNlcnZhYmxlU2lnbmFsSW5wdXRUdXBsZTxUPiA9IHtcblx0W0sgaW4ga2V5b2YgVF06IE9ic2VydmFibGVTaWduYWxJbnB1dDxUW0tdPjtcbn07XG5cbmV4cG9ydCB0eXBlIE1lcmdlRnJvbU9wdGlvbnM8VD4gPSB7XG5cdHJlYWRvbmx5IGluamVjdG9yPzogSW5qZWN0b3I7XG5cdHJlYWRvbmx5IGluaXRpYWxWYWx1ZT86IFQgfCBudWxsO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlRnJvbTxcblx0SW5wdXRzIGV4dGVuZHMgcmVhZG9ubHkgdW5rbm93bltdLFxuXHRPdXRwdXQgPSBJbnB1dHNbbnVtYmVyXSxcbj4oXG5cdGlucHV0czogcmVhZG9ubHkgWy4uLk9ic2VydmFibGVTaWduYWxJbnB1dFR1cGxlPElucHV0cz5dLFxuXHRvcGVyYXRvcj86IE9wZXJhdG9yRnVuY3Rpb248SW5wdXRzW251bWJlcl0sIE91dHB1dD4sXG5cdG9wdGlvbnM/OiBNZXJnZUZyb21PcHRpb25zPE91dHB1dD4sXG4pOiBTaWduYWw8T3V0cHV0PjtcbmV4cG9ydCBmdW5jdGlvbiBtZXJnZUZyb208XG5cdElucHV0cyBleHRlbmRzIHJlYWRvbmx5IHVua25vd25bXSxcblx0T3V0cHV0ID0gSW5wdXRzW251bWJlcl0sXG4+KFxuXHRpbnB1dHM6IHJlYWRvbmx5IFsuLi5PYnNlcnZhYmxlU2lnbmFsSW5wdXRUdXBsZTxJbnB1dHM+XSxcblx0b3B0aW9ucz86IE1lcmdlRnJvbU9wdGlvbnM8T3V0cHV0Pixcbik6IFNpZ25hbDxPdXRwdXQ+O1xuXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VGcm9tPFxuXHRJbnB1dHMgZXh0ZW5kcyByZWFkb25seSB1bmtub3duW10sXG5cdE91dHB1dCA9IElucHV0c1tudW1iZXJdLFxuPiguLi5hcmdzOiB1bmtub3duW10pIHtcblx0Y29uc3QgW3NvdXJjZXMsIG9wZXJhdG9yID0gaWRlbnRpdHksIG9wdGlvbnMgPSB7fV0gPSBwYXJzZUFyZ3M8XG5cdFx0SW5wdXRzLFxuXHRcdE91dHB1dFxuXHQ+KGFyZ3MpO1xuXHRjb25zdCBub3JtYWxpemVkU291cmNlcyA9IHNvdXJjZXMubWFwKChzb3VyY2UpID0+IHtcblx0XHRpZiAoaXNTaWduYWwoc291cmNlKSkge1xuXHRcdFx0cmV0dXJuIHRvT2JzZXJ2YWJsZShzb3VyY2UsIHsgaW5qZWN0b3I6IG9wdGlvbnMuaW5qZWN0b3IgfSkucGlwZShcblx0XHRcdFx0c3RhcnRXaXRoKHVudHJhY2tlZChzb3VyY2UpKSxcblx0XHRcdCk7XG5cdFx0fVxuXG5cdFx0aWYgKCFpc09ic2VydmFibGUoc291cmNlKSkge1xuXHRcdFx0c291cmNlID0gZnJvbShzb3VyY2UpO1xuXHRcdH1cblxuXHRcdHJldHVybiBzb3VyY2UucGlwZShkaXN0aW5jdFVudGlsQ2hhbmdlZCgpKTtcblx0fSk7XG5cblx0Y29uc3QgbWVyZ2VkID0gbWVyZ2UoLi4ubm9ybWFsaXplZFNvdXJjZXMpLnBpcGUoXG5cdFx0b3BlcmF0b3IgYXMgT3BlcmF0b3JGdW5jdGlvbjxJbnB1dHNbbnVtYmVyXSwgT3V0cHV0Pixcblx0KTtcblxuXHRyZXR1cm4gYXNzZXJ0SW5qZWN0b3IobWVyZ2VGcm9tLCBvcHRpb25zLmluamVjdG9yLCAoKSA9PiB7XG5cdFx0aWYgKG9wdGlvbnMuaW5pdGlhbFZhbHVlICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdHJldHVybiB0b1NpZ25hbChtZXJnZWQsIHsgaW5pdGlhbFZhbHVlOiBvcHRpb25zLmluaXRpYWxWYWx1ZSBhcyBPdXRwdXQgfSk7XG5cdFx0fVxuXHRcdHJldHVybiB0b1NpZ25hbChtZXJnZWQsIHsgcmVxdWlyZVN5bmM6IHRydWUgfSk7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBwYXJzZUFyZ3M8SW5wdXRzIGV4dGVuZHMgcmVhZG9ubHkgdW5rbm93bltdLCBPdXRwdXQgPSBJbnB1dHNbbnVtYmVyXT4oXG5cdGFyZ3M6IHVua25vd25bXSxcbikge1xuXHRpZiAoYXJncy5sZW5ndGggPT09IDApIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXG5cdFx0XHRgW25neHRlbnNpb25dIG1lcmdlRnJvbTogRXhwZWN0ZWQgYXQgbGVhc3Qgb25lIGFyZ3VtZW50LCBnb3Qgbm9uZS5gLFxuXHRcdCk7XG5cdH1cblxuXHRpZiAoYXJncy5sZW5ndGggPT09IDEpIHtcblx0XHRyZXR1cm4gW1xuXHRcdFx0YXJnc1swXSBhcyByZWFkb25seSBbLi4uT2JzZXJ2YWJsZVNpZ25hbElucHV0VHVwbGU8SW5wdXRzPl0sXG5cdFx0XHR1bmRlZmluZWQsXG5cdFx0XHR1bmRlZmluZWQsXG5cdFx0XSBhcyBjb25zdDtcblx0fVxuXG5cdGlmIChhcmdzLmxlbmd0aCA9PT0gMikge1xuXHRcdGNvbnN0IGlzT3BlcmF0b3IgPSB0eXBlb2YgYXJnc1sxXSA9PT0gJ2Z1bmN0aW9uJztcblx0XHRpZiAoaXNPcGVyYXRvcikge1xuXHRcdFx0cmV0dXJuIFtcblx0XHRcdFx0YXJnc1swXSBhcyByZWFkb25seSBbLi4uT2JzZXJ2YWJsZVNpZ25hbElucHV0VHVwbGU8SW5wdXRzPl0sXG5cdFx0XHRcdGFyZ3NbMV0gYXMgT3BlcmF0b3JGdW5jdGlvbjxJbnB1dHNbbnVtYmVyXSwgT3V0cHV0Pixcblx0XHRcdFx0dW5kZWZpbmVkLFxuXHRcdFx0XSBhcyBjb25zdDtcblx0XHR9XG5cblx0XHRyZXR1cm4gW1xuXHRcdFx0YXJnc1swXSBhcyByZWFkb25seSBbLi4uT2JzZXJ2YWJsZVNpZ25hbElucHV0VHVwbGU8SW5wdXRzPl0sXG5cdFx0XHR1bmRlZmluZWQsXG5cdFx0XHRhcmdzWzFdIGFzIE1lcmdlRnJvbU9wdGlvbnM8T3V0cHV0Pixcblx0XHRdIGFzIGNvbnN0O1xuXHR9XG5cblx0cmV0dXJuIGFyZ3MgYXMgdW5rbm93biBhcyBbXG5cdFx0cmVhZG9ubHkgWy4uLk9ic2VydmFibGVTaWduYWxJbnB1dFR1cGxlPElucHV0cz5dLFxuXHRcdE9wZXJhdG9yRnVuY3Rpb248SW5wdXRzW251bWJlcl0sIE91dHB1dD4sXG5cdFx0TWVyZ2VGcm9tT3B0aW9uczxPdXRwdXQ+LFxuXHRdO1xufVxuIl19