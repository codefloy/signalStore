import { computed, untracked } from '@angular/core';
/**
 * Returns a signal that emits the previous value of the given signal.
 * The first time the signal is emitted, the previous value will be the same as the current value.
 *
 * @example
 * ```ts
 * const value = signal(0);
 * const previous = computedPrevious(value);
 *
 * effect(() => {
 *  console.log('Current value:', value());
 *  console.log('Previous value:', previous());
 * });
 *
 * Logs:
 * // Current value: 0
 * // Previous value: 0
 *
 * value.set(1);
 *
 * Logs:
 * // Current value: 1
 * // Previous value: 0
 *
 * value.set(2);
 *
 * Logs:
 * // Current value: 2
 * // Previous value: 1
 *```
 *
 * @param s Signal to compute previous value for
 * @returns Signal that emits previous value of `s`
 */
export function computedPrevious(s) {
    let current = null;
    let previous = untracked(() => s()); // initial value is the current value
    return computed(() => {
        current = s();
        const result = previous;
        previous = current;
        return result;
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcHV0ZWQtcHJldmlvdXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL25neHRlbnNpb24vY29tcHV0ZWQtcHJldmlvdXMvc3JjL2NvbXB1dGVkLXByZXZpb3VzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFlLE1BQU0sZUFBZSxDQUFDO0FBRWpFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FpQ0c7QUFDSCxNQUFNLFVBQVUsZ0JBQWdCLENBQUksQ0FBWTtJQUMvQyxJQUFJLE9BQU8sR0FBRyxJQUFTLENBQUM7SUFDeEIsSUFBSSxRQUFRLEdBQUcsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxxQ0FBcUM7SUFFMUUsT0FBTyxRQUFRLENBQUMsR0FBRyxFQUFFO1FBQ3BCLE9BQU8sR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUNkLE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQztRQUN4QixRQUFRLEdBQUcsT0FBTyxDQUFDO1FBQ25CLE9BQU8sTUFBTSxDQUFDO0lBQ2YsQ0FBQyxDQUFDLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29tcHV0ZWQsIHVudHJhY2tlZCwgdHlwZSBTaWduYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiBSZXR1cm5zIGEgc2lnbmFsIHRoYXQgZW1pdHMgdGhlIHByZXZpb3VzIHZhbHVlIG9mIHRoZSBnaXZlbiBzaWduYWwuXG4gKiBUaGUgZmlyc3QgdGltZSB0aGUgc2lnbmFsIGlzIGVtaXR0ZWQsIHRoZSBwcmV2aW91cyB2YWx1ZSB3aWxsIGJlIHRoZSBzYW1lIGFzIHRoZSBjdXJyZW50IHZhbHVlLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0c1xuICogY29uc3QgdmFsdWUgPSBzaWduYWwoMCk7XG4gKiBjb25zdCBwcmV2aW91cyA9IGNvbXB1dGVkUHJldmlvdXModmFsdWUpO1xuICpcbiAqIGVmZmVjdCgoKSA9PiB7XG4gKiAgY29uc29sZS5sb2coJ0N1cnJlbnQgdmFsdWU6JywgdmFsdWUoKSk7XG4gKiAgY29uc29sZS5sb2coJ1ByZXZpb3VzIHZhbHVlOicsIHByZXZpb3VzKCkpO1xuICogfSk7XG4gKlxuICogTG9nczpcbiAqIC8vIEN1cnJlbnQgdmFsdWU6IDBcbiAqIC8vIFByZXZpb3VzIHZhbHVlOiAwXG4gKlxuICogdmFsdWUuc2V0KDEpO1xuICpcbiAqIExvZ3M6XG4gKiAvLyBDdXJyZW50IHZhbHVlOiAxXG4gKiAvLyBQcmV2aW91cyB2YWx1ZTogMFxuICpcbiAqIHZhbHVlLnNldCgyKTtcbiAqXG4gKiBMb2dzOlxuICogLy8gQ3VycmVudCB2YWx1ZTogMlxuICogLy8gUHJldmlvdXMgdmFsdWU6IDFcbiAqYGBgXG4gKlxuICogQHBhcmFtIHMgU2lnbmFsIHRvIGNvbXB1dGUgcHJldmlvdXMgdmFsdWUgZm9yXG4gKiBAcmV0dXJucyBTaWduYWwgdGhhdCBlbWl0cyBwcmV2aW91cyB2YWx1ZSBvZiBgc2BcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVkUHJldmlvdXM8VD4oczogU2lnbmFsPFQ+KTogU2lnbmFsPFQ+IHtcblx0bGV0IGN1cnJlbnQgPSBudWxsIGFzIFQ7XG5cdGxldCBwcmV2aW91cyA9IHVudHJhY2tlZCgoKSA9PiBzKCkpOyAvLyBpbml0aWFsIHZhbHVlIGlzIHRoZSBjdXJyZW50IHZhbHVlXG5cblx0cmV0dXJuIGNvbXB1dGVkKCgpID0+IHtcblx0XHRjdXJyZW50ID0gcygpO1xuXHRcdGNvbnN0IHJlc3VsdCA9IHByZXZpb3VzO1xuXHRcdHByZXZpb3VzID0gY3VycmVudDtcblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9KTtcbn1cbiJdfQ==