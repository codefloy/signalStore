import { effect, runInInjectionContext, untracked, } from '@angular/core';
import { assertInjector } from 'ngxtension/assert-injector';
export function effectOnceIf(condition, execution, options) {
    const assertedInjector = assertInjector(effectOnceIf, options?.injector);
    return runInInjectionContext(assertedInjector, () => {
        const effectRef = effect((onCleanup) => {
            const hasCondition = condition();
            if (hasCondition) {
                untracked(() => execution(hasCondition, onCleanup));
                effectRef.destroy();
            }
        }, options);
        return effectRef;
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWZmZWN0LW9uY2UtaWYuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL25neHRlbnNpb24vZWZmZWN0LW9uY2UtaWYvc3JjL2VmZmVjdC1vbmNlLWlmLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFFTixNQUFNLEVBR04scUJBQXFCLEVBQ3JCLFNBQVMsR0FDVCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFNUQsTUFBTSxVQUFVLFlBQVksQ0FDM0IsU0FBa0IsRUFDbEIsU0FHUyxFQUNULE9BQTBFO0lBRTFFLE1BQU0sZ0JBQWdCLEdBQUcsY0FBYyxDQUFDLFlBQVksRUFBRSxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDekUsT0FBTyxxQkFBcUIsQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLEVBQUU7UUFDbkQsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLENBQUMsU0FBUyxFQUFFLEVBQUU7WUFDdEMsTUFBTSxZQUFZLEdBQUcsU0FBUyxFQUFFLENBQUM7WUFDakMsSUFBSSxZQUFZLEVBQUUsQ0FBQztnQkFDbEIsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxZQUFZLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQztnQkFDcEQsU0FBUyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ3JCLENBQUM7UUFDRixDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDWixPQUFPLFNBQVMsQ0FBQztJQUNsQixDQUFDLENBQUMsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuXHRDcmVhdGVFZmZlY3RPcHRpb25zLFxuXHRlZmZlY3QsXG5cdEVmZmVjdENsZWFudXBSZWdpc3RlckZuLFxuXHRFZmZlY3RSZWYsXG5cdHJ1bkluSW5qZWN0aW9uQ29udGV4dCxcblx0dW50cmFja2VkLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGFzc2VydEluamVjdG9yIH0gZnJvbSAnbmd4dGVuc2lvbi9hc3NlcnQtaW5qZWN0b3InO1xuXG5leHBvcnQgZnVuY3Rpb24gZWZmZWN0T25jZUlmPFQgPSBhbnk+KFxuXHRjb25kaXRpb246ICgpID0+IFQsXG5cdGV4ZWN1dGlvbjogKFxuXHRcdHZhbHVlRnJvbUNvbmRpdGlvbjogTm9uTnVsbGFibGU8VD4sXG5cdFx0b25DbGVhbnVwOiBFZmZlY3RDbGVhbnVwUmVnaXN0ZXJGbixcblx0KSA9PiB2b2lkLFxuXHRvcHRpb25zPzogT21pdDxDcmVhdGVFZmZlY3RPcHRpb25zLCAnYWxsb3dTaWduYWxXcml0ZXMnIHwgJ21hbnVhbENsZWFudXAnPixcbik6IEVmZmVjdFJlZiB7XG5cdGNvbnN0IGFzc2VydGVkSW5qZWN0b3IgPSBhc3NlcnRJbmplY3RvcihlZmZlY3RPbmNlSWYsIG9wdGlvbnM/LmluamVjdG9yKTtcblx0cmV0dXJuIHJ1bkluSW5qZWN0aW9uQ29udGV4dChhc3NlcnRlZEluamVjdG9yLCAoKSA9PiB7XG5cdFx0Y29uc3QgZWZmZWN0UmVmID0gZWZmZWN0KChvbkNsZWFudXApID0+IHtcblx0XHRcdGNvbnN0IGhhc0NvbmRpdGlvbiA9IGNvbmRpdGlvbigpO1xuXHRcdFx0aWYgKGhhc0NvbmRpdGlvbikge1xuXHRcdFx0XHR1bnRyYWNrZWQoKCkgPT4gZXhlY3V0aW9uKGhhc0NvbmRpdGlvbiwgb25DbGVhbnVwKSk7XG5cdFx0XHRcdGVmZmVjdFJlZi5kZXN0cm95KCk7XG5cdFx0XHR9XG5cdFx0fSwgb3B0aW9ucyk7XG5cdFx0cmV0dXJuIGVmZmVjdFJlZjtcblx0fSk7XG59XG5cbmV4cG9ydCB0eXBlIEVmZmVjdE9uY2VJZkNvbmRpdGlvbkZuPFQ+ID0gUGFyYW1ldGVyczx0eXBlb2YgZWZmZWN0T25jZUlmPFQ+PlswXTtcbmV4cG9ydCB0eXBlIEVmZmVjdE9uY2VJZkV4ZWN1dGlvbkZuPFQ+ID0gUGFyYW1ldGVyczx0eXBlb2YgZWZmZWN0T25jZUlmPFQ+PlsxXTtcbmV4cG9ydCB0eXBlIEVmZmVjdE9uY2VJZk9wdGlvbnM8VD4gPSBQYXJhbWV0ZXJzPHR5cGVvZiBlZmZlY3RPbmNlSWY8VD4+WzJdO1xuIl19