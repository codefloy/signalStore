import { Pipe } from '@angular/core';
import * as i0 from "@angular/core";
const error_this = function () {
    throw new Error(`DON'T USE this INSIDE A FUNCTION CALLED BY | call OR | apply IT MUST BE A PURE FUNCTION!`);
};
const NOTHIS = !('Proxy' in window)
    ? Object.seal({})
    : new Proxy({}, {
        get: error_this,
        set: error_this,
        deleteProperty: error_this,
        has: error_this,
    });
export class CallPipe {
    transform(value, args) {
        if (typeof args !== 'function')
            throw new TypeError('You must pass a PURE funciton to | call');
        return args?.call(NOTHIS, value);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: CallPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "18.0.3", ngImport: i0, type: CallPipe, isStandalone: true, name: "call" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: CallPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'call',
                    pure: true,
                    standalone: true,
                }]
        }] });
export class ApplyPipe {
    transform(fn, ...args) {
        if (typeof fn !== 'function')
            throw new TypeError('You must use | apply on a PURE function');
        return fn.apply(NOTHIS, args);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: ApplyPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "18.0.3", ngImport: i0, type: ApplyPipe, isStandalone: true, name: "apply" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: ApplyPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'apply',
                    pure: true,
                    standalone: true,
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsbC1hcHBseS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2xpYnMvbmd4dGVuc2lvbi9jYWxsLWFwcGx5L3NyYy9jYWxsLWFwcGx5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQXNCLE1BQU0sZUFBZSxDQUFDOztBQUV6RCxNQUFNLFVBQVUsR0FBRztJQUNsQixNQUFNLElBQUksS0FBSyxDQUNkLDBGQUEwRixDQUMxRixDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBQ0YsTUFBTSxNQUFNLEdBQUcsQ0FBQyxDQUFDLE9BQU8sSUFBSSxNQUFNLENBQUM7SUFDbEMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO0lBQ2pCLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FDVCxFQUFFLEVBQ0Y7UUFDQyxHQUFHLEVBQUUsVUFBVTtRQUNmLEdBQUcsRUFBRSxVQUFVO1FBQ2YsY0FBYyxFQUFFLFVBQVU7UUFDMUIsR0FBRyxFQUFFLFVBQVU7S0FDZixDQUNELENBQUM7QUFPSixNQUFNLE9BQU8sUUFBUTtJQUNwQixTQUFTLENBQW1CLEtBQVEsRUFBRSxJQUFzQjtRQUMzRCxJQUFJLE9BQU8sSUFBSSxLQUFLLFVBQVU7WUFDN0IsTUFBTSxJQUFJLFNBQVMsQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDO1FBQ2hFLE9BQU8sSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDbEMsQ0FBQzs4R0FMVyxRQUFROzRHQUFSLFFBQVE7OzJGQUFSLFFBQVE7a0JBTHBCLElBQUk7bUJBQUM7b0JBQ0wsSUFBSSxFQUFFLE1BQU07b0JBQ1osSUFBSSxFQUFFLElBQUk7b0JBQ1YsVUFBVSxFQUFFLElBQUk7aUJBQ2hCOztBQWNELE1BQU0sT0FBTyxTQUFTO0lBQ3JCLFNBQVMsQ0FDUixFQUFhLEVBQ2IsR0FBRyxJQUEyQjtRQUU5QixJQUFJLE9BQU8sRUFBRSxLQUFLLFVBQVU7WUFDM0IsTUFBTSxJQUFJLFNBQVMsQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDO1FBQ2hFLE9BQU8sRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDL0IsQ0FBQzs4R0FSVyxTQUFTOzRHQUFULFNBQVM7OzJGQUFULFNBQVM7a0JBTHJCLElBQUk7bUJBQUM7b0JBQ0wsSUFBSSxFQUFFLE9BQU87b0JBQ2IsSUFBSSxFQUFFLElBQUk7b0JBQ1YsVUFBVSxFQUFFLElBQUk7aUJBQ2hCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgdHlwZSBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmNvbnN0IGVycm9yX3RoaXMgPSBmdW5jdGlvbiAoKSB7XG5cdHRocm93IG5ldyBFcnJvcihcblx0XHRgRE9OJ1QgVVNFIHRoaXMgSU5TSURFIEEgRlVOQ1RJT04gQ0FMTEVEIEJZIHwgY2FsbCBPUiB8IGFwcGx5IElUIE1VU1QgQkUgQSBQVVJFIEZVTkNUSU9OIWAsXG5cdCk7XG59O1xuY29uc3QgTk9USElTID0gISgnUHJveHknIGluIHdpbmRvdylcblx0PyBPYmplY3Quc2VhbCh7fSlcblx0OiBuZXcgUHJveHkoXG5cdFx0XHR7fSxcblx0XHRcdHtcblx0XHRcdFx0Z2V0OiBlcnJvcl90aGlzLFxuXHRcdFx0XHRzZXQ6IGVycm9yX3RoaXMsXG5cdFx0XHRcdGRlbGV0ZVByb3BlcnR5OiBlcnJvcl90aGlzLFxuXHRcdFx0XHRoYXM6IGVycm9yX3RoaXMsXG5cdFx0XHR9LFxuXHRcdCk7XG5cbkBQaXBlKHtcblx0bmFtZTogJ2NhbGwnLFxuXHRwdXJlOiB0cnVlLFxuXHRzdGFuZGFsb25lOiB0cnVlLFxufSlcbmV4cG9ydCBjbGFzcyBDYWxsUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuXHR0cmFuc2Zvcm08VCA9IGFueSwgUiA9IGFueT4odmFsdWU6IFQsIGFyZ3M/OiAocGFyYW06IFQpID0+IFIpOiBSIHtcblx0XHRpZiAodHlwZW9mIGFyZ3MgIT09ICdmdW5jdGlvbicpXG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdZb3UgbXVzdCBwYXNzIGEgUFVSRSBmdW5jaXRvbiB0byB8IGNhbGwnKTtcblx0XHRyZXR1cm4gYXJncz8uY2FsbChOT1RISVMsIHZhbHVlKTtcblx0fVxufVxuXG5AUGlwZSh7XG5cdG5hbWU6ICdhcHBseScsXG5cdHB1cmU6IHRydWUsXG5cdHN0YW5kYWxvbmU6IHRydWUsXG59KVxuZXhwb3J0IGNsYXNzIEFwcGx5UGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuXHR0cmFuc2Zvcm08VEZ1bmN0aW9uIGV4dGVuZHMgKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnk+KFxuXHRcdGZuOiBURnVuY3Rpb24sXG5cdFx0Li4uYXJnczogUGFyYW1ldGVyczxURnVuY3Rpb24+XG5cdCk6IFJldHVyblR5cGU8VEZ1bmN0aW9uPiB7XG5cdFx0aWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJylcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ1lvdSBtdXN0IHVzZSB8IGFwcGx5IG9uIGEgUFVSRSBmdW5jdGlvbicpO1xuXHRcdHJldHVybiBmbi5hcHBseShOT1RISVMsIGFyZ3MpO1xuXHR9XG59XG4iXX0=