import { inject } from '@angular/core';
import { toSignal } from '@angular/core/rxjs-interop';
import { ActivatedRoute } from '@angular/router';
import { assertInjector } from 'ngxtension/assert-injector';
import { map } from 'rxjs';
export function injectRouteFragment(options) {
    return assertInjector(injectRouteFragment, options?.injector, () => {
        const route = inject(ActivatedRoute);
        const initialRouteFragment = route.snapshot.fragment;
        const getFragment = (fragment) => {
            if (options?.transform)
                return options.transform(fragment);
            return fragment;
        };
        const fragment$ = route.fragment.pipe(map(getFragment));
        return toSignal(fragment$, {
            initialValue: getFragment(initialRouteFragment),
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5qZWN0LXJvdXRlLWZyYWdtZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbGlicy9uZ3h0ZW5zaW9uL2luamVjdC1yb3V0ZS1mcmFnbWVudC9zcmMvaW5qZWN0LXJvdXRlLWZyYWdtZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQThCLE1BQU0sZUFBZSxDQUFDO0FBQ25FLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDakQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzVELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFrQzNCLE1BQU0sVUFBVSxtQkFBbUIsQ0FDbEMsT0FBdUM7SUFFdkMsT0FBTyxjQUFjLENBQUMsbUJBQW1CLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUU7UUFDbEUsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ3JDLE1BQU0sb0JBQW9CLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUM7UUFDckQsTUFBTSxXQUFXLEdBQUcsQ0FBQyxRQUF1QixFQUFFLEVBQUU7WUFDL0MsSUFBSSxPQUFPLEVBQUUsU0FBUztnQkFBRSxPQUFPLE9BQU8sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDM0QsT0FBTyxRQUFRLENBQUM7UUFDakIsQ0FBQyxDQUFDO1FBQ0YsTUFBTSxTQUFTLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7UUFFeEQsT0FBTyxRQUFRLENBQUMsU0FBUyxFQUFFO1lBQzFCLFlBQVksRUFBRSxXQUFXLENBQUMsb0JBQW9CLENBQUM7U0FDL0MsQ0FBQyxDQUFDO0lBQ0osQ0FBQyxDQUFDLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW5qZWN0LCB0eXBlIEluamVjdG9yLCB0eXBlIFNpZ25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgdG9TaWduYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlL3J4anMtaW50ZXJvcCc7XG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBhc3NlcnRJbmplY3RvciB9IGZyb20gJ25neHRlbnNpb24vYXNzZXJ0LWluamVjdG9yJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEluamVjdFJvdXRlRnJhZ21lbnRPcHRpb25zPFQgPSB1bmtub3duPiB7XG5cdC8qKlxuXHQgKiBBIHRyYW5zZm9ybWF0aW9uIGZ1bmN0aW9uLlxuXHQgKlxuXHQgKiBAcGFyYW0gZnJhZ21lbnQgLSBUaGUgZnJhZ21lbnQgdmFsdWUgdG8gdHJhbnNmb3JtLlxuXHQgKiBAcmV0dXJucyBUaGUgdHJhbnNmb3JtZWQgdmFsdWUuXG5cdCAqL1xuXHR0cmFuc2Zvcm0/OiAoZnJhZ21lbnQ6IHN0cmluZyB8IG51bGwpID0+IFQ7XG5cblx0LyoqXG5cdCAqIFRoZSBvcHRpb25hbCBcImN1c3RvbVwiIEluamVjdG9yLiBJZiB0aGlzIGlzIG5vdCBwcm92aWRlZCwgd2lsbCBiZSByZXRyaWV2ZWQgZnJvbSB0aGUgY3VycmVudCBpbmplY3Rpb24gY29udGV4dFxuXHQgKi9cblx0aW5qZWN0b3I/OiBJbmplY3Rvcjtcbn1cblxuLyoqXG4gKiBUaGUgYGluamVjdFJvdXRlRnJhZ21lbnRgIGZ1bmN0aW9uIGFsbG93cyB5b3UgdG8gYWNjZXNzIGFuZCB0cmFuc2Zvcm0gdXJsIGZyYWdtZW50IGZyb20gdGhlIGN1cnJlbnQgcm91dGUuXG4gKlxuICogQHJldHVybnMge1NpZ25hbH0gQSBgU2lnbmFsYCB0aGF0IGVtaXRzIHRoZSByb3V0ZSBmcmFnbWVudC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluamVjdFJvdXRlRnJhZ21lbnQoKTogU2lnbmFsPHN0cmluZyB8IG51bGw+O1xuXG4vKipcbiAqIFRoZSBgaW5qZWN0Um91dGVGcmFnbWVudGAgZnVuY3Rpb24gYWxsb3dzIHlvdSB0byBhY2Nlc3MgYW5kIHRyYW5zZm9ybSB1cmwgZnJhZ21lbnQgZnJvbSB0aGUgY3VycmVudCByb3V0ZS5cbiAqXG4gKiBAcGFyYW0ge0luamVjdFJvdXRlRnJhZ21lbnRPcHRpb25zfSBvcHRpb25zIC0gaW5qZWN0IG9wdGlvbnMgbGlrZSB0cmFuc2Zvcm0gZm4uXG4gKiBAcmV0dXJucyB7U2lnbmFsfSBBIGBTaWduYWxgIHRoYXQgZW1pdHMgdGhlIHRyYW5zZm9ybWVkIHZhbHVlIG9mIHVybCBmcmFnbWVudC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluamVjdFJvdXRlRnJhZ21lbnQ8VD4oXG5cdG9wdGlvbnM6IEluamVjdFJvdXRlRnJhZ21lbnRPcHRpb25zPFQ+LFxuKTogU2lnbmFsPFQ+O1xuXG5leHBvcnQgZnVuY3Rpb24gaW5qZWN0Um91dGVGcmFnbWVudDxUPihcblx0b3B0aW9ucz86IEluamVjdFJvdXRlRnJhZ21lbnRPcHRpb25zPFQ+LFxuKSB7XG5cdHJldHVybiBhc3NlcnRJbmplY3RvcihpbmplY3RSb3V0ZUZyYWdtZW50LCBvcHRpb25zPy5pbmplY3RvciwgKCkgPT4ge1xuXHRcdGNvbnN0IHJvdXRlID0gaW5qZWN0KEFjdGl2YXRlZFJvdXRlKTtcblx0XHRjb25zdCBpbml0aWFsUm91dGVGcmFnbWVudCA9IHJvdXRlLnNuYXBzaG90LmZyYWdtZW50O1xuXHRcdGNvbnN0IGdldEZyYWdtZW50ID0gKGZyYWdtZW50OiBzdHJpbmcgfCBudWxsKSA9PiB7XG5cdFx0XHRpZiAob3B0aW9ucz8udHJhbnNmb3JtKSByZXR1cm4gb3B0aW9ucy50cmFuc2Zvcm0oZnJhZ21lbnQpO1xuXHRcdFx0cmV0dXJuIGZyYWdtZW50O1xuXHRcdH07XG5cdFx0Y29uc3QgZnJhZ21lbnQkID0gcm91dGUuZnJhZ21lbnQucGlwZShtYXAoZ2V0RnJhZ21lbnQpKTtcblxuXHRcdHJldHVybiB0b1NpZ25hbChmcmFnbWVudCQsIHtcblx0XHRcdGluaXRpYWxWYWx1ZTogZ2V0RnJhZ21lbnQoaW5pdGlhbFJvdXRlRnJhZ21lbnQpLFxuXHRcdH0pO1xuXHR9KTtcbn1cbiJdfQ==