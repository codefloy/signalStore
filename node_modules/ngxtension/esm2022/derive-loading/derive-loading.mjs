import { combineLatest, debounce, distinctUntilChanged, map, merge, Observable, ReplaySubject, share, startWith, takeUntil, timer, } from 'rxjs';
/**
 * Derive a loading state from the source observable.
 *
 * It will emit a loading flag in a "non-flickering" way. This means
 * if the async operation finishes before the threshold time, the loading flag will not change
 * to "true", it will stay false.
 *
 * It will only emit "true" when the async operation takes longer than the threshold time.
 * It will change back to "false" after at least the defined threshold + loadingTime has passed.
 * If the async operation takes longer than threshold + loadingtime, "false" will be emitted after the operation
 * has finished.
 *
 * @param options - The options to configure the loading state derivation.
 * @returns A observable that emits the loading flag.
 *
 * @param options
 */
export function deriveLoading(options) {
    const threshold = options?.threshold ?? 500;
    const loadingTime = options?.loadingTime ?? 1000;
    return function (source) {
        const result$ = source.pipe(share({
            connector: () => new ReplaySubject(1),
            resetOnComplete: false,
            resetOnRefCountZero: true,
            resetOnError: true,
        }));
        return merge(timer(threshold).pipe(map(() => true), takeUntil(result$)), combineLatest([result$, timer(threshold + loadingTime)]).pipe(map(() => false))).pipe(startWith(false), distinctUntilChanged(), handleSyncValue());
    };
}
function handleSyncValue() {
    return (source$) => {
        return new Observable((observer) => {
            const isReadySubject = new ReplaySubject(1);
            const subscription = source$
                .pipe(
            /* Wait for all synchronous processing to be done. */
            debounce(() => isReadySubject))
                .subscribe(observer);
            /* Sync emitted values have been processed now.
             * Mark source as ready and emit last computed state. */
            isReadySubject.next(undefined);
            return () => subscription.unsubscribe();
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVyaXZlLWxvYWRpbmcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL25neHRlbnNpb24vZGVyaXZlLWxvYWRpbmcvc3JjL2Rlcml2ZS1sb2FkaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTixhQUFhLEVBQ2IsUUFBUSxFQUNSLG9CQUFvQixFQUNwQixHQUFHLEVBQ0gsS0FBSyxFQUVMLFVBQVUsRUFFVixhQUFhLEVBQ2IsS0FBSyxFQUNMLFNBQVMsRUFDVCxTQUFTLEVBQ1QsS0FBSyxHQUNMLE1BQU0sTUFBTSxDQUFDO0FBYWQ7Ozs7Ozs7Ozs7Ozs7Ozs7R0FnQkc7QUFDSCxNQUFNLFVBQVUsYUFBYSxDQUM1QixPQUE4QjtJQUU5QixNQUFNLFNBQVMsR0FBRyxPQUFPLEVBQUUsU0FBUyxJQUFJLEdBQUcsQ0FBQztJQUM1QyxNQUFNLFdBQVcsR0FBRyxPQUFPLEVBQUUsV0FBVyxJQUFJLElBQUksQ0FBQztJQUVqRCxPQUFPLFVBQWEsTUFBcUI7UUFDeEMsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FDMUIsS0FBSyxDQUFDO1lBQ0wsU0FBUyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksYUFBYSxDQUFDLENBQUMsQ0FBQztZQUNyQyxlQUFlLEVBQUUsS0FBSztZQUN0QixtQkFBbUIsRUFBRSxJQUFJO1lBQ3pCLFlBQVksRUFBRSxJQUFJO1NBQ2xCLENBQUMsQ0FDRixDQUFDO1FBRUYsT0FBTyxLQUFLLENBQ1gsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FDcEIsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUNmLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FDbEIsRUFDRCxhQUFhLENBQUMsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLFNBQVMsR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUM1RCxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQ2hCLENBQ0QsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFLG9CQUFvQixFQUFFLEVBQUUsZUFBZSxFQUFFLENBQUMsQ0FBQztJQUNyRSxDQUFDLENBQUM7QUFDSCxDQUFDO0FBRUQsU0FBUyxlQUFlO0lBQ3ZCLE9BQU8sQ0FBQyxPQUFzQixFQUFpQixFQUFFO1FBQ2hELE9BQU8sSUFBSSxVQUFVLENBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRTtZQUNyQyxNQUFNLGNBQWMsR0FBRyxJQUFJLGFBQWEsQ0FBVSxDQUFDLENBQUMsQ0FBQztZQUVyRCxNQUFNLFlBQVksR0FBRyxPQUFPO2lCQUMxQixJQUFJO1lBQ0oscURBQXFEO1lBQ3JELFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxjQUFjLENBQUMsQ0FDOUI7aUJBQ0EsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBRXRCO29FQUN3RDtZQUN4RCxjQUFjLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBRS9CLE9BQU8sR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3pDLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQyxDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG5cdGNvbWJpbmVMYXRlc3QsXG5cdGRlYm91bmNlLFxuXHRkaXN0aW5jdFVudGlsQ2hhbmdlZCxcblx0bWFwLFxuXHRtZXJnZSxcblx0TW9ub1R5cGVPcGVyYXRvckZ1bmN0aW9uLFxuXHRPYnNlcnZhYmxlLFxuXHRPcGVyYXRvckZ1bmN0aW9uLFxuXHRSZXBsYXlTdWJqZWN0LFxuXHRzaGFyZSxcblx0c3RhcnRXaXRoLFxuXHR0YWtlVW50aWwsXG5cdHRpbWVyLFxufSBmcm9tICdyeGpzJztcblxuZXhwb3J0IHR5cGUgRGVyaXZlTG9hZGluZ09wdGlvbnMgPSB7XG5cdC8qKlxuXHQgKiBUaGUgdGltZSBpbiBtaWxsaXNlY29uZHMgdG8gd2FpdCBiZWZvcmUgZW1pdGluZyB0aGUgbG9hZGluZyBmbGFnID0gdHJ1ZS5cblx0ICovXG5cdHRocmVzaG9sZD86IG51bWJlcjtcblx0LyoqXG5cdCAqIFRoZSB0aW1lIGluIG1pbGxpc2Vjb25kcyB0byB3YWl0IGJlZm9yZSBlbWl0aW5nIHRoZSBsb2FkaW5nIGZsYWcgPSBmYWxzZS5cblx0ICovXG5cdGxvYWRpbmdUaW1lPzogbnVtYmVyO1xufTtcblxuLyoqXG4gKiBEZXJpdmUgYSBsb2FkaW5nIHN0YXRlIGZyb20gdGhlIHNvdXJjZSBvYnNlcnZhYmxlLlxuICpcbiAqIEl0IHdpbGwgZW1pdCBhIGxvYWRpbmcgZmxhZyBpbiBhIFwibm9uLWZsaWNrZXJpbmdcIiB3YXkuIFRoaXMgbWVhbnNcbiAqIGlmIHRoZSBhc3luYyBvcGVyYXRpb24gZmluaXNoZXMgYmVmb3JlIHRoZSB0aHJlc2hvbGQgdGltZSwgdGhlIGxvYWRpbmcgZmxhZyB3aWxsIG5vdCBjaGFuZ2VcbiAqIHRvIFwidHJ1ZVwiLCBpdCB3aWxsIHN0YXkgZmFsc2UuXG4gKlxuICogSXQgd2lsbCBvbmx5IGVtaXQgXCJ0cnVlXCIgd2hlbiB0aGUgYXN5bmMgb3BlcmF0aW9uIHRha2VzIGxvbmdlciB0aGFuIHRoZSB0aHJlc2hvbGQgdGltZS5cbiAqIEl0IHdpbGwgY2hhbmdlIGJhY2sgdG8gXCJmYWxzZVwiIGFmdGVyIGF0IGxlYXN0IHRoZSBkZWZpbmVkIHRocmVzaG9sZCArIGxvYWRpbmdUaW1lIGhhcyBwYXNzZWQuXG4gKiBJZiB0aGUgYXN5bmMgb3BlcmF0aW9uIHRha2VzIGxvbmdlciB0aGFuIHRocmVzaG9sZCArIGxvYWRpbmd0aW1lLCBcImZhbHNlXCIgd2lsbCBiZSBlbWl0dGVkIGFmdGVyIHRoZSBvcGVyYXRpb25cbiAqIGhhcyBmaW5pc2hlZC5cbiAqXG4gKiBAcGFyYW0gb3B0aW9ucyAtIFRoZSBvcHRpb25zIHRvIGNvbmZpZ3VyZSB0aGUgbG9hZGluZyBzdGF0ZSBkZXJpdmF0aW9uLlxuICogQHJldHVybnMgQSBvYnNlcnZhYmxlIHRoYXQgZW1pdHMgdGhlIGxvYWRpbmcgZmxhZy5cbiAqXG4gKiBAcGFyYW0gb3B0aW9uc1xuICovXG5leHBvcnQgZnVuY3Rpb24gZGVyaXZlTG9hZGluZzxUPihcblx0b3B0aW9ucz86IERlcml2ZUxvYWRpbmdPcHRpb25zLFxuKTogT3BlcmF0b3JGdW5jdGlvbjxULCBib29sZWFuPiB7XG5cdGNvbnN0IHRocmVzaG9sZCA9IG9wdGlvbnM/LnRocmVzaG9sZCA/PyA1MDA7XG5cdGNvbnN0IGxvYWRpbmdUaW1lID0gb3B0aW9ucz8ubG9hZGluZ1RpbWUgPz8gMTAwMDtcblxuXHRyZXR1cm4gZnVuY3Rpb24gPFQ+KHNvdXJjZTogT2JzZXJ2YWJsZTxUPik6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuXHRcdGNvbnN0IHJlc3VsdCQgPSBzb3VyY2UucGlwZShcblx0XHRcdHNoYXJlKHtcblx0XHRcdFx0Y29ubmVjdG9yOiAoKSA9PiBuZXcgUmVwbGF5U3ViamVjdCgxKSxcblx0XHRcdFx0cmVzZXRPbkNvbXBsZXRlOiBmYWxzZSxcblx0XHRcdFx0cmVzZXRPblJlZkNvdW50WmVybzogdHJ1ZSxcblx0XHRcdFx0cmVzZXRPbkVycm9yOiB0cnVlLFxuXHRcdFx0fSksXG5cdFx0KTtcblxuXHRcdHJldHVybiBtZXJnZShcblx0XHRcdHRpbWVyKHRocmVzaG9sZCkucGlwZShcblx0XHRcdFx0bWFwKCgpID0+IHRydWUpLFxuXHRcdFx0XHR0YWtlVW50aWwocmVzdWx0JCksXG5cdFx0XHQpLFxuXHRcdFx0Y29tYmluZUxhdGVzdChbcmVzdWx0JCwgdGltZXIodGhyZXNob2xkICsgbG9hZGluZ1RpbWUpXSkucGlwZShcblx0XHRcdFx0bWFwKCgpID0+IGZhbHNlKSxcblx0XHRcdCksXG5cdFx0KS5waXBlKHN0YXJ0V2l0aChmYWxzZSksIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCksIGhhbmRsZVN5bmNWYWx1ZSgpKTtcblx0fTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlU3luY1ZhbHVlPFQ+KCk6IE1vbm9UeXBlT3BlcmF0b3JGdW5jdGlvbjxhbnk+IHtcblx0cmV0dXJuIChzb3VyY2UkOiBPYnNlcnZhYmxlPFQ+KTogT2JzZXJ2YWJsZTxUPiA9PiB7XG5cdFx0cmV0dXJuIG5ldyBPYnNlcnZhYmxlPFQ+KChvYnNlcnZlcikgPT4ge1xuXHRcdFx0Y29uc3QgaXNSZWFkeVN1YmplY3QgPSBuZXcgUmVwbGF5U3ViamVjdDx1bmtub3duPigxKTtcblxuXHRcdFx0Y29uc3Qgc3Vic2NyaXB0aW9uID0gc291cmNlJFxuXHRcdFx0XHQucGlwZShcblx0XHRcdFx0XHQvKiBXYWl0IGZvciBhbGwgc3luY2hyb25vdXMgcHJvY2Vzc2luZyB0byBiZSBkb25lLiAqL1xuXHRcdFx0XHRcdGRlYm91bmNlKCgpID0+IGlzUmVhZHlTdWJqZWN0KSxcblx0XHRcdFx0KVxuXHRcdFx0XHQuc3Vic2NyaWJlKG9ic2VydmVyKTtcblxuXHRcdFx0LyogU3luYyBlbWl0dGVkIHZhbHVlcyBoYXZlIGJlZW4gcHJvY2Vzc2VkIG5vdy5cblx0XHRcdCAqIE1hcmsgc291cmNlIGFzIHJlYWR5IGFuZCBlbWl0IGxhc3QgY29tcHV0ZWQgc3RhdGUuICovXG5cdFx0XHRpc1JlYWR5U3ViamVjdC5uZXh0KHVuZGVmaW5lZCk7XG5cblx0XHRcdHJldHVybiAoKSA9PiBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcblx0XHR9KTtcblx0fTtcbn1cbiJdfQ==