import { inject, Injectable, NgZone } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
export class IsInViewportService {
    constructor() {
        this.ngZone = inject(NgZone);
        this.#observerListeners = new Map();
    }
    #observerListeners;
    #observer;
    #createObserver() {
        this.#observer = this.ngZone.runOutsideAngular(() => {
            return new IntersectionObserver((entries) => {
                for (const entry of entries) {
                    this.intersect(entry.target, entry);
                }
            });
        });
    }
    observe(element) {
        if (!this.#observer) {
            this.#createObserver();
        }
        if (this.#observerListeners.has(element)) {
            return this.#observerListeners.get(element);
        }
        this.#observerListeners.set(element, new Subject());
        this.#observer?.observe(element);
        return this.#observerListeners.get(element);
    }
    unobserve(element) {
        this.#observer?.unobserve(element);
        this.#observerListeners.get(element)?.complete();
        this.#observerListeners.delete(element);
        if (this.#observerListeners.size === 0) {
            this.#disconnect();
        }
    }
    intersect(element, entry) {
        const subject = this.#observerListeners.get(element);
        // only emit if the subject is subscribed to
        if (subject?.observed) {
            this.ngZone.run(() => subject.next(entry));
        }
    }
    #disconnect() {
        this.#observer?.disconnect();
        this.#observer = undefined;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: IsInViewportService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: IsInViewportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: IsInViewportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXMtaW4tdmlld3BvcnQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2xpYnMvbmd4dGVuc2lvbi9pbmplY3QtaXMtaW50ZXJzZWN0aW5nL3NyYy9pcy1pbi12aWV3cG9ydC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDOztBQUcvQixNQUFNLE9BQU8sbUJBQW1CO0lBRGhDO1FBRVMsV0FBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUVoQyx1QkFBa0IsR0FBRyxJQUFJLEdBQUcsRUFBK0MsQ0FBQztLQXVENUU7SUF2REEsa0JBQWtCLENBQTBEO0lBRTVFLFNBQVMsQ0FBd0I7SUFFakMsZUFBZTtRQUNkLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7WUFDbkQsT0FBTyxJQUFJLG9CQUFvQixDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7Z0JBQzNDLEtBQUssTUFBTSxLQUFLLElBQUksT0FBTyxFQUFFLENBQUM7b0JBQzdCLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztnQkFDckMsQ0FBQztZQUNGLENBQUMsQ0FBQyxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBRUQsT0FBTyxDQUFDLE9BQWdCO1FBQ3ZCLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7WUFDckIsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQ3hCLENBQUM7UUFFRCxJQUFJLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztZQUMxQyxPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFFLENBQUM7UUFDOUMsQ0FBQztRQUVELElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQzFCLE9BQU8sRUFDUCxJQUFJLE9BQU8sRUFBNkIsQ0FDeEMsQ0FBQztRQUNGLElBQUksQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRWpDLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUUsQ0FBQztJQUM5QyxDQUFDO0lBRUQsU0FBUyxDQUFDLE9BQWdCO1FBQ3pCLElBQUksQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRW5DLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUM7UUFDakQsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUV4QyxJQUFJLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLEtBQUssQ0FBQyxFQUFFLENBQUM7WUFDeEMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3BCLENBQUM7SUFDRixDQUFDO0lBRUQsU0FBUyxDQUFDLE9BQWdCLEVBQUUsS0FBZ0M7UUFDM0QsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNyRCw0Q0FBNEM7UUFDNUMsSUFBSSxPQUFPLEVBQUUsUUFBUSxFQUFFLENBQUM7WUFDdkIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQzVDLENBQUM7SUFDRixDQUFDO0lBRUQsV0FBVztRQUNWLElBQUksQ0FBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLENBQUM7UUFDN0IsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7SUFDNUIsQ0FBQzs4R0F6RFcsbUJBQW1CO2tIQUFuQixtQkFBbUIsY0FETixNQUFNOzsyRkFDbkIsbUJBQW1CO2tCQUQvQixVQUFVO21CQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGluamVjdCwgSW5qZWN0YWJsZSwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgSXNJblZpZXdwb3J0U2VydmljZSBpbXBsZW1lbnRzIElzSW5WaWV3cG9ydFNlcnZpY2VJbnRlcmZhY2Uge1xuXHRwcml2YXRlIG5nWm9uZSA9IGluamVjdChOZ1pvbmUpO1xuXG5cdCNvYnNlcnZlckxpc3RlbmVycyA9IG5ldyBNYXA8RWxlbWVudCwgU3ViamVjdDxJbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5Pj4oKTtcblxuXHQjb2JzZXJ2ZXI/OiBJbnRlcnNlY3Rpb25PYnNlcnZlcjtcblxuXHQjY3JlYXRlT2JzZXJ2ZXIoKSB7XG5cdFx0dGhpcy4jb2JzZXJ2ZXIgPSB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG5cdFx0XHRyZXR1cm4gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKChlbnRyaWVzKSA9PiB7XG5cdFx0XHRcdGZvciAoY29uc3QgZW50cnkgb2YgZW50cmllcykge1xuXHRcdFx0XHRcdHRoaXMuaW50ZXJzZWN0KGVudHJ5LnRhcmdldCwgZW50cnkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9KTtcblx0fVxuXG5cdG9ic2VydmUoZWxlbWVudDogRWxlbWVudCkge1xuXHRcdGlmICghdGhpcy4jb2JzZXJ2ZXIpIHtcblx0XHRcdHRoaXMuI2NyZWF0ZU9ic2VydmVyKCk7XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMuI29ic2VydmVyTGlzdGVuZXJzLmhhcyhlbGVtZW50KSkge1xuXHRcdFx0cmV0dXJuIHRoaXMuI29ic2VydmVyTGlzdGVuZXJzLmdldChlbGVtZW50KSE7XG5cdFx0fVxuXG5cdFx0dGhpcy4jb2JzZXJ2ZXJMaXN0ZW5lcnMuc2V0KFxuXHRcdFx0ZWxlbWVudCxcblx0XHRcdG5ldyBTdWJqZWN0PEludGVyc2VjdGlvbk9ic2VydmVyRW50cnk+KCksXG5cdFx0KTtcblx0XHR0aGlzLiNvYnNlcnZlcj8ub2JzZXJ2ZShlbGVtZW50KTtcblxuXHRcdHJldHVybiB0aGlzLiNvYnNlcnZlckxpc3RlbmVycy5nZXQoZWxlbWVudCkhO1xuXHR9XG5cblx0dW5vYnNlcnZlKGVsZW1lbnQ6IEVsZW1lbnQpIHtcblx0XHR0aGlzLiNvYnNlcnZlcj8udW5vYnNlcnZlKGVsZW1lbnQpO1xuXG5cdFx0dGhpcy4jb2JzZXJ2ZXJMaXN0ZW5lcnMuZ2V0KGVsZW1lbnQpPy5jb21wbGV0ZSgpO1xuXHRcdHRoaXMuI29ic2VydmVyTGlzdGVuZXJzLmRlbGV0ZShlbGVtZW50KTtcblxuXHRcdGlmICh0aGlzLiNvYnNlcnZlckxpc3RlbmVycy5zaXplID09PSAwKSB7XG5cdFx0XHR0aGlzLiNkaXNjb25uZWN0KCk7XG5cdFx0fVxuXHR9XG5cblx0aW50ZXJzZWN0KGVsZW1lbnQ6IEVsZW1lbnQsIGVudHJ5OiBJbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5KSB7XG5cdFx0Y29uc3Qgc3ViamVjdCA9IHRoaXMuI29ic2VydmVyTGlzdGVuZXJzLmdldChlbGVtZW50KTtcblx0XHQvLyBvbmx5IGVtaXQgaWYgdGhlIHN1YmplY3QgaXMgc3Vic2NyaWJlZCB0b1xuXHRcdGlmIChzdWJqZWN0Py5vYnNlcnZlZCkge1xuXHRcdFx0dGhpcy5uZ1pvbmUucnVuKCgpID0+IHN1YmplY3QubmV4dChlbnRyeSkpO1xuXHRcdH1cblx0fVxuXG5cdCNkaXNjb25uZWN0KCkge1xuXHRcdHRoaXMuI29ic2VydmVyPy5kaXNjb25uZWN0KCk7XG5cdFx0dGhpcy4jb2JzZXJ2ZXIgPSB1bmRlZmluZWQ7XG5cdH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBJc0luVmlld3BvcnRTZXJ2aWNlSW50ZXJmYWNlIHtcblx0b2JzZXJ2ZShlbGVtZW50OiBFbGVtZW50KTogU3ViamVjdDxJbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5Pjtcblx0dW5vYnNlcnZlKGVsZW1lbnQ6IEVsZW1lbnQpOiB2b2lkO1xuXHRpbnRlcnNlY3QoZWxlbWVudDogRWxlbWVudCwgZW50cnk6IEludGVyc2VjdGlvbk9ic2VydmVyRW50cnkpOiB2b2lkO1xufVxuIl19