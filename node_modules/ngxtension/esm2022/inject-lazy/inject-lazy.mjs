import { assertInjector } from 'ngxtension/assert-injector';
import { InjectLazyImpl } from './inject-lazy-impl';
/**
 * Loads a service lazily. The service is loaded when the observable is subscribed to.
 *
 * @param loader A function that returns a promise of the service to load.
 * @param injector The injector to use to load the service. If not provided, the current injector is used.
 * @returns An observable of the service.
 *
 * @example
 * ```ts
 * const dataService$ = injectLazy(() => import('./data-service').then((m) => m.MyService));
 * or
 * const dataService$ = injectLazy(() => import('./data-service'));
 * ```
 */
export function injectLazy(loader, injector) {
    injector = assertInjector(injectLazy, injector);
    const injectImpl = injector.get(InjectLazyImpl);
    return injectImpl.get(injector, loader);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5qZWN0LWxhenkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL25neHRlbnNpb24vaW5qZWN0LWxhenkvc3JjL2luamVjdC1sYXp5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUc1RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFcEQ7Ozs7Ozs7Ozs7Ozs7R0FhRztBQUNILE1BQU0sVUFBVSxVQUFVLENBQ3pCLE1BQTZCLEVBQzdCLFFBQW1CO0lBRW5CLFFBQVEsR0FBRyxjQUFjLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ2hELE1BQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQW9CLGNBQWMsQ0FBQyxDQUFDO0lBQ25FLE9BQU8sVUFBVSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDekMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBhc3NlcnRJbmplY3RvciB9IGZyb20gJ25neHRlbnNpb24vYXNzZXJ0LWluamVjdG9yJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB0eXBlIHsgTGF6eUltcG9ydExvYWRlckZuIH0gZnJvbSAnLi9pbmplY3QtbGF6eS1pbXBsJztcbmltcG9ydCB7IEluamVjdExhenlJbXBsIH0gZnJvbSAnLi9pbmplY3QtbGF6eS1pbXBsJztcblxuLyoqXG4gKiBMb2FkcyBhIHNlcnZpY2UgbGF6aWx5LiBUaGUgc2VydmljZSBpcyBsb2FkZWQgd2hlbiB0aGUgb2JzZXJ2YWJsZSBpcyBzdWJzY3JpYmVkIHRvLlxuICpcbiAqIEBwYXJhbSBsb2FkZXIgQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBwcm9taXNlIG9mIHRoZSBzZXJ2aWNlIHRvIGxvYWQuXG4gKiBAcGFyYW0gaW5qZWN0b3IgVGhlIGluamVjdG9yIHRvIHVzZSB0byBsb2FkIHRoZSBzZXJ2aWNlLiBJZiBub3QgcHJvdmlkZWQsIHRoZSBjdXJyZW50IGluamVjdG9yIGlzIHVzZWQuXG4gKiBAcmV0dXJucyBBbiBvYnNlcnZhYmxlIG9mIHRoZSBzZXJ2aWNlLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0c1xuICogY29uc3QgZGF0YVNlcnZpY2UkID0gaW5qZWN0TGF6eSgoKSA9PiBpbXBvcnQoJy4vZGF0YS1zZXJ2aWNlJykudGhlbigobSkgPT4gbS5NeVNlcnZpY2UpKTtcbiAqIG9yXG4gKiBjb25zdCBkYXRhU2VydmljZSQgPSBpbmplY3RMYXp5KCgpID0+IGltcG9ydCgnLi9kYXRhLXNlcnZpY2UnKSk7XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluamVjdExhenk8VD4oXG5cdGxvYWRlcjogTGF6eUltcG9ydExvYWRlckZuPFQ+LFxuXHRpbmplY3Rvcj86IEluamVjdG9yLFxuKTogT2JzZXJ2YWJsZTxUPiB7XG5cdGluamVjdG9yID0gYXNzZXJ0SW5qZWN0b3IoaW5qZWN0TGF6eSwgaW5qZWN0b3IpO1xuXHRjb25zdCBpbmplY3RJbXBsID0gaW5qZWN0b3IuZ2V0PEluamVjdExhenlJbXBsPFQ+PihJbmplY3RMYXp5SW1wbCk7XG5cdHJldHVybiBpbmplY3RJbXBsLmdldChpbmplY3RvciwgbG9hZGVyKTtcbn1cbiJdfQ==