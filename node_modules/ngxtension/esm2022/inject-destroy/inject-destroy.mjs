import { DestroyRef, inject, runInInjectionContext, } from '@angular/core';
import { assertInjector } from 'ngxtension/assert-injector';
import { ReplaySubject } from 'rxjs';
/**
 * Injects the `DestroyRef` service and returns a `ReplaySubject` that emits
 * when the component is destroyed.
 *
 * @throws {Error} If no `DestroyRef` is found.
 * @returns {ReplaySubject<void>} A `ReplaySubject` that emits when the component is destroyed.
 *
 * @example
 * // In your component:
 * export class MyComponent {
 *   private destroy$ = injectDestroy();
 *
 *   getData() {
 *     return this.service.getData()
 *       .pipe(takeUntil(this.destroy$))
 *       .subscribe(data => { ... });
 *   }
 * }
 */
export const injectDestroy = (injector) => {
    injector = assertInjector(injectDestroy, injector);
    return runInInjectionContext(injector, () => {
        const destroyRef = inject(DestroyRef);
        const subject$ = new ReplaySubject(1);
        destroyRef.onDestroy(() => {
            subject$.next();
            subject$.complete();
        });
        Object.assign(subject$, {
            onDestroy: destroyRef.onDestroy.bind(destroyRef),
        });
        return subject$;
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5qZWN0LWRlc3Ryb3kuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL25neHRlbnNpb24vaW5qZWN0LWRlc3Ryb3kvc3JjL2luamVjdC1kZXN0cm95LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTixVQUFVLEVBQ1YsTUFBTSxFQUNOLHFCQUFxQixHQUVyQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUVyQzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBa0JHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLENBQzVCLFFBQW1CLEVBQzRDLEVBQUU7SUFDakUsUUFBUSxHQUFHLGNBQWMsQ0FBQyxhQUFhLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFFbkQsT0FBTyxxQkFBcUIsQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFO1FBQzNDLE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUV0QyxNQUFNLFFBQVEsR0FBRyxJQUFJLGFBQWEsQ0FBTyxDQUFDLENBQUMsQ0FBQztRQUU1QyxVQUFVLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRTtZQUN6QixRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDaEIsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ3JCLENBQUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUU7WUFDdkIsU0FBUyxFQUFFLFVBQVUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQztTQUNoRCxDQUFDLENBQUM7UUFFSCxPQUFPLFFBRU4sQ0FBQztJQUNILENBQUMsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0RGVzdHJveVJlZixcblx0aW5qZWN0LFxuXHRydW5JbkluamVjdGlvbkNvbnRleHQsXG5cdHR5cGUgSW5qZWN0b3IsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgYXNzZXJ0SW5qZWN0b3IgfSBmcm9tICduZ3h0ZW5zaW9uL2Fzc2VydC1pbmplY3Rvcic7XG5pbXBvcnQgeyBSZXBsYXlTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbi8qKlxuICogSW5qZWN0cyB0aGUgYERlc3Ryb3lSZWZgIHNlcnZpY2UgYW5kIHJldHVybnMgYSBgUmVwbGF5U3ViamVjdGAgdGhhdCBlbWl0c1xuICogd2hlbiB0aGUgY29tcG9uZW50IGlzIGRlc3Ryb3llZC5cbiAqXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgbm8gYERlc3Ryb3lSZWZgIGlzIGZvdW5kLlxuICogQHJldHVybnMge1JlcGxheVN1YmplY3Q8dm9pZD59IEEgYFJlcGxheVN1YmplY3RgIHRoYXQgZW1pdHMgd2hlbiB0aGUgY29tcG9uZW50IGlzIGRlc3Ryb3llZC5cbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gSW4geW91ciBjb21wb25lbnQ6XG4gKiBleHBvcnQgY2xhc3MgTXlDb21wb25lbnQge1xuICogICBwcml2YXRlIGRlc3Ryb3kkID0gaW5qZWN0RGVzdHJveSgpO1xuICpcbiAqICAgZ2V0RGF0YSgpIHtcbiAqICAgICByZXR1cm4gdGhpcy5zZXJ2aWNlLmdldERhdGEoKVxuICogICAgICAgLnBpcGUodGFrZVVudGlsKHRoaXMuZGVzdHJveSQpKVxuICogICAgICAgLnN1YnNjcmliZShkYXRhID0+IHsgLi4uIH0pO1xuICogICB9XG4gKiB9XG4gKi9cbmV4cG9ydCBjb25zdCBpbmplY3REZXN0cm95ID0gKFxuXHRpbmplY3Rvcj86IEluamVjdG9yLFxuKTogUmVwbGF5U3ViamVjdDx2b2lkPiAmIHsgb25EZXN0cm95OiBEZXN0cm95UmVmWydvbkRlc3Ryb3knXSB9ID0+IHtcblx0aW5qZWN0b3IgPSBhc3NlcnRJbmplY3RvcihpbmplY3REZXN0cm95LCBpbmplY3Rvcik7XG5cblx0cmV0dXJuIHJ1bkluSW5qZWN0aW9uQ29udGV4dChpbmplY3RvciwgKCkgPT4ge1xuXHRcdGNvbnN0IGRlc3Ryb3lSZWYgPSBpbmplY3QoRGVzdHJveVJlZik7XG5cblx0XHRjb25zdCBzdWJqZWN0JCA9IG5ldyBSZXBsYXlTdWJqZWN0PHZvaWQ+KDEpO1xuXG5cdFx0ZGVzdHJveVJlZi5vbkRlc3Ryb3koKCkgPT4ge1xuXHRcdFx0c3ViamVjdCQubmV4dCgpO1xuXHRcdFx0c3ViamVjdCQuY29tcGxldGUoKTtcblx0XHR9KTtcblxuXHRcdE9iamVjdC5hc3NpZ24oc3ViamVjdCQsIHtcblx0XHRcdG9uRGVzdHJveTogZGVzdHJveVJlZi5vbkRlc3Ryb3kuYmluZChkZXN0cm95UmVmKSxcblx0XHR9KTtcblxuXHRcdHJldHVybiBzdWJqZWN0JCBhcyBSZXBsYXlTdWJqZWN0PHZvaWQ+ICYge1xuXHRcdFx0b25EZXN0cm95OiBEZXN0cm95UmVmWydvbkRlc3Ryb3knXTtcblx0XHR9O1xuXHR9KTtcbn07XG4iXX0=