import { inject, LOCALE_ID, Pipe, } from '@angular/core';
import { createInjectionToken } from 'ngxtension/create-injection-token';
import * as i0 from "@angular/core";
/**
 * @internal
 */
const defaultOptions = {
    localeMatcher: 'best fit', // other values: "lookup"
    numeric: 'always', // other values: "auto"
    style: 'long', // other values: "short" or "narrow"
};
/**
 * @internal
 */
const [injectFn, provideFn] = createInjectionToken(() => defaultOptions);
/**
 * Provides a way to inject the options for the RelativeTimeFormatPipe.
 * @param options The options to use for the RelativeTimeFormatPipe.
 *
 * @returns The provider for the RelativeTimeFormatPipe.
 */
export function provideRelativeTimeFormatOptions(options) {
    return provideFn({ ...defaultOptions, ...options });
}
/**
 * This pipe is a wrapper around the [Intl.RelativeTimeFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat) API.
 *
 * @returns The relative time format of the value or the value as it is in case of errors.
 */
export class RelativeTimeFormatPipe {
    constructor() {
        this.defaultOptions = injectFn();
        this.locale = inject(LOCALE_ID);
    }
    /**
     * Transforms the value into a relative time format.
     *
     * @param value The value to format.
     * @param unit The unit of the value.
     * @param style Optional, the formatting style to use.
     * @param locale Optional, the locale to use for the formatting.
     * @returns The relative time format of the value or the value as it is in case of errors.
     */
    transform(value, unit, style, locale) {
        try {
            return new Intl.RelativeTimeFormat(locale || this.locale, {
                ...this.defaultOptions,
                ...(style ? { style } : {}),
            }).format(value, unit);
        }
        catch (e) {
            console.error(e);
            return value.toString();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: RelativeTimeFormatPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "18.0.3", ngImport: i0, type: RelativeTimeFormatPipe, isStandalone: true, name: "relativeTimeFormat" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: RelativeTimeFormatPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'relativeTimeFormat',
                    standalone: true,
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVsYXRpdmUtdGltZS1mb3JtYXQucGlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2xpYnMvbmd4dGVuc2lvbi9pbnRsL3NyYy9yZWxhdGl2ZS10aW1lLWZvcm1hdC5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTixNQUFNLEVBQ04sU0FBUyxFQUNULElBQUksR0FHSixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQzs7QUFFekU7O0dBRUc7QUFDSCxNQUFNLGNBQWMsR0FBbUM7SUFDdEQsYUFBYSxFQUFFLFVBQVUsRUFBRSx5QkFBeUI7SUFDcEQsT0FBTyxFQUFFLFFBQVEsRUFBRSx1QkFBdUI7SUFDMUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxvQ0FBb0M7Q0FDbkQsQ0FBQztBQUVGOztHQUVHO0FBQ0gsTUFBTSxDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsR0FBRyxvQkFBb0IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUV6RTs7Ozs7R0FLRztBQUNILE1BQU0sVUFBVSxnQ0FBZ0MsQ0FDL0MsT0FBZ0Q7SUFFaEQsT0FBTyxTQUFTLENBQUMsRUFBRSxHQUFHLGNBQWMsRUFBRSxHQUFHLE9BQU8sRUFBRSxDQUFDLENBQUM7QUFDckQsQ0FBQztBQUVEOzs7O0dBSUc7QUFLSCxNQUFNLE9BQU8sc0JBQXNCO0lBSm5DO1FBS1UsbUJBQWMsR0FBRyxRQUFRLEVBQUUsQ0FBQztRQUM1QixXQUFNLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0tBMkJwQztJQXpCQTs7Ozs7Ozs7T0FRRztJQUNILFNBQVMsQ0FDUixLQUFhLEVBQ2IsSUFBaUMsRUFDakMsS0FBK0MsRUFDL0MsTUFBZTtRQUVmLElBQUksQ0FBQztZQUNKLE9BQU8sSUFBSSxJQUFJLENBQUMsa0JBQWtCLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7Z0JBQ3pELEdBQUcsSUFBSSxDQUFDLGNBQWM7Z0JBQ3RCLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQzthQUMzQixDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN4QixDQUFDO1FBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztZQUNaLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakIsT0FBTyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDekIsQ0FBQztJQUNGLENBQUM7OEdBNUJXLHNCQUFzQjs0R0FBdEIsc0JBQXNCOzsyRkFBdEIsc0JBQXNCO2tCQUpsQyxJQUFJO21CQUFDO29CQUNMLElBQUksRUFBRSxvQkFBb0I7b0JBQzFCLFVBQVUsRUFBRSxJQUFJO2lCQUNoQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG5cdGluamVjdCxcblx0TE9DQUxFX0lELFxuXHRQaXBlLFxuXHR0eXBlIFBpcGVUcmFuc2Zvcm0sXG5cdHR5cGUgUHJvdmlkZXIsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgY3JlYXRlSW5qZWN0aW9uVG9rZW4gfSBmcm9tICduZ3h0ZW5zaW9uL2NyZWF0ZS1pbmplY3Rpb24tdG9rZW4nO1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5jb25zdCBkZWZhdWx0T3B0aW9uczogSW50bC5SZWxhdGl2ZVRpbWVGb3JtYXRPcHRpb25zID0ge1xuXHRsb2NhbGVNYXRjaGVyOiAnYmVzdCBmaXQnLCAvLyBvdGhlciB2YWx1ZXM6IFwibG9va3VwXCJcblx0bnVtZXJpYzogJ2Fsd2F5cycsIC8vIG90aGVyIHZhbHVlczogXCJhdXRvXCJcblx0c3R5bGU6ICdsb25nJywgLy8gb3RoZXIgdmFsdWVzOiBcInNob3J0XCIgb3IgXCJuYXJyb3dcIlxufTtcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuY29uc3QgW2luamVjdEZuLCBwcm92aWRlRm5dID0gY3JlYXRlSW5qZWN0aW9uVG9rZW4oKCkgPT4gZGVmYXVsdE9wdGlvbnMpO1xuXG4vKipcbiAqIFByb3ZpZGVzIGEgd2F5IHRvIGluamVjdCB0aGUgb3B0aW9ucyBmb3IgdGhlIFJlbGF0aXZlVGltZUZvcm1hdFBpcGUuXG4gKiBAcGFyYW0gb3B0aW9ucyBUaGUgb3B0aW9ucyB0byB1c2UgZm9yIHRoZSBSZWxhdGl2ZVRpbWVGb3JtYXRQaXBlLlxuICpcbiAqIEByZXR1cm5zIFRoZSBwcm92aWRlciBmb3IgdGhlIFJlbGF0aXZlVGltZUZvcm1hdFBpcGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlUmVsYXRpdmVUaW1lRm9ybWF0T3B0aW9ucyhcblx0b3B0aW9uczogUGFydGlhbDxJbnRsLlJlbGF0aXZlVGltZUZvcm1hdE9wdGlvbnM+LFxuKTogUHJvdmlkZXIge1xuXHRyZXR1cm4gcHJvdmlkZUZuKHsgLi4uZGVmYXVsdE9wdGlvbnMsIC4uLm9wdGlvbnMgfSk7XG59XG5cbi8qKlxuICogVGhpcyBwaXBlIGlzIGEgd3JhcHBlciBhcm91bmQgdGhlIFtJbnRsLlJlbGF0aXZlVGltZUZvcm1hdF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvSW50bC9SZWxhdGl2ZVRpbWVGb3JtYXQpIEFQSS5cbiAqXG4gKiBAcmV0dXJucyBUaGUgcmVsYXRpdmUgdGltZSBmb3JtYXQgb2YgdGhlIHZhbHVlIG9yIHRoZSB2YWx1ZSBhcyBpdCBpcyBpbiBjYXNlIG9mIGVycm9ycy5cbiAqL1xuQFBpcGUoe1xuXHRuYW1lOiAncmVsYXRpdmVUaW1lRm9ybWF0Jyxcblx0c3RhbmRhbG9uZTogdHJ1ZSxcbn0pXG5leHBvcnQgY2xhc3MgUmVsYXRpdmVUaW1lRm9ybWF0UGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuXHRyZWFkb25seSBkZWZhdWx0T3B0aW9ucyA9IGluamVjdEZuKCk7XG5cdHJlYWRvbmx5IGxvY2FsZSA9IGluamVjdChMT0NBTEVfSUQpO1xuXG5cdC8qKlxuXHQgKiBUcmFuc2Zvcm1zIHRoZSB2YWx1ZSBpbnRvIGEgcmVsYXRpdmUgdGltZSBmb3JtYXQuXG5cdCAqXG5cdCAqIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgdG8gZm9ybWF0LlxuXHQgKiBAcGFyYW0gdW5pdCBUaGUgdW5pdCBvZiB0aGUgdmFsdWUuXG5cdCAqIEBwYXJhbSBzdHlsZSBPcHRpb25hbCwgdGhlIGZvcm1hdHRpbmcgc3R5bGUgdG8gdXNlLlxuXHQgKiBAcGFyYW0gbG9jYWxlIE9wdGlvbmFsLCB0aGUgbG9jYWxlIHRvIHVzZSBmb3IgdGhlIGZvcm1hdHRpbmcuXG5cdCAqIEByZXR1cm5zIFRoZSByZWxhdGl2ZSB0aW1lIGZvcm1hdCBvZiB0aGUgdmFsdWUgb3IgdGhlIHZhbHVlIGFzIGl0IGlzIGluIGNhc2Ugb2YgZXJyb3JzLlxuXHQgKi9cblx0dHJhbnNmb3JtKFxuXHRcdHZhbHVlOiBudW1iZXIsXG5cdFx0dW5pdDogSW50bC5SZWxhdGl2ZVRpbWVGb3JtYXRVbml0LFxuXHRcdHN0eWxlPzogSW50bC5SZWxhdGl2ZVRpbWVGb3JtYXRPcHRpb25zWydzdHlsZSddLFxuXHRcdGxvY2FsZT86IHN0cmluZyxcblx0KTogUmV0dXJuVHlwZTxJbnRsLlJlbGF0aXZlVGltZUZvcm1hdFsnZm9ybWF0J10+IHtcblx0XHR0cnkge1xuXHRcdFx0cmV0dXJuIG5ldyBJbnRsLlJlbGF0aXZlVGltZUZvcm1hdChsb2NhbGUgfHwgdGhpcy5sb2NhbGUsIHtcblx0XHRcdFx0Li4udGhpcy5kZWZhdWx0T3B0aW9ucyxcblx0XHRcdFx0Li4uKHN0eWxlID8geyBzdHlsZSB9IDoge30pLFxuXHRcdFx0fSkuZm9ybWF0KHZhbHVlLCB1bml0KTtcblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKGUpO1xuXHRcdFx0cmV0dXJuIHZhbHVlLnRvU3RyaW5nKCk7XG5cdFx0fVxuXHR9XG59XG4iXX0=