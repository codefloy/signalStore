import { inject, LOCALE_ID, Pipe, } from '@angular/core';
import { createInjectionToken } from 'ngxtension/create-injection-token';
import * as i0 from "@angular/core";
/**
 * @internal
 */
const defaultOptions = {
    style: 'long',
    type: 'conjunction',
};
/**
 * @internal
 */
const [injectFn, provideFn] = createInjectionToken(() => defaultOptions);
/**
 * Provides a way to inject the options for the ListFormatPipe.
 *
 * @param options The options to use for the ListFormatPipe.
 * @returns The provider for the ListFormatPipe.
 */
export function provideListFormatOptions(options) {
    return provideFn({ ...defaultOptions, ...options });
}
/**
 * This pipe is a wrapper around the [Intl.ListFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat) API.
 *
 * @returns The formatted list of values or the list as string in case of errors.
 */
export class ListFormatPipe {
    constructor() {
        this.defaultOptions = injectFn();
        this.locale = inject(LOCALE_ID);
    }
    /**
     * Transforms the list of values into a formatted string.
     *
     * @param value The list of values to format.
     * @param style Optional. The formatting style to use. Defaults to "long".
     * @param locale Optional. The locale to use for the transformation. Defaults to LOCALE_ID.
     * @returns The formatted list of values or the list as string in case of errors.
     */
    transform(value, style, locale) {
        try {
            return new Intl.ListFormat(locale || this.locale, {
                ...this.defaultOptions,
                ...(style ? { style } : {}),
            }).format(Array.from(value));
        }
        catch (e) {
            console.error(e);
            return Array.from(value).join(', ');
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: ListFormatPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "18.0.3", ngImport: i0, type: ListFormatPipe, isStandalone: true, name: "listFormat" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: ListFormatPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'listFormat',
                    standalone: true,
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC1mb3JtYXQucGlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2xpYnMvbmd4dGVuc2lvbi9pbnRsL3NyYy9saXN0LWZvcm1hdC5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTixNQUFNLEVBQ04sU0FBUyxFQUNULElBQUksR0FHSixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQzs7QUFFekU7O0dBRUc7QUFDSCxNQUFNLGNBQWMsR0FBMkI7SUFDOUMsS0FBSyxFQUFFLE1BQU07SUFDYixJQUFJLEVBQUUsYUFBYTtDQUNuQixDQUFDO0FBRUY7O0dBRUc7QUFDSCxNQUFNLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxHQUFHLG9CQUFvQixDQUFDLEdBQUcsRUFBRSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBRXpFOzs7OztHQUtHO0FBQ0gsTUFBTSxVQUFVLHdCQUF3QixDQUN2QyxPQUF3QztJQUV4QyxPQUFPLFNBQVMsQ0FBQyxFQUFFLEdBQUcsY0FBYyxFQUFFLEdBQUcsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNyRCxDQUFDO0FBRUQ7Ozs7R0FJRztBQUtILE1BQU0sT0FBTyxjQUFjO0lBSjNCO1FBS1UsbUJBQWMsR0FBRyxRQUFRLEVBQUUsQ0FBQztRQUM1QixXQUFNLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0tBeUJwQztJQXZCQTs7Ozs7OztPQU9HO0lBQ0gsU0FBUyxDQUNSLEtBQXVCLEVBQ3ZCLEtBQXVDLEVBQ3ZDLE1BQTBCO1FBRTFCLElBQUksQ0FBQztZQUNKLE9BQU8sSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO2dCQUNqRCxHQUFHLElBQUksQ0FBQyxjQUFjO2dCQUN0QixHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7YUFDM0IsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDOUIsQ0FBQztRQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7WUFDWixPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2pCLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckMsQ0FBQztJQUNGLENBQUM7OEdBMUJXLGNBQWM7NEdBQWQsY0FBYzs7MkZBQWQsY0FBYztrQkFKMUIsSUFBSTttQkFBQztvQkFDTCxJQUFJLEVBQUUsWUFBWTtvQkFDbEIsVUFBVSxFQUFFLElBQUk7aUJBQ2hCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0aW5qZWN0LFxuXHRMT0NBTEVfSUQsXG5cdFBpcGUsXG5cdHR5cGUgUGlwZVRyYW5zZm9ybSxcblx0dHlwZSBQcm92aWRlcixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBjcmVhdGVJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ25neHRlbnNpb24vY3JlYXRlLWluamVjdGlvbi10b2tlbic7XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmNvbnN0IGRlZmF1bHRPcHRpb25zOiBJbnRsLkxpc3RGb3JtYXRPcHRpb25zID0ge1xuXHRzdHlsZTogJ2xvbmcnLFxuXHR0eXBlOiAnY29uanVuY3Rpb24nLFxufTtcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuY29uc3QgW2luamVjdEZuLCBwcm92aWRlRm5dID0gY3JlYXRlSW5qZWN0aW9uVG9rZW4oKCkgPT4gZGVmYXVsdE9wdGlvbnMpO1xuXG4vKipcbiAqIFByb3ZpZGVzIGEgd2F5IHRvIGluamVjdCB0aGUgb3B0aW9ucyBmb3IgdGhlIExpc3RGb3JtYXRQaXBlLlxuICpcbiAqIEBwYXJhbSBvcHRpb25zIFRoZSBvcHRpb25zIHRvIHVzZSBmb3IgdGhlIExpc3RGb3JtYXRQaXBlLlxuICogQHJldHVybnMgVGhlIHByb3ZpZGVyIGZvciB0aGUgTGlzdEZvcm1hdFBpcGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlTGlzdEZvcm1hdE9wdGlvbnMoXG5cdG9wdGlvbnM6IFBhcnRpYWw8SW50bC5MaXN0Rm9ybWF0T3B0aW9ucz4sXG4pOiBQcm92aWRlciB7XG5cdHJldHVybiBwcm92aWRlRm4oeyAuLi5kZWZhdWx0T3B0aW9ucywgLi4ub3B0aW9ucyB9KTtcbn1cblxuLyoqXG4gKiBUaGlzIHBpcGUgaXMgYSB3cmFwcGVyIGFyb3VuZCB0aGUgW0ludGwuTGlzdEZvcm1hdF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvSW50bC9MaXN0Rm9ybWF0KSBBUEkuXG4gKlxuICogQHJldHVybnMgVGhlIGZvcm1hdHRlZCBsaXN0IG9mIHZhbHVlcyBvciB0aGUgbGlzdCBhcyBzdHJpbmcgaW4gY2FzZSBvZiBlcnJvcnMuXG4gKi9cbkBQaXBlKHtcblx0bmFtZTogJ2xpc3RGb3JtYXQnLFxuXHRzdGFuZGFsb25lOiB0cnVlLFxufSlcbmV4cG9ydCBjbGFzcyBMaXN0Rm9ybWF0UGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuXHRyZWFkb25seSBkZWZhdWx0T3B0aW9ucyA9IGluamVjdEZuKCk7XG5cdHJlYWRvbmx5IGxvY2FsZSA9IGluamVjdChMT0NBTEVfSUQpO1xuXG5cdC8qKlxuXHQgKiBUcmFuc2Zvcm1zIHRoZSBsaXN0IG9mIHZhbHVlcyBpbnRvIGEgZm9ybWF0dGVkIHN0cmluZy5cblx0ICpcblx0ICogQHBhcmFtIHZhbHVlIFRoZSBsaXN0IG9mIHZhbHVlcyB0byBmb3JtYXQuXG5cdCAqIEBwYXJhbSBzdHlsZSBPcHRpb25hbC4gVGhlIGZvcm1hdHRpbmcgc3R5bGUgdG8gdXNlLiBEZWZhdWx0cyB0byBcImxvbmdcIi5cblx0ICogQHBhcmFtIGxvY2FsZSBPcHRpb25hbC4gVGhlIGxvY2FsZSB0byB1c2UgZm9yIHRoZSB0cmFuc2Zvcm1hdGlvbi4gRGVmYXVsdHMgdG8gTE9DQUxFX0lELlxuXHQgKiBAcmV0dXJucyBUaGUgZm9ybWF0dGVkIGxpc3Qgb2YgdmFsdWVzIG9yIHRoZSBsaXN0IGFzIHN0cmluZyBpbiBjYXNlIG9mIGVycm9ycy5cblx0ICovXG5cdHRyYW5zZm9ybShcblx0XHR2YWx1ZTogSXRlcmFibGU8c3RyaW5nPixcblx0XHRzdHlsZT86IEludGwuTGlzdEZvcm1hdE9wdGlvbnNbJ3N0eWxlJ10sXG5cdFx0bG9jYWxlPzogc3RyaW5nIHwgc3RyaW5nW10sXG5cdCk6IHN0cmluZyB7XG5cdFx0dHJ5IHtcblx0XHRcdHJldHVybiBuZXcgSW50bC5MaXN0Rm9ybWF0KGxvY2FsZSB8fCB0aGlzLmxvY2FsZSwge1xuXHRcdFx0XHQuLi50aGlzLmRlZmF1bHRPcHRpb25zLFxuXHRcdFx0XHQuLi4oc3R5bGUgPyB7IHN0eWxlIH0gOiB7fSksXG5cdFx0XHR9KS5mb3JtYXQoQXJyYXkuZnJvbSh2YWx1ZSkpO1xuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoZSk7XG5cdFx0XHRyZXR1cm4gQXJyYXkuZnJvbSh2YWx1ZSkuam9pbignLCAnKTtcblx0XHR9XG5cdH1cbn1cbiJdfQ==