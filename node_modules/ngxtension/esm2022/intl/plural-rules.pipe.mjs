import { inject, LOCALE_ID, Pipe, } from '@angular/core';
import { createInjectionToken } from 'ngxtension/create-injection-token';
import * as i0 from "@angular/core";
/**
 * @internal
 */
const defaultOptions = {
    localeMatcher: 'best fit', // other values: "lookup",
    type: 'cardinal', // other values: "ordinal"
};
/**
 * @internal
 */
const [injectFn, provideFn] = createInjectionToken(() => defaultOptions);
/**
 * Provides a way to inject the options for the PluralRules.
 *
 * @param options The options to use for the PluralRules.
 * @returns The provider for the PluralRules.
 */
export function providePluralRulesOptions(options) {
    return provideFn({ ...defaultOptions, ...options });
}
/**
 * This pipe is a wrapper around the [Intl.PluralRules](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules) API.
 * It takes a value and returns the plural category for that value.
 *
 * @returns The plural category for the value or the value as string in case of errors.
 */
export class PluralRulesPipe {
    constructor() {
        this.defaultOptions = injectFn();
        this.locale = inject(LOCALE_ID);
    }
    /**
     * Transforms the value into a plural category.
     *
     * @param value The value to transform.
     * @param locale Optional, the locale to use for the formatting.
     * @returns The plural category for the value or the value as string in case of errors.
     */
    transform(value, locale) {
        try {
            return new Intl.PluralRules(locale || this.locale, this.defaultOptions).select(value);
        }
        catch (e) {
            console.error(e);
            return String(value);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: PluralRulesPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "18.0.3", ngImport: i0, type: PluralRulesPipe, isStandalone: true, name: "pluralRules" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: PluralRulesPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'pluralRules',
                    standalone: true,
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGx1cmFsLXJ1bGVzLnBpcGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL25neHRlbnNpb24vaW50bC9zcmMvcGx1cmFsLXJ1bGVzLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNOLE1BQU0sRUFDTixTQUFTLEVBQ1QsSUFBSSxHQUdKLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLG1DQUFtQyxDQUFDOztBQUV6RTs7R0FFRztBQUNILE1BQU0sY0FBYyxHQUE0QjtJQUMvQyxhQUFhLEVBQUUsVUFBVSxFQUFFLDBCQUEwQjtJQUNyRCxJQUFJLEVBQUUsVUFBVSxFQUFFLDBCQUEwQjtDQUM1QyxDQUFDO0FBRUY7O0dBRUc7QUFDSCxNQUFNLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxHQUFHLG9CQUFvQixDQUFDLEdBQUcsRUFBRSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBRXpFOzs7OztHQUtHO0FBQ0gsTUFBTSxVQUFVLHlCQUF5QixDQUN4QyxPQUF5QztJQUV6QyxPQUFPLFNBQVMsQ0FBQyxFQUFFLEdBQUcsY0FBYyxFQUFFLEdBQUcsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNyRCxDQUFDO0FBRUQ7Ozs7O0dBS0c7QUFLSCxNQUFNLE9BQU8sZUFBZTtJQUo1QjtRQUtVLG1CQUFjLEdBQUcsUUFBUSxFQUFFLENBQUM7UUFDNUIsV0FBTSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztLQXVCcEM7SUFyQkE7Ozs7OztPQU1HO0lBQ0gsU0FBUyxDQUNSLEtBQWEsRUFDYixNQUFlO1FBRWYsSUFBSSxDQUFDO1lBQ0osT0FBTyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQzFCLE1BQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxFQUNyQixJQUFJLENBQUMsY0FBYyxDQUNuQixDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNqQixDQUFDO1FBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztZQUNaLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakIsT0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdEIsQ0FBQztJQUNGLENBQUM7OEdBeEJXLGVBQWU7NEdBQWYsZUFBZTs7MkZBQWYsZUFBZTtrQkFKM0IsSUFBSTttQkFBQztvQkFDTCxJQUFJLEVBQUUsYUFBYTtvQkFDbkIsVUFBVSxFQUFFLElBQUk7aUJBQ2hCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0aW5qZWN0LFxuXHRMT0NBTEVfSUQsXG5cdFBpcGUsXG5cdHR5cGUgUGlwZVRyYW5zZm9ybSxcblx0dHlwZSBQcm92aWRlcixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBjcmVhdGVJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ25neHRlbnNpb24vY3JlYXRlLWluamVjdGlvbi10b2tlbic7XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmNvbnN0IGRlZmF1bHRPcHRpb25zOiBJbnRsLlBsdXJhbFJ1bGVzT3B0aW9ucyA9IHtcblx0bG9jYWxlTWF0Y2hlcjogJ2Jlc3QgZml0JywgLy8gb3RoZXIgdmFsdWVzOiBcImxvb2t1cFwiLFxuXHR0eXBlOiAnY2FyZGluYWwnLCAvLyBvdGhlciB2YWx1ZXM6IFwib3JkaW5hbFwiXG59O1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5jb25zdCBbaW5qZWN0Rm4sIHByb3ZpZGVGbl0gPSBjcmVhdGVJbmplY3Rpb25Ub2tlbigoKSA9PiBkZWZhdWx0T3B0aW9ucyk7XG5cbi8qKlxuICogUHJvdmlkZXMgYSB3YXkgdG8gaW5qZWN0IHRoZSBvcHRpb25zIGZvciB0aGUgUGx1cmFsUnVsZXMuXG4gKlxuICogQHBhcmFtIG9wdGlvbnMgVGhlIG9wdGlvbnMgdG8gdXNlIGZvciB0aGUgUGx1cmFsUnVsZXMuXG4gKiBAcmV0dXJucyBUaGUgcHJvdmlkZXIgZm9yIHRoZSBQbHVyYWxSdWxlcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByb3ZpZGVQbHVyYWxSdWxlc09wdGlvbnMoXG5cdG9wdGlvbnM6IFBhcnRpYWw8SW50bC5QbHVyYWxSdWxlc09wdGlvbnM+LFxuKTogUHJvdmlkZXIge1xuXHRyZXR1cm4gcHJvdmlkZUZuKHsgLi4uZGVmYXVsdE9wdGlvbnMsIC4uLm9wdGlvbnMgfSk7XG59XG5cbi8qKlxuICogVGhpcyBwaXBlIGlzIGEgd3JhcHBlciBhcm91bmQgdGhlIFtJbnRsLlBsdXJhbFJ1bGVzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9JbnRsL1BsdXJhbFJ1bGVzKSBBUEkuXG4gKiBJdCB0YWtlcyBhIHZhbHVlIGFuZCByZXR1cm5zIHRoZSBwbHVyYWwgY2F0ZWdvcnkgZm9yIHRoYXQgdmFsdWUuXG4gKlxuICogQHJldHVybnMgVGhlIHBsdXJhbCBjYXRlZ29yeSBmb3IgdGhlIHZhbHVlIG9yIHRoZSB2YWx1ZSBhcyBzdHJpbmcgaW4gY2FzZSBvZiBlcnJvcnMuXG4gKi9cbkBQaXBlKHtcblx0bmFtZTogJ3BsdXJhbFJ1bGVzJyxcblx0c3RhbmRhbG9uZTogdHJ1ZSxcbn0pXG5leHBvcnQgY2xhc3MgUGx1cmFsUnVsZXNQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG5cdHJlYWRvbmx5IGRlZmF1bHRPcHRpb25zID0gaW5qZWN0Rm4oKTtcblx0cmVhZG9ubHkgbG9jYWxlID0gaW5qZWN0KExPQ0FMRV9JRCk7XG5cblx0LyoqXG5cdCAqIFRyYW5zZm9ybXMgdGhlIHZhbHVlIGludG8gYSBwbHVyYWwgY2F0ZWdvcnkuXG5cdCAqXG5cdCAqIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgdG8gdHJhbnNmb3JtLlxuXHQgKiBAcGFyYW0gbG9jYWxlIE9wdGlvbmFsLCB0aGUgbG9jYWxlIHRvIHVzZSBmb3IgdGhlIGZvcm1hdHRpbmcuXG5cdCAqIEByZXR1cm5zIFRoZSBwbHVyYWwgY2F0ZWdvcnkgZm9yIHRoZSB2YWx1ZSBvciB0aGUgdmFsdWUgYXMgc3RyaW5nIGluIGNhc2Ugb2YgZXJyb3JzLlxuXHQgKi9cblx0dHJhbnNmb3JtKFxuXHRcdHZhbHVlOiBudW1iZXIsXG5cdFx0bG9jYWxlPzogc3RyaW5nLFxuXHQpOiBSZXR1cm5UeXBlPEludGwuUGx1cmFsUnVsZXNbJ3NlbGVjdCddPiB8IHN0cmluZyB7XG5cdFx0dHJ5IHtcblx0XHRcdHJldHVybiBuZXcgSW50bC5QbHVyYWxSdWxlcyhcblx0XHRcdFx0bG9jYWxlIHx8IHRoaXMubG9jYWxlLFxuXHRcdFx0XHR0aGlzLmRlZmF1bHRPcHRpb25zLFxuXHRcdFx0KS5zZWxlY3QodmFsdWUpO1xuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoZSk7XG5cdFx0XHRyZXR1cm4gU3RyaW5nKHZhbHVlKTtcblx0XHR9XG5cdH1cbn1cbiJdfQ==