import { inject, LOCALE_ID, Pipe, } from '@angular/core';
import { createInjectionToken } from 'ngxtension/create-injection-token';
import * as i0 from "@angular/core";
/**
 * @internal
 */
const defaultOptions = {
    style: 'short',
    localeMatcher: 'lookup',
    fallback: 'code',
};
/**
 * @internal
 */
const [injectFn, provideFn] = createInjectionToken(() => defaultOptions);
/**
 * Provides a way to inject the options for the DisplayNamesPipe.
 *
 * @param options The options to use for the DisplayNamesPipe.
 * @returns The provider for the DisplayNamesPipe.
 */
export function provideDisplayNamesOptions(options) {
    return provideFn({ ...defaultOptions, ...options });
}
/**
 * This pipe is a wrapper around the [Intl.DisplayNames](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames) API.
 *
 * @returns The display name of the code or the code as it is in case of errors.
 */
export class DisplayNamesPipe {
    constructor() {
        this.defaultOptions = injectFn();
        this.locale = inject(LOCALE_ID);
    }
    /**
     * Displays the name of the given code in the given locale.
     *
     * @param code The code to transform.
     * @param type DisplayNamesType to use.
     * @param style Optional. The formatting style to use. Defaults to "short".
     * @param locale Optional. The locale to use for the transformation. Defaults to LOCALE_ID.
     * @returns The name of the given code in the given locale or the code itself if the name could not be found.
     */
    transform(code, type, style, locale) {
        try {
            return new Intl.DisplayNames(locale || this.locale, {
                ...this.defaultOptions,
                type,
                ...(style ? { style } : {}),
            }).of(code);
        }
        catch (e) {
            console.error(e);
            return code;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: DisplayNamesPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "18.0.3", ngImport: i0, type: DisplayNamesPipe, isStandalone: true, name: "displayNames" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: DisplayNamesPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'displayNames',
                    standalone: true,
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlzcGxheS1uYW1lcy5waXBlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbGlicy9uZ3h0ZW5zaW9uL2ludGwvc3JjL2Rpc3BsYXktbmFtZXMucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ04sTUFBTSxFQUNOLFNBQVMsRUFDVCxJQUFJLEdBR0osTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7O0FBSXpFOztHQUVHO0FBQ0gsTUFBTSxjQUFjLEdBQXdCO0lBQzNDLEtBQUssRUFBRSxPQUFPO0lBQ2QsYUFBYSxFQUFFLFFBQVE7SUFDdkIsUUFBUSxFQUFFLE1BQU07Q0FDaEIsQ0FBQztBQUVGOztHQUVHO0FBQ0gsTUFBTSxDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsR0FBRyxvQkFBb0IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUV6RTs7Ozs7R0FLRztBQUNILE1BQU0sVUFBVSwwQkFBMEIsQ0FDekMsT0FBcUM7SUFFckMsT0FBTyxTQUFTLENBQUMsRUFBRSxHQUFHLGNBQWMsRUFBRSxHQUFHLE9BQU8sRUFBRSxDQUFDLENBQUM7QUFDckQsQ0FBQztBQUVEOzs7O0dBSUc7QUFLSCxNQUFNLE9BQU8sZ0JBQWdCO0lBSjdCO1FBS1UsbUJBQWMsR0FBRyxRQUFRLEVBQUUsQ0FBQztRQUM1QixXQUFNLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0tBNEJwQztJQTFCQTs7Ozs7Ozs7T0FRRztJQUNILFNBQVMsQ0FDUixJQUFZLEVBQ1osSUFBMkIsRUFDM0IsS0FBeUMsRUFDekMsTUFBMEI7UUFFMUIsSUFBSSxDQUFDO1lBQ0osT0FBTyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7Z0JBQ25ELEdBQUcsSUFBSSxDQUFDLGNBQWM7Z0JBQ3RCLElBQUk7Z0JBQ0osR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO2FBQzNCLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDYixDQUFDO1FBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztZQUNaLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakIsT0FBTyxJQUFJLENBQUM7UUFDYixDQUFDO0lBQ0YsQ0FBQzs4R0E3QlcsZ0JBQWdCOzRHQUFoQixnQkFBZ0I7OzJGQUFoQixnQkFBZ0I7a0JBSjVCLElBQUk7bUJBQUM7b0JBQ0wsSUFBSSxFQUFFLGNBQWM7b0JBQ3BCLFVBQVUsRUFBRSxJQUFJO2lCQUNoQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG5cdGluamVjdCxcblx0TE9DQUxFX0lELFxuXHRQaXBlLFxuXHR0eXBlIFBpcGVUcmFuc2Zvcm0sXG5cdHR5cGUgUHJvdmlkZXIsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgY3JlYXRlSW5qZWN0aW9uVG9rZW4gfSBmcm9tICduZ3h0ZW5zaW9uL2NyZWF0ZS1pbmplY3Rpb24tdG9rZW4nO1xuXG50eXBlIERpc3BsYXlOYW1lc09wdGlvbnMgPSBPbWl0PEludGwuRGlzcGxheU5hbWVzT3B0aW9ucywgJ3R5cGUnPjtcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuY29uc3QgZGVmYXVsdE9wdGlvbnM6IERpc3BsYXlOYW1lc09wdGlvbnMgPSB7XG5cdHN0eWxlOiAnc2hvcnQnLFxuXHRsb2NhbGVNYXRjaGVyOiAnbG9va3VwJyxcblx0ZmFsbGJhY2s6ICdjb2RlJyxcbn07XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmNvbnN0IFtpbmplY3RGbiwgcHJvdmlkZUZuXSA9IGNyZWF0ZUluamVjdGlvblRva2VuKCgpID0+IGRlZmF1bHRPcHRpb25zKTtcblxuLyoqXG4gKiBQcm92aWRlcyBhIHdheSB0byBpbmplY3QgdGhlIG9wdGlvbnMgZm9yIHRoZSBEaXNwbGF5TmFtZXNQaXBlLlxuICpcbiAqIEBwYXJhbSBvcHRpb25zIFRoZSBvcHRpb25zIHRvIHVzZSBmb3IgdGhlIERpc3BsYXlOYW1lc1BpcGUuXG4gKiBAcmV0dXJucyBUaGUgcHJvdmlkZXIgZm9yIHRoZSBEaXNwbGF5TmFtZXNQaXBlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJvdmlkZURpc3BsYXlOYW1lc09wdGlvbnMoXG5cdG9wdGlvbnM6IFBhcnRpYWw8RGlzcGxheU5hbWVzT3B0aW9ucz4sXG4pOiBQcm92aWRlciB7XG5cdHJldHVybiBwcm92aWRlRm4oeyAuLi5kZWZhdWx0T3B0aW9ucywgLi4ub3B0aW9ucyB9KTtcbn1cblxuLyoqXG4gKiBUaGlzIHBpcGUgaXMgYSB3cmFwcGVyIGFyb3VuZCB0aGUgW0ludGwuRGlzcGxheU5hbWVzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9JbnRsL0Rpc3BsYXlOYW1lcykgQVBJLlxuICpcbiAqIEByZXR1cm5zIFRoZSBkaXNwbGF5IG5hbWUgb2YgdGhlIGNvZGUgb3IgdGhlIGNvZGUgYXMgaXQgaXMgaW4gY2FzZSBvZiBlcnJvcnMuXG4gKi9cbkBQaXBlKHtcblx0bmFtZTogJ2Rpc3BsYXlOYW1lcycsXG5cdHN0YW5kYWxvbmU6IHRydWUsXG59KVxuZXhwb3J0IGNsYXNzIERpc3BsYXlOYW1lc1BpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcblx0cmVhZG9ubHkgZGVmYXVsdE9wdGlvbnMgPSBpbmplY3RGbigpO1xuXHRyZWFkb25seSBsb2NhbGUgPSBpbmplY3QoTE9DQUxFX0lEKTtcblxuXHQvKipcblx0ICogRGlzcGxheXMgdGhlIG5hbWUgb2YgdGhlIGdpdmVuIGNvZGUgaW4gdGhlIGdpdmVuIGxvY2FsZS5cblx0ICpcblx0ICogQHBhcmFtIGNvZGUgVGhlIGNvZGUgdG8gdHJhbnNmb3JtLlxuXHQgKiBAcGFyYW0gdHlwZSBEaXNwbGF5TmFtZXNUeXBlIHRvIHVzZS5cblx0ICogQHBhcmFtIHN0eWxlIE9wdGlvbmFsLiBUaGUgZm9ybWF0dGluZyBzdHlsZSB0byB1c2UuIERlZmF1bHRzIHRvIFwic2hvcnRcIi5cblx0ICogQHBhcmFtIGxvY2FsZSBPcHRpb25hbC4gVGhlIGxvY2FsZSB0byB1c2UgZm9yIHRoZSB0cmFuc2Zvcm1hdGlvbi4gRGVmYXVsdHMgdG8gTE9DQUxFX0lELlxuXHQgKiBAcmV0dXJucyBUaGUgbmFtZSBvZiB0aGUgZ2l2ZW4gY29kZSBpbiB0aGUgZ2l2ZW4gbG9jYWxlIG9yIHRoZSBjb2RlIGl0c2VsZiBpZiB0aGUgbmFtZSBjb3VsZCBub3QgYmUgZm91bmQuXG5cdCAqL1xuXHR0cmFuc2Zvcm0oXG5cdFx0Y29kZTogc3RyaW5nLFxuXHRcdHR5cGU6IEludGwuRGlzcGxheU5hbWVzVHlwZSxcblx0XHRzdHlsZT86IEludGwuRGlzcGxheU5hbWVzT3B0aW9uc1snc3R5bGUnXSxcblx0XHRsb2NhbGU/OiBzdHJpbmcgfCBzdHJpbmdbXSxcblx0KTogUmV0dXJuVHlwZTxJbnRsLkRpc3BsYXlOYW1lc1snb2YnXT4ge1xuXHRcdHRyeSB7XG5cdFx0XHRyZXR1cm4gbmV3IEludGwuRGlzcGxheU5hbWVzKGxvY2FsZSB8fCB0aGlzLmxvY2FsZSwge1xuXHRcdFx0XHQuLi50aGlzLmRlZmF1bHRPcHRpb25zLFxuXHRcdFx0XHR0eXBlLFxuXHRcdFx0XHQuLi4oc3R5bGUgPyB7IHN0eWxlIH0gOiB7fSksXG5cdFx0XHR9KS5vZihjb2RlKTtcblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKGUpO1xuXHRcdFx0cmV0dXJuIGNvZGU7XG5cdFx0fVxuXHR9XG59XG4iXX0=