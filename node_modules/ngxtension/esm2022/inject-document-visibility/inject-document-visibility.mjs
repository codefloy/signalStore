import { DOCUMENT } from '@angular/common';
import { inject, runInInjectionContext, } from '@angular/core';
import { toSignal } from '@angular/core/rxjs-interop';
import { assertInjector } from 'ngxtension/assert-injector';
import { fromEvent, map, startWith } from 'rxjs';
export function injectDocumentVisibilityStream(options) {
    const injector = assertInjector(injectDocumentVisibilityStream, options?.injector);
    return runInInjectionContext(injector, () => {
        const doc = options?.document ?? inject(DOCUMENT);
        return fromEvent(doc, 'visibilitychange').pipe(startWith(doc.visibilityState), map(() => doc.visibilityState));
    });
}
/**
 * Injects and monitors the current document visibility state. Emits the state initially and then emits on every change.
 *
 * This function is useful for scenarios like tracking user presence on a page (e.g., for analytics or pausing/resuming activities) and is adaptable for use with iframes or in testing environments.
 *
 * @example
 * ```ts
 const visibilityState = injectDocumentVisibility();
 effect(() => {
   console.log(this.visibilityState());
 });
 * ```
 *
 * @param options An optional object with the following properties:
 *   - `document`: (Optional) Specifies a custom `Document` instance. This is useful when working with iframes or in testing environments where the global `document` might not be appropriate.
 *   - `injector`: (Optional) Specifies a custom `Injector` instance for dependency injection. This allows for more flexible and testable code by decoupling from a global state or context.
 *
 * @returns A signal that emits the current `DocumentVisibilityState` (`"visible"`, `"hidden"`, etc.) initially and whenever the document visibility state changes.
 */
export function injectDocumentVisibility(options) {
    const docVisible$ = injectDocumentVisibilityStream(options);
    return toSignal(docVisible$, {
        requireSync: true,
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5qZWN0LWRvY3VtZW50LXZpc2liaWxpdHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL25neHRlbnNpb24vaW5qZWN0LWRvY3VtZW50LXZpc2liaWxpdHkvc3JjL2luamVjdC1kb2N1bWVudC12aXNpYmlsaXR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLEVBRU4sTUFBTSxFQUNOLHFCQUFxQixHQUVyQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzVELE9BQU8sRUFBYyxTQUFTLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQWM3RCxNQUFNLFVBQVUsOEJBQThCLENBQzdDLE9BQXlDO0lBRXpDLE1BQU0sUUFBUSxHQUFHLGNBQWMsQ0FDOUIsOEJBQThCLEVBQzlCLE9BQU8sRUFBRSxRQUFRLENBQ2pCLENBQUM7SUFFRixPQUFPLHFCQUFxQixDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUU7UUFDM0MsTUFBTSxHQUFHLEdBQWEsT0FBTyxFQUFFLFFBQVEsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFNUQsT0FBTyxTQUFTLENBQUMsR0FBRyxFQUFFLGtCQUFrQixDQUFDLENBQUMsSUFBSSxDQUM3QyxTQUFTLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxFQUM5QixHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUM5QixDQUFDO0lBQ0gsQ0FBQyxDQUFDLENBQUM7QUFDSixDQUFDO0FBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQWtCRztBQUNILE1BQU0sVUFBVSx3QkFBd0IsQ0FDdkMsT0FBeUM7SUFFekMsTUFBTSxXQUFXLEdBQ2hCLDhCQUE4QixDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3pDLE9BQU8sUUFBUSxDQUEwQixXQUFXLEVBQUU7UUFDckQsV0FBVyxFQUFFLElBQUk7S0FDakIsQ0FBQyxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7XG5cdEluamVjdG9yLFxuXHRpbmplY3QsXG5cdHJ1bkluSW5qZWN0aW9uQ29udGV4dCxcblx0dHlwZSBTaWduYWwsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgdG9TaWduYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlL3J4anMtaW50ZXJvcCc7XG5pbXBvcnQgeyBhc3NlcnRJbmplY3RvciB9IGZyb20gJ25neHRlbnNpb24vYXNzZXJ0LWluamVjdG9yJztcbmltcG9ydCB7IE9ic2VydmFibGUsIGZyb21FdmVudCwgbWFwLCBzdGFydFdpdGggfSBmcm9tICdyeGpzJztcblxuZXhwb3J0IGludGVyZmFjZSBJbmplY3REb2N1bWVudFZpc2liaWxpdHlPcHRpb25zIHtcblx0Lypcblx0ICogU3BlY2lmeSBhIGN1c3RvbSBgZG9jdW1lbnRgIGluc3RhbmNlLCBlLmcuIHdvcmtpbmcgd2l0aCBpZnJhbWVzIG9yIGluIHRlc3RpbmcgZW52aXJvbm1lbnRzLlxuXHQgKi9cblx0ZG9jdW1lbnQ/OiBEb2N1bWVudDtcblxuXHQvKlxuXHQgKiBTcGVjaWZ5IGEgY3VzdG9tIGBJbmplY3RvcmAgaW5zdGFuY2UgdG8gdXNlIGZvciBkZXBlbmRlbmN5IGluamVjdGlvbi5cblx0ICovXG5cdGluamVjdG9yPzogSW5qZWN0b3I7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbmplY3REb2N1bWVudFZpc2liaWxpdHlTdHJlYW0oXG5cdG9wdGlvbnM/OiBJbmplY3REb2N1bWVudFZpc2liaWxpdHlPcHRpb25zLFxuKTogT2JzZXJ2YWJsZTxEb2N1bWVudFZpc2liaWxpdHlTdGF0ZT4ge1xuXHRjb25zdCBpbmplY3RvciA9IGFzc2VydEluamVjdG9yKFxuXHRcdGluamVjdERvY3VtZW50VmlzaWJpbGl0eVN0cmVhbSxcblx0XHRvcHRpb25zPy5pbmplY3Rvcixcblx0KTtcblxuXHRyZXR1cm4gcnVuSW5JbmplY3Rpb25Db250ZXh0KGluamVjdG9yLCAoKSA9PiB7XG5cdFx0Y29uc3QgZG9jOiBEb2N1bWVudCA9IG9wdGlvbnM/LmRvY3VtZW50ID8/IGluamVjdChET0NVTUVOVCk7XG5cblx0XHRyZXR1cm4gZnJvbUV2ZW50KGRvYywgJ3Zpc2liaWxpdHljaGFuZ2UnKS5waXBlKFxuXHRcdFx0c3RhcnRXaXRoKGRvYy52aXNpYmlsaXR5U3RhdGUpLFxuXHRcdFx0bWFwKCgpID0+IGRvYy52aXNpYmlsaXR5U3RhdGUpLFxuXHRcdCk7XG5cdH0pO1xufVxuXG4vKipcbiAqIEluamVjdHMgYW5kIG1vbml0b3JzIHRoZSBjdXJyZW50IGRvY3VtZW50IHZpc2liaWxpdHkgc3RhdGUuIEVtaXRzIHRoZSBzdGF0ZSBpbml0aWFsbHkgYW5kIHRoZW4gZW1pdHMgb24gZXZlcnkgY2hhbmdlLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZnVsIGZvciBzY2VuYXJpb3MgbGlrZSB0cmFja2luZyB1c2VyIHByZXNlbmNlIG9uIGEgcGFnZSAoZS5nLiwgZm9yIGFuYWx5dGljcyBvciBwYXVzaW5nL3Jlc3VtaW5nIGFjdGl2aXRpZXMpIGFuZCBpcyBhZGFwdGFibGUgZm9yIHVzZSB3aXRoIGlmcmFtZXMgb3IgaW4gdGVzdGluZyBlbnZpcm9ubWVudHMuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzXG4gY29uc3QgdmlzaWJpbGl0eVN0YXRlID0gaW5qZWN0RG9jdW1lbnRWaXNpYmlsaXR5KCk7XG4gZWZmZWN0KCgpID0+IHtcbiAgIGNvbnNvbGUubG9nKHRoaXMudmlzaWJpbGl0eVN0YXRlKCkpO1xuIH0pO1xuICogYGBgXG4gKlxuICogQHBhcmFtIG9wdGlvbnMgQW4gb3B0aW9uYWwgb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICogICAtIGBkb2N1bWVudGA6IChPcHRpb25hbCkgU3BlY2lmaWVzIGEgY3VzdG9tIGBEb2N1bWVudGAgaW5zdGFuY2UuIFRoaXMgaXMgdXNlZnVsIHdoZW4gd29ya2luZyB3aXRoIGlmcmFtZXMgb3IgaW4gdGVzdGluZyBlbnZpcm9ubWVudHMgd2hlcmUgdGhlIGdsb2JhbCBgZG9jdW1lbnRgIG1pZ2h0IG5vdCBiZSBhcHByb3ByaWF0ZS5cbiAqICAgLSBgaW5qZWN0b3JgOiAoT3B0aW9uYWwpIFNwZWNpZmllcyBhIGN1c3RvbSBgSW5qZWN0b3JgIGluc3RhbmNlIGZvciBkZXBlbmRlbmN5IGluamVjdGlvbi4gVGhpcyBhbGxvd3MgZm9yIG1vcmUgZmxleGlibGUgYW5kIHRlc3RhYmxlIGNvZGUgYnkgZGVjb3VwbGluZyBmcm9tIGEgZ2xvYmFsIHN0YXRlIG9yIGNvbnRleHQuXG4gKlxuICogQHJldHVybnMgQSBzaWduYWwgdGhhdCBlbWl0cyB0aGUgY3VycmVudCBgRG9jdW1lbnRWaXNpYmlsaXR5U3RhdGVgIChgXCJ2aXNpYmxlXCJgLCBgXCJoaWRkZW5cImAsIGV0Yy4pIGluaXRpYWxseSBhbmQgd2hlbmV2ZXIgdGhlIGRvY3VtZW50IHZpc2liaWxpdHkgc3RhdGUgY2hhbmdlcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluamVjdERvY3VtZW50VmlzaWJpbGl0eShcblx0b3B0aW9ucz86IEluamVjdERvY3VtZW50VmlzaWJpbGl0eU9wdGlvbnMsXG4pOiBTaWduYWw8RG9jdW1lbnRWaXNpYmlsaXR5U3RhdGU+IHtcblx0Y29uc3QgZG9jVmlzaWJsZSQ6IE9ic2VydmFibGU8RG9jdW1lbnRWaXNpYmlsaXR5U3RhdGU+ID1cblx0XHRpbmplY3REb2N1bWVudFZpc2liaWxpdHlTdHJlYW0ob3B0aW9ucyk7XG5cdHJldHVybiB0b1NpZ25hbDxEb2N1bWVudFZpc2liaWxpdHlTdGF0ZT4oZG9jVmlzaWJsZSQsIHtcblx0XHRyZXF1aXJlU3luYzogdHJ1ZSxcblx0fSk7XG59XG4iXX0=