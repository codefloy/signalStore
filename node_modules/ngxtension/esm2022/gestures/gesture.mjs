import { ChangeDetectorRef, DestroyRef, ElementRef, NgZone, effect, inject, } from '@angular/core';
import { assertInjector } from 'ngxtension/assert-injector';
import { injectZonelessGesture } from './zoneless-gesture';
export function createGesture(_key, gesture) {
    return function _injectGesture(handler, { injector, config = () => ({}), zoneless } = {}) {
        return assertInjector(_injectGesture, injector, () => {
            const zonelessGesture = injectZonelessGesture();
            const host = inject(ElementRef);
            const zone = inject(NgZone);
            const cdr = inject(ChangeDetectorRef);
            zoneless ??= zonelessGesture;
            const ngHandler = (state) => {
                return handler(Object.assign(state, { cdr }));
            };
            const gestureInstance = zoneless
                ? zone.runOutsideAngular(() => new gesture(host.nativeElement, ngHandler))
                : new gesture(host.nativeElement, ngHandler);
            effect(() => {
                if (zoneless) {
                    zone.runOutsideAngular(() => {
                        // @ts-expect-error typescript knows what the config is but gestureInstance can also set config for multiple gestures
                        gestureInstance.setConfig(config());
                    });
                }
                else {
                    // @ts-expect-error typescript knows what the config is but gestureInstance can also set config for multiple gestures
                    gestureInstance.setConfig(config());
                }
            });
            inject(DestroyRef).onDestroy(gestureInstance.destroy.bind(gestureInstance));
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VzdHVyZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2xpYnMvbmd4dGVuc2lvbi9nZXN0dXJlcy9zcmMvZ2VzdHVyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ04saUJBQWlCLEVBQ2pCLFVBQVUsRUFDVixVQUFVLEVBQ1YsTUFBTSxFQUNOLE1BQU0sRUFDTixNQUFNLEdBR04sTUFBTSxlQUFlLENBQUM7QUFRdkIsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzVELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBa0MzRCxNQUFNLFVBQVUsYUFBYSxDQUczQixJQUFpQixFQUFFLE9BQTBCO0lBSTlDLE9BQU8sU0FBUyxjQUFjLENBQzdCLE9BQU8sRUFDUCxFQUFFLFFBQVEsRUFBRSxNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFO1FBRWhELE9BQU8sY0FBYyxDQUFDLGNBQWMsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFO1lBQ3BELE1BQU0sZUFBZSxHQUFHLHFCQUFxQixFQUFFLENBQUM7WUFDaEQsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBNEIsQ0FBQztZQUMzRCxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDNUIsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUM7WUFFdEMsUUFBUSxLQUFLLGVBQWUsQ0FBQztZQUU3QixNQUFNLFNBQVMsR0FBRyxDQUFDLEtBQW9DLEVBQUUsRUFBRTtnQkFDMUQsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDL0MsQ0FBQyxDQUFDO1lBRUYsTUFBTSxlQUFlLEdBQUcsUUFBUTtnQkFDL0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FDdEIsR0FBRyxFQUFFLENBQUMsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxTQUFTLENBQUMsQ0FDaEQ7Z0JBQ0YsQ0FBQyxDQUFDLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsU0FBUyxDQUFDLENBQUM7WUFFOUMsTUFBTSxDQUFDLEdBQUcsRUFBRTtnQkFDWCxJQUFJLFFBQVEsRUFBRSxDQUFDO29CQUNkLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7d0JBQzNCLHFIQUFxSDt3QkFDckgsZUFBZSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO29CQUNyQyxDQUFDLENBQUMsQ0FBQztnQkFDSixDQUFDO3FCQUFNLENBQUM7b0JBQ1AscUhBQXFIO29CQUNySCxlQUFlLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7Z0JBQ3JDLENBQUM7WUFDRixDQUFDLENBQUMsQ0FBQztZQUVILE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxTQUFTLENBQzNCLGVBQWUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUM3QyxDQUFDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFnRSxDQUFDO0FBQ2xFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuXHRDaGFuZ2VEZXRlY3RvclJlZixcblx0RGVzdHJveVJlZixcblx0RWxlbWVudFJlZixcblx0Tmdab25lLFxuXHRlZmZlY3QsXG5cdGluamVjdCxcblx0dHlwZSBJbmplY3Rvcixcblx0dHlwZSBUeXBlLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB0eXBlIHtcblx0RXZlbnRUeXBlcyxcblx0R2VzdHVyZUtleSxcblx0SGFuZGxlcixcblx0VXNlckdlc3R1cmVDb25maWcsXG59IGZyb20gJ0B1c2UtZ2VzdHVyZS92YW5pbGxhJztcbmltcG9ydCB0eXBlIHsgUmVjb2duaXplciB9IGZyb20gJ0B1c2UtZ2VzdHVyZS92YW5pbGxhL2Rpc3QvZGVjbGFyYXRpb25zL3NyYy9SZWNvZ25pemVyJztcbmltcG9ydCB7IGFzc2VydEluamVjdG9yIH0gZnJvbSAnbmd4dGVuc2lvbi9hc3NlcnQtaW5qZWN0b3InO1xuaW1wb3J0IHsgaW5qZWN0Wm9uZWxlc3NHZXN0dXJlIH0gZnJvbSAnLi96b25lbGVzcy1nZXN0dXJlJztcblxudHlwZSBJbmplY3RHZXN0dXJlRm48XG5cdFRHZXN0dXJlS2V5IGV4dGVuZHMgR2VzdHVyZUtleSxcblx0VEdlc3R1cmVIYW5kbGVyIGV4dGVuZHMgSGFuZGxlcjxUR2VzdHVyZUtleSwgRXZlbnRUeXBlc1tUR2VzdHVyZUtleV0+LFxuXHRUR2VzdHVyZUNvbmZpZyBleHRlbmRzIFVzZXJHZXN0dXJlQ29uZmlnW1RHZXN0dXJlS2V5XSxcbj4gPSB7XG5cdChcblx0XHRoYW5kbGVyOiAoXG5cdFx0XHRzdGF0ZTogUGFyYW1ldGVyczxUR2VzdHVyZUhhbmRsZXI+WzBdICYgeyBjZHI6IENoYW5nZURldGVjdG9yUmVmIH0sXG5cdFx0KSA9PiBSZXR1cm5UeXBlPFRHZXN0dXJlSGFuZGxlcj4sXG5cdFx0b3B0aW9ucz86IHtcblx0XHRcdGluamVjdG9yPzogSW5qZWN0b3I7XG5cdFx0XHR6b25lbGVzcz86IGJvb2xlYW47XG5cdFx0XHRjb25maWc/OiAoKSA9PiBUR2VzdHVyZUNvbmZpZztcblx0XHR9LFxuXHQpOiB2b2lkO1xufTtcblxuZXhwb3J0IHR5cGUgR2VzdHVyZUluZmVyPFRJbmplY3RHZXN0dXJlIGV4dGVuZHMgKC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkPiA9XG5cdFRJbmplY3RHZXN0dXJlIGV4dGVuZHMgSW5qZWN0R2VzdHVyZUZuPFxuXHRcdGluZmVyIF9HZXN0dXJlS2V5LFxuXHRcdGluZmVyIF9HZXN0dXJlSGFuZGxlcixcblx0XHRpbmZlciBHZXN0dXJlQ29uZmlnXG5cdD5cblx0XHQ/IHtcblx0XHRcdFx0a2V5OiBfR2VzdHVyZUtleTtcblx0XHRcdFx0aGFuZGxlcjogX0dlc3R1cmVIYW5kbGVyO1xuXHRcdFx0XHRoYW5kbGVyUGFyYW1ldGVyczogUGFyYW1ldGVyczxUSW5qZWN0R2VzdHVyZT5bMF07XG5cdFx0XHRcdHN0YXRlOiBQYXJhbWV0ZXJzPFBhcmFtZXRlcnM8VEluamVjdEdlc3R1cmU+WzBdPlswXTtcblx0XHRcdFx0Y29uZmlnOiBHZXN0dXJlQ29uZmlnO1xuXHRcdFx0fVxuXHRcdDogbmV2ZXI7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVHZXN0dXJlPFxuXHRUR2VzdHVyZUtleSBleHRlbmRzIEdlc3R1cmVLZXksXG5cdFRSZWNvZ25pemVyIGV4dGVuZHMgUmVjb2duaXplcjxUR2VzdHVyZUtleT4sXG4+KF9rZXk6IFRHZXN0dXJlS2V5LCBnZXN0dXJlOiBUeXBlPFRSZWNvZ25pemVyPikge1xuXHR0eXBlIEdlc3R1cmVIYW5kbGVyID0gSGFuZGxlcjxUR2VzdHVyZUtleSwgRXZlbnRUeXBlc1tUR2VzdHVyZUtleV0+O1xuXHR0eXBlIEdlc3R1cmVDb25maWcgPSBVc2VyR2VzdHVyZUNvbmZpZ1tUR2VzdHVyZUtleV07XG5cblx0cmV0dXJuIGZ1bmN0aW9uIF9pbmplY3RHZXN0dXJlKFxuXHRcdGhhbmRsZXIsXG5cdFx0eyBpbmplY3RvciwgY29uZmlnID0gKCkgPT4gKHt9KSwgem9uZWxlc3MgfSA9IHt9LFxuXHQpIHtcblx0XHRyZXR1cm4gYXNzZXJ0SW5qZWN0b3IoX2luamVjdEdlc3R1cmUsIGluamVjdG9yLCAoKSA9PiB7XG5cdFx0XHRjb25zdCB6b25lbGVzc0dlc3R1cmUgPSBpbmplY3Rab25lbGVzc0dlc3R1cmUoKTtcblx0XHRcdGNvbnN0IGhvc3QgPSBpbmplY3QoRWxlbWVudFJlZikgYXMgRWxlbWVudFJlZjxIVE1MRWxlbWVudD47XG5cdFx0XHRjb25zdCB6b25lID0gaW5qZWN0KE5nWm9uZSk7XG5cdFx0XHRjb25zdCBjZHIgPSBpbmplY3QoQ2hhbmdlRGV0ZWN0b3JSZWYpO1xuXG5cdFx0XHR6b25lbGVzcyA/Pz0gem9uZWxlc3NHZXN0dXJlO1xuXG5cdFx0XHRjb25zdCBuZ0hhbmRsZXIgPSAoc3RhdGU6IFBhcmFtZXRlcnM8R2VzdHVyZUhhbmRsZXI+WzBdKSA9PiB7XG5cdFx0XHRcdHJldHVybiBoYW5kbGVyKE9iamVjdC5hc3NpZ24oc3RhdGUsIHsgY2RyIH0pKTtcblx0XHRcdH07XG5cblx0XHRcdGNvbnN0IGdlc3R1cmVJbnN0YW5jZSA9IHpvbmVsZXNzXG5cdFx0XHRcdD8gem9uZS5ydW5PdXRzaWRlQW5ndWxhcihcblx0XHRcdFx0XHRcdCgpID0+IG5ldyBnZXN0dXJlKGhvc3QubmF0aXZlRWxlbWVudCwgbmdIYW5kbGVyKSxcblx0XHRcdFx0XHQpXG5cdFx0XHRcdDogbmV3IGdlc3R1cmUoaG9zdC5uYXRpdmVFbGVtZW50LCBuZ0hhbmRsZXIpO1xuXG5cdFx0XHRlZmZlY3QoKCkgPT4ge1xuXHRcdFx0XHRpZiAoem9uZWxlc3MpIHtcblx0XHRcdFx0XHR6b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcblx0XHRcdFx0XHRcdC8vIEB0cy1leHBlY3QtZXJyb3IgdHlwZXNjcmlwdCBrbm93cyB3aGF0IHRoZSBjb25maWcgaXMgYnV0IGdlc3R1cmVJbnN0YW5jZSBjYW4gYWxzbyBzZXQgY29uZmlnIGZvciBtdWx0aXBsZSBnZXN0dXJlc1xuXHRcdFx0XHRcdFx0Z2VzdHVyZUluc3RhbmNlLnNldENvbmZpZyhjb25maWcoKSk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Ly8gQHRzLWV4cGVjdC1lcnJvciB0eXBlc2NyaXB0IGtub3dzIHdoYXQgdGhlIGNvbmZpZyBpcyBidXQgZ2VzdHVyZUluc3RhbmNlIGNhbiBhbHNvIHNldCBjb25maWcgZm9yIG11bHRpcGxlIGdlc3R1cmVzXG5cdFx0XHRcdFx0Z2VzdHVyZUluc3RhbmNlLnNldENvbmZpZyhjb25maWcoKSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHRpbmplY3QoRGVzdHJveVJlZikub25EZXN0cm95KFxuXHRcdFx0XHRnZXN0dXJlSW5zdGFuY2UuZGVzdHJveS5iaW5kKGdlc3R1cmVJbnN0YW5jZSksXG5cdFx0XHQpO1xuXHRcdH0pO1xuXHR9IGFzIEluamVjdEdlc3R1cmVGbjxUR2VzdHVyZUtleSwgR2VzdHVyZUhhbmRsZXIsIEdlc3R1cmVDb25maWc+O1xufVxuIl19