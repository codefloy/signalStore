import { Directive, EventEmitter, Injector, Input, Output, inject, signal, } from '@angular/core';
import { ScrollGesture } from '@use-gesture/vanilla';
import { createGesture } from './gesture';
import * as i0 from "@angular/core";
export const injectScroll = createGesture('scroll', ScrollGesture);
export class NgxScroll {
    constructor() {
        this.config = signal({});
        this.ngxScroll = new EventEmitter();
        this.injector = inject(Injector);
    }
    set _config(config) {
        this.config.set(config);
    }
    ngOnInit() {
        injectScroll(this.ngxScroll.emit.bind(this.ngxScroll), {
            injector: this.injector,
            zoneless: this.zoneless,
            config: this.config,
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: NgxScroll, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.0.3", type: NgxScroll, isStandalone: true, selector: "[ngxScroll]", inputs: { _config: ["ngxScrollConfig", "_config"], zoneless: ["ngxScrollZoneless", "zoneless"] }, outputs: { ngxScroll: "ngxScroll" }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: NgxScroll, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ngxScroll]',
                    standalone: true,
                }]
        }], propDecorators: { _config: [{
                type: Input,
                args: ['ngxScrollConfig']
            }], zoneless: [{
                type: Input,
                args: ['ngxScrollZoneless']
            }], ngxScroll: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbGlicy9uZ3h0ZW5zaW9uL2dlc3R1cmVzL3NyYy9zY3JvbGwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNOLFNBQVMsRUFDVCxZQUFZLEVBQ1osUUFBUSxFQUNSLEtBQUssRUFDTCxNQUFNLEVBQ04sTUFBTSxFQUNOLE1BQU0sR0FFTixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDckQsT0FBTyxFQUFFLGFBQWEsRUFBcUIsTUFBTSxXQUFXLENBQUM7O0FBRTdELE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxhQUFhLENBQUMsUUFBUSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0FBT25FLE1BQU0sT0FBTyxTQUFTO0lBSnRCO1FBS1MsV0FBTSxHQUFHLE1BQU0sQ0FBNEIsRUFBRSxDQUFDLENBQUM7UUFLN0MsY0FBUyxHQUFHLElBQUksWUFBWSxFQUE0QixDQUFDO1FBRTNELGFBQVEsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7S0FTcEM7SUFmQSxJQUE4QixPQUFPLENBQUMsTUFBaUM7UUFDdEUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDekIsQ0FBQztJQU1ELFFBQVE7UUFDUCxZQUFZLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUN0RCxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7WUFDdkIsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO1lBQ3ZCLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtTQUNuQixDQUFDLENBQUM7SUFDSixDQUFDOzhHQWhCVyxTQUFTO2tHQUFULFNBQVM7OzJGQUFULFNBQVM7a0JBSnJCLFNBQVM7bUJBQUM7b0JBQ1YsUUFBUSxFQUFFLGFBQWE7b0JBQ3ZCLFVBQVUsRUFBRSxJQUFJO2lCQUNoQjs4QkFHOEIsT0FBTztzQkFBcEMsS0FBSzt1QkFBQyxpQkFBaUI7Z0JBR0ksUUFBUTtzQkFBbkMsS0FBSzt1QkFBQyxtQkFBbUI7Z0JBQ2hCLFNBQVM7c0JBQWxCLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuXHREaXJlY3RpdmUsXG5cdEV2ZW50RW1pdHRlcixcblx0SW5qZWN0b3IsXG5cdElucHV0LFxuXHRPdXRwdXQsXG5cdGluamVjdCxcblx0c2lnbmFsLFxuXHR0eXBlIE9uSW5pdCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTY3JvbGxHZXN0dXJlIH0gZnJvbSAnQHVzZS1nZXN0dXJlL3ZhbmlsbGEnO1xuaW1wb3J0IHsgY3JlYXRlR2VzdHVyZSwgdHlwZSBHZXN0dXJlSW5mZXIgfSBmcm9tICcuL2dlc3R1cmUnO1xuXG5leHBvcnQgY29uc3QgaW5qZWN0U2Nyb2xsID0gY3JlYXRlR2VzdHVyZSgnc2Nyb2xsJywgU2Nyb2xsR2VzdHVyZSk7XG5leHBvcnQgdHlwZSBOZ3hJbmplY3RTY3JvbGwgPSBHZXN0dXJlSW5mZXI8dHlwZW9mIGluamVjdFNjcm9sbD47XG5cbkBEaXJlY3RpdmUoe1xuXHRzZWxlY3RvcjogJ1tuZ3hTY3JvbGxdJyxcblx0c3RhbmRhbG9uZTogdHJ1ZSxcbn0pXG5leHBvcnQgY2xhc3MgTmd4U2Nyb2xsIGltcGxlbWVudHMgT25Jbml0IHtcblx0cHJpdmF0ZSBjb25maWcgPSBzaWduYWw8Tmd4SW5qZWN0U2Nyb2xsWydjb25maWcnXT4oe30pO1xuXHRASW5wdXQoJ25neFNjcm9sbENvbmZpZycpIHNldCBfY29uZmlnKGNvbmZpZzogTmd4SW5qZWN0U2Nyb2xsWydjb25maWcnXSkge1xuXHRcdHRoaXMuY29uZmlnLnNldChjb25maWcpO1xuXHR9XG5cdEBJbnB1dCgnbmd4U2Nyb2xsWm9uZWxlc3MnKSB6b25lbGVzcz86IGJvb2xlYW47XG5cdEBPdXRwdXQoKSBuZ3hTY3JvbGwgPSBuZXcgRXZlbnRFbWl0dGVyPE5neEluamVjdFNjcm9sbFsnc3RhdGUnXT4oKTtcblxuXHRwcml2YXRlIGluamVjdG9yID0gaW5qZWN0KEluamVjdG9yKTtcblxuXHRuZ09uSW5pdCgpOiB2b2lkIHtcblx0XHRpbmplY3RTY3JvbGwodGhpcy5uZ3hTY3JvbGwuZW1pdC5iaW5kKHRoaXMubmd4U2Nyb2xsKSwge1xuXHRcdFx0aW5qZWN0b3I6IHRoaXMuaW5qZWN0b3IsXG5cdFx0XHR6b25lbGVzczogdGhpcy56b25lbGVzcyxcblx0XHRcdGNvbmZpZzogdGhpcy5jb25maWcsXG5cdFx0fSk7XG5cdH1cbn1cbiJdfQ==