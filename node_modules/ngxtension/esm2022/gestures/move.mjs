import { Directive, EventEmitter, Injector, Input, Output, inject, signal, } from '@angular/core';
import { MoveGesture } from '@use-gesture/vanilla';
import { createGesture } from './gesture';
import * as i0 from "@angular/core";
export const injectMove = createGesture('move', MoveGesture);
export class NgxMove {
    constructor() {
        this.config = signal({});
        this.ngxMove = new EventEmitter();
        this.injector = inject(Injector);
    }
    set _config(config) {
        this.config.set(config);
    }
    ngOnInit() {
        injectMove(this.ngxMove.emit.bind(this.ngxMove), {
            injector: this.injector,
            zoneless: this.zoneless,
            config: this.config,
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: NgxMove, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.0.3", type: NgxMove, isStandalone: true, selector: "[ngxMove]", inputs: { _config: ["ngxMoveConfig", "_config"], zoneless: ["ngxMoveZoneless", "zoneless"] }, outputs: { ngxMove: "ngxMove" }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: NgxMove, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ngxMove]',
                    standalone: true,
                }]
        }], propDecorators: { _config: [{
                type: Input,
                args: ['ngxMoveConfig']
            }], zoneless: [{
                type: Input,
                args: ['ngxMoveZoneless']
            }], ngxMove: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW92ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2xpYnMvbmd4dGVuc2lvbi9nZXN0dXJlcy9zcmMvbW92ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ04sU0FBUyxFQUNULFlBQVksRUFDWixRQUFRLEVBQ1IsS0FBSyxFQUNMLE1BQU0sRUFDTixNQUFNLEVBQ04sTUFBTSxHQUVOLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNuRCxPQUFPLEVBQUUsYUFBYSxFQUFxQixNQUFNLFdBQVcsQ0FBQzs7QUFFN0QsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLGFBQWEsQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFPN0QsTUFBTSxPQUFPLE9BQU87SUFKcEI7UUFLUyxXQUFNLEdBQUcsTUFBTSxDQUEwQixFQUFFLENBQUMsQ0FBQztRQUszQyxZQUFPLEdBQUcsSUFBSSxZQUFZLEVBQTBCLENBQUM7UUFFdkQsYUFBUSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztLQVNwQztJQWZBLElBQTRCLE9BQU8sQ0FBQyxNQUErQjtRQUNsRSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN6QixDQUFDO0lBTUQsUUFBUTtRQUNQLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ2hELFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtZQUN2QixRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7WUFDdkIsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNO1NBQ25CLENBQUMsQ0FBQztJQUNKLENBQUM7OEdBaEJXLE9BQU87a0dBQVAsT0FBTzs7MkZBQVAsT0FBTztrQkFKbkIsU0FBUzttQkFBQztvQkFDVixRQUFRLEVBQUUsV0FBVztvQkFDckIsVUFBVSxFQUFFLElBQUk7aUJBQ2hCOzhCQUc0QixPQUFPO3NCQUFsQyxLQUFLO3VCQUFDLGVBQWU7Z0JBR0ksUUFBUTtzQkFBakMsS0FBSzt1QkFBQyxpQkFBaUI7Z0JBQ2QsT0FBTztzQkFBaEIsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG5cdERpcmVjdGl2ZSxcblx0RXZlbnRFbWl0dGVyLFxuXHRJbmplY3Rvcixcblx0SW5wdXQsXG5cdE91dHB1dCxcblx0aW5qZWN0LFxuXHRzaWduYWwsXG5cdHR5cGUgT25Jbml0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1vdmVHZXN0dXJlIH0gZnJvbSAnQHVzZS1nZXN0dXJlL3ZhbmlsbGEnO1xuaW1wb3J0IHsgY3JlYXRlR2VzdHVyZSwgdHlwZSBHZXN0dXJlSW5mZXIgfSBmcm9tICcuL2dlc3R1cmUnO1xuXG5leHBvcnQgY29uc3QgaW5qZWN0TW92ZSA9IGNyZWF0ZUdlc3R1cmUoJ21vdmUnLCBNb3ZlR2VzdHVyZSk7XG5leHBvcnQgdHlwZSBOZ3hJbmplY3RNb3ZlID0gR2VzdHVyZUluZmVyPHR5cGVvZiBpbmplY3RNb3ZlPjtcblxuQERpcmVjdGl2ZSh7XG5cdHNlbGVjdG9yOiAnW25neE1vdmVdJyxcblx0c3RhbmRhbG9uZTogdHJ1ZSxcbn0pXG5leHBvcnQgY2xhc3MgTmd4TW92ZSBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cdHByaXZhdGUgY29uZmlnID0gc2lnbmFsPE5neEluamVjdE1vdmVbJ2NvbmZpZyddPih7fSk7XG5cdEBJbnB1dCgnbmd4TW92ZUNvbmZpZycpIHNldCBfY29uZmlnKGNvbmZpZzogTmd4SW5qZWN0TW92ZVsnY29uZmlnJ10pIHtcblx0XHR0aGlzLmNvbmZpZy5zZXQoY29uZmlnKTtcblx0fVxuXHRASW5wdXQoJ25neE1vdmVab25lbGVzcycpIHpvbmVsZXNzPzogYm9vbGVhbjtcblx0QE91dHB1dCgpIG5neE1vdmUgPSBuZXcgRXZlbnRFbWl0dGVyPE5neEluamVjdE1vdmVbJ3N0YXRlJ10+KCk7XG5cblx0cHJpdmF0ZSBpbmplY3RvciA9IGluamVjdChJbmplY3Rvcik7XG5cblx0bmdPbkluaXQoKTogdm9pZCB7XG5cdFx0aW5qZWN0TW92ZSh0aGlzLm5neE1vdmUuZW1pdC5iaW5kKHRoaXMubmd4TW92ZSksIHtcblx0XHRcdGluamVjdG9yOiB0aGlzLmluamVjdG9yLFxuXHRcdFx0em9uZWxlc3M6IHRoaXMuem9uZWxlc3MsXG5cdFx0XHRjb25maWc6IHRoaXMuY29uZmlnLFxuXHRcdH0pO1xuXHR9XG59XG4iXX0=