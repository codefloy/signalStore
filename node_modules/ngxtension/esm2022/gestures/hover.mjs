import { Directive, EventEmitter, Injector, Input, Output, inject, signal, } from '@angular/core';
import { HoverGesture } from '@use-gesture/vanilla';
import { createGesture } from './gesture';
import * as i0 from "@angular/core";
export const injectHover = createGesture('hover', HoverGesture);
export class NgxHover {
    constructor() {
        this.config = signal({});
        this.ngxHover = new EventEmitter();
        this.injector = inject(Injector);
    }
    set _config(config) {
        this.config.set(config);
    }
    ngOnInit() {
        injectHover(this.ngxHover.emit.bind(this.ngxHover), {
            injector: this.injector,
            zoneless: this.zoneless,
            config: this.config,
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: NgxHover, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.0.3", type: NgxHover, isStandalone: true, selector: "[ngxHover]", inputs: { _config: ["ngxHoverConfig", "_config"], zoneless: ["ngxHoverZoneless", "zoneless"] }, outputs: { ngxHover: "ngxHover" }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: NgxHover, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ngxHover]',
                    standalone: true,
                }]
        }], propDecorators: { _config: [{
                type: Input,
                args: ['ngxHoverConfig']
            }], zoneless: [{
                type: Input,
                args: ['ngxHoverZoneless']
            }], ngxHover: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG92ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL25neHRlbnNpb24vZ2VzdHVyZXMvc3JjL2hvdmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTixTQUFTLEVBQ1QsWUFBWSxFQUNaLFFBQVEsRUFDUixLQUFLLEVBQ0wsTUFBTSxFQUNOLE1BQU0sRUFDTixNQUFNLEdBRU4sTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxhQUFhLEVBQXFCLE1BQU0sV0FBVyxDQUFDOztBQUU3RCxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsYUFBYSxDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQztBQU9oRSxNQUFNLE9BQU8sUUFBUTtJQUpyQjtRQUtTLFdBQU0sR0FBRyxNQUFNLENBQTJCLEVBQUUsQ0FBQyxDQUFDO1FBSzVDLGFBQVEsR0FBRyxJQUFJLFlBQVksRUFBMkIsQ0FBQztRQUV6RCxhQUFRLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBU3BDO0lBZkEsSUFBNkIsT0FBTyxDQUFDLE1BQWdDO1FBQ3BFLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3pCLENBQUM7SUFNRCxRQUFRO1FBQ1AsV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDbkQsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO1lBQ3ZCLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtZQUN2QixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07U0FDbkIsQ0FBQyxDQUFDO0lBQ0osQ0FBQzs4R0FoQlcsUUFBUTtrR0FBUixRQUFROzsyRkFBUixRQUFRO2tCQUpwQixTQUFTO21CQUFDO29CQUNWLFFBQVEsRUFBRSxZQUFZO29CQUN0QixVQUFVLEVBQUUsSUFBSTtpQkFDaEI7OEJBRzZCLE9BQU87c0JBQW5DLEtBQUs7dUJBQUMsZ0JBQWdCO2dCQUdJLFFBQVE7c0JBQWxDLEtBQUs7dUJBQUMsa0JBQWtCO2dCQUNmLFFBQVE7c0JBQWpCLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuXHREaXJlY3RpdmUsXG5cdEV2ZW50RW1pdHRlcixcblx0SW5qZWN0b3IsXG5cdElucHV0LFxuXHRPdXRwdXQsXG5cdGluamVjdCxcblx0c2lnbmFsLFxuXHR0eXBlIE9uSW5pdCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIb3Zlckdlc3R1cmUgfSBmcm9tICdAdXNlLWdlc3R1cmUvdmFuaWxsYSc7XG5pbXBvcnQgeyBjcmVhdGVHZXN0dXJlLCB0eXBlIEdlc3R1cmVJbmZlciB9IGZyb20gJy4vZ2VzdHVyZSc7XG5cbmV4cG9ydCBjb25zdCBpbmplY3RIb3ZlciA9IGNyZWF0ZUdlc3R1cmUoJ2hvdmVyJywgSG92ZXJHZXN0dXJlKTtcbmV4cG9ydCB0eXBlIE5neEluamVjdEhvdmVyID0gR2VzdHVyZUluZmVyPHR5cGVvZiBpbmplY3RIb3Zlcj47XG5cbkBEaXJlY3RpdmUoe1xuXHRzZWxlY3RvcjogJ1tuZ3hIb3Zlcl0nLFxuXHRzdGFuZGFsb25lOiB0cnVlLFxufSlcbmV4cG9ydCBjbGFzcyBOZ3hIb3ZlciBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cdHByaXZhdGUgY29uZmlnID0gc2lnbmFsPE5neEluamVjdEhvdmVyWydjb25maWcnXT4oe30pO1xuXHRASW5wdXQoJ25neEhvdmVyQ29uZmlnJykgc2V0IF9jb25maWcoY29uZmlnOiBOZ3hJbmplY3RIb3ZlclsnY29uZmlnJ10pIHtcblx0XHR0aGlzLmNvbmZpZy5zZXQoY29uZmlnKTtcblx0fVxuXHRASW5wdXQoJ25neEhvdmVyWm9uZWxlc3MnKSB6b25lbGVzcz86IGJvb2xlYW47XG5cdEBPdXRwdXQoKSBuZ3hIb3ZlciA9IG5ldyBFdmVudEVtaXR0ZXI8Tmd4SW5qZWN0SG92ZXJbJ3N0YXRlJ10+KCk7XG5cblx0cHJpdmF0ZSBpbmplY3RvciA9IGluamVjdChJbmplY3Rvcik7XG5cblx0bmdPbkluaXQoKTogdm9pZCB7XG5cdFx0aW5qZWN0SG92ZXIodGhpcy5uZ3hIb3Zlci5lbWl0LmJpbmQodGhpcy5uZ3hIb3ZlciksIHtcblx0XHRcdGluamVjdG9yOiB0aGlzLmluamVjdG9yLFxuXHRcdFx0em9uZWxlc3M6IHRoaXMuem9uZWxlc3MsXG5cdFx0XHRjb25maWc6IHRoaXMuY29uZmlnLFxuXHRcdH0pO1xuXHR9XG59XG4iXX0=