import { DOCUMENT } from '@angular/common';
import { inject } from '@angular/core';
import { assertInjector } from 'ngxtension/assert-injector';
import { fromEvent, map, merge, shareReplay } from 'rxjs';
export function injectActiveElement(injector) {
    return assertInjector(injectActiveElement, injector, () => {
        const doc = inject(DOCUMENT);
        return merge(fromEvent(doc, 'focus', { capture: true, passive: true }).pipe(map(() => true)), fromEvent(doc, 'blur', { capture: true, passive: true }).pipe(map(() => false))).pipe(map((hasFocus) => (hasFocus ? doc.activeElement : null)), shareReplay({ refCount: true, bufferSize: 1 }));
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aXZlLWVsZW1lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL25neHRlbnNpb24vYWN0aXZlLWVsZW1lbnQvc3JjL2FjdGl2ZS1lbGVtZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLEVBQUUsTUFBTSxFQUFZLE1BQU0sZUFBZSxDQUFDO0FBQ2pELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUM1RCxPQUFPLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRTFELE1BQU0sVUFBVSxtQkFBbUIsQ0FBQyxRQUFtQjtJQUN0RCxPQUFPLGNBQWMsQ0FBQyxtQkFBbUIsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFO1FBQ3pELE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM3QixPQUFPLEtBQUssQ0FDWCxTQUFTLENBQUMsR0FBRyxFQUFFLE9BQU8sRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUM3RCxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQ2YsRUFDRCxTQUFTLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUM1RCxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQ2hCLENBQ0QsQ0FBQyxJQUFJLENBQ0wsR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFDeEQsV0FBVyxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FDOUMsQ0FBQztJQUNILENBQUMsQ0FBQyxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IGluamVjdCwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGFzc2VydEluamVjdG9yIH0gZnJvbSAnbmd4dGVuc2lvbi9hc3NlcnQtaW5qZWN0b3InO1xuaW1wb3J0IHsgZnJvbUV2ZW50LCBtYXAsIG1lcmdlLCBzaGFyZVJlcGxheSB9IGZyb20gJ3J4anMnO1xuXG5leHBvcnQgZnVuY3Rpb24gaW5qZWN0QWN0aXZlRWxlbWVudChpbmplY3Rvcj86IEluamVjdG9yKSB7XG5cdHJldHVybiBhc3NlcnRJbmplY3RvcihpbmplY3RBY3RpdmVFbGVtZW50LCBpbmplY3RvciwgKCkgPT4ge1xuXHRcdGNvbnN0IGRvYyA9IGluamVjdChET0NVTUVOVCk7XG5cdFx0cmV0dXJuIG1lcmdlKFxuXHRcdFx0ZnJvbUV2ZW50KGRvYywgJ2ZvY3VzJywgeyBjYXB0dXJlOiB0cnVlLCBwYXNzaXZlOiB0cnVlIH0pLnBpcGUoXG5cdFx0XHRcdG1hcCgoKSA9PiB0cnVlKSxcblx0XHRcdCksXG5cdFx0XHRmcm9tRXZlbnQoZG9jLCAnYmx1cicsIHsgY2FwdHVyZTogdHJ1ZSwgcGFzc2l2ZTogdHJ1ZSB9KS5waXBlKFxuXHRcdFx0XHRtYXAoKCkgPT4gZmFsc2UpLFxuXHRcdFx0KSxcblx0XHQpLnBpcGUoXG5cdFx0XHRtYXAoKGhhc0ZvY3VzKSA9PiAoaGFzRm9jdXMgPyBkb2MuYWN0aXZlRWxlbWVudCA6IG51bGwpKSxcblx0XHRcdHNoYXJlUmVwbGF5KHsgcmVmQ291bnQ6IHRydWUsIGJ1ZmZlclNpemU6IDEgfSksXG5cdFx0KTtcblx0fSk7XG59XG4iXX0=