import { DestroyRef, inject, isSignal, runInInjectionContext, } from '@angular/core';
import { takeUntilDestroyed, toObservable } from '@angular/core/rxjs-interop';
import { assertInjector } from 'ngxtension/assert-injector';
import { Subject, isObservable, of, retry, } from 'rxjs';
/**
 * This code is a copied `ComponentStore.effect()` method from NgRx and edited to:
 * 1) be a standalone function;
 * 2) use `takeUntilDestroyed()` with an injected `DestroyRef`;
 * 3) resubscribe on errors.
 *
 * Credits: NgRx Team
 * https://ngrx.io/
 * Source: https://github.com/ngrx/platform/blob/main/modules/component-store/src/component-store.ts#L382
 * Docs:
 * https://ngrx.io/guide/component-store/effect#effect-method
 */
export function createEffect(generator, options) {
    const injector = assertInjector(createEffect, options?.injector);
    return runInInjectionContext(injector, () => {
        const destroyRef = inject(DestroyRef);
        const origin$ = new Subject();
        const retryOnError = !!(options?.retryOnError ?? true);
        const retryConfig = typeof options?.retryOnError === 'object' && options?.retryOnError
            ? options?.retryOnError
            : {};
        if (retryOnError) {
            generator(origin$)
                .pipe(retry(retryConfig), takeUntilDestroyed(destroyRef))
                .subscribe();
        }
        else {
            generator(origin$)
                .pipe(takeUntilDestroyed(destroyRef))
                .subscribe();
        }
        return ((observableOrValue) => {
            const observable$ = isObservable(observableOrValue)
                ? observableOrValue
                : isSignal(observableOrValue)
                    ? toObservable(observableOrValue, { injector })
                    : of(observableOrValue);
            if (retryOnError) {
                return observable$
                    .pipe(retry(retryConfig), takeUntilDestroyed(destroyRef))
                    .subscribe((value) => {
                    origin$.next(value);
                });
            }
            else {
                return observable$
                    .pipe(takeUntilDestroyed(destroyRef))
                    .subscribe((value) => {
                    origin$.next(value);
                });
            }
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLWVmZmVjdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2xpYnMvbmd4dGVuc2lvbi9jcmVhdGUtZWZmZWN0L3NyYy9jcmVhdGUtZWZmZWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTixVQUFVLEVBRVYsTUFBTSxFQUNOLFFBQVEsRUFDUixxQkFBcUIsR0FFckIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGtCQUFrQixFQUFFLFlBQVksRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzlFLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUM1RCxPQUFPLEVBRU4sT0FBTyxFQUVQLFlBQVksRUFDWixFQUFFLEVBQ0YsS0FBSyxHQUVMLE1BQU0sTUFBTSxDQUFDO0FBYWQ7Ozs7Ozs7Ozs7O0dBV0c7QUFDSCxNQUFNLFVBQVUsWUFBWSxDQW9CM0IsU0FBdUQsRUFDdkQsT0FBNkI7SUFFN0IsTUFBTSxRQUFRLEdBQUcsY0FBYyxDQUFDLFlBQVksRUFBRSxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDakUsT0FBTyxxQkFBcUIsQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFO1FBQzNDLE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN0QyxNQUFNLE9BQU8sR0FBRyxJQUFJLE9BQU8sRUFBa0IsQ0FBQztRQUM5QyxNQUFNLFlBQVksR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsWUFBWSxJQUFJLElBQUksQ0FBQyxDQUFDO1FBQ3ZELE1BQU0sV0FBVyxHQUNoQixPQUFPLE9BQU8sRUFBRSxZQUFZLEtBQUssUUFBUSxJQUFJLE9BQU8sRUFBRSxZQUFZO1lBQ2pFLENBQUMsQ0FBQyxPQUFPLEVBQUUsWUFBWTtZQUN2QixDQUFDLENBQUUsRUFBa0IsQ0FBQztRQUV4QixJQUFJLFlBQVksRUFBRSxDQUFDO1lBQ2xCLFNBQVMsQ0FBQyxPQUFxQixDQUFDO2lCQUM5QixJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxFQUFFLGtCQUFrQixDQUFDLFVBQVUsQ0FBQyxDQUFDO2lCQUN4RCxTQUFTLEVBQUUsQ0FBQztRQUNmLENBQUM7YUFBTSxDQUFDO1lBQ1AsU0FBUyxDQUFDLE9BQXFCLENBQUM7aUJBQzlCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztpQkFDcEMsU0FBUyxFQUFFLENBQUM7UUFDZixDQUFDO1FBRUQsT0FBTyxDQUFDLENBQ1AsaUJBQStELEVBQ2hELEVBQUU7WUFDakIsTUFBTSxXQUFXLEdBQUcsWUFBWSxDQUFDLGlCQUFpQixDQUFDO2dCQUNsRCxDQUFDLENBQUMsaUJBQWlCO2dCQUNuQixDQUFDLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDO29CQUM1QixDQUFDLENBQUMsWUFBWSxDQUFDLGlCQUFpQixFQUFFLEVBQUUsUUFBUSxFQUFFLENBQUM7b0JBQy9DLENBQUMsQ0FBQyxFQUFFLENBQUMsaUJBQWlCLENBQUMsQ0FBQztZQUMxQixJQUFJLFlBQVksRUFBRSxDQUFDO2dCQUNsQixPQUFPLFdBQVc7cUJBQ2hCLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLEVBQUUsa0JBQWtCLENBQUMsVUFBVSxDQUFDLENBQUM7cUJBQ3hELFNBQVMsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO29CQUNwQixPQUFPLENBQUMsSUFBSSxDQUFDLEtBQXVCLENBQUMsQ0FBQztnQkFDdkMsQ0FBQyxDQUFDLENBQUM7WUFDTCxDQUFDO2lCQUFNLENBQUM7Z0JBQ1AsT0FBTyxXQUFXO3FCQUNoQixJQUFJLENBQUMsa0JBQWtCLENBQUMsVUFBVSxDQUFDLENBQUM7cUJBQ3BDLFNBQVMsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO29CQUNwQixPQUFPLENBQUMsSUFBSSxDQUFDLEtBQXVCLENBQUMsQ0FBQztnQkFDdkMsQ0FBQyxDQUFDLENBQUM7WUFDTCxDQUFDO1FBQ0YsQ0FBQyxDQUEwQixDQUFDO0lBQzdCLENBQUMsQ0FBQyxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG5cdERlc3Ryb3lSZWYsXG5cdEluamVjdG9yLFxuXHRpbmplY3QsXG5cdGlzU2lnbmFsLFxuXHRydW5JbkluamVjdGlvbkNvbnRleHQsXG5cdHR5cGUgU2lnbmFsLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IHRha2VVbnRpbERlc3Ryb3llZCwgdG9PYnNlcnZhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZS9yeGpzLWludGVyb3AnO1xuaW1wb3J0IHsgYXNzZXJ0SW5qZWN0b3IgfSBmcm9tICduZ3h0ZW5zaW9uL2Fzc2VydC1pbmplY3Rvcic7XG5pbXBvcnQge1xuXHRPYnNlcnZhYmxlLFxuXHRTdWJqZWN0LFxuXHRTdWJzY3JpcHRpb24sXG5cdGlzT2JzZXJ2YWJsZSxcblx0b2YsXG5cdHJldHJ5LFxuXHR0eXBlIFJldHJ5Q29uZmlnLFxufSBmcm9tICdyeGpzJztcblxuZXhwb3J0IHR5cGUgQ3JlYXRlRWZmZWN0T3B0aW9ucyA9IHtcblx0aW5qZWN0b3I/OiBJbmplY3Rvcjtcblx0LyoqXG5cdCAqIEBwYXJhbSByZXRyeU9uRXJyb3Jcblx0ICogU2V0IHRvICdmYWxzZScgdG8gZGlzYWJsZSByZXRyeWluZyBvbiBlcnJvci5cblx0ICogT3RoZXJ3aXNlLCBnZW5lcmF0ZWQgZWZmZWN0IHdpbGwgdXNlIGByZXRyeSgpYC5cblx0ICogWW91IGNhbiBwYXNzIGBSZXRyeUNvbmZpZ2Agb2JqZWN0IGhlcmUgdG8gY29uZmlndXJlIGByZXRyeSgpYCBvcGVyYXRvci5cblx0ICovXG5cdHJldHJ5T25FcnJvcj86IGJvb2xlYW4gfCBSZXRyeUNvbmZpZztcbn07XG5cbi8qKlxuICogVGhpcyBjb2RlIGlzIGEgY29waWVkIGBDb21wb25lbnRTdG9yZS5lZmZlY3QoKWAgbWV0aG9kIGZyb20gTmdSeCBhbmQgZWRpdGVkIHRvOlxuICogMSkgYmUgYSBzdGFuZGFsb25lIGZ1bmN0aW9uO1xuICogMikgdXNlIGB0YWtlVW50aWxEZXN0cm95ZWQoKWAgd2l0aCBhbiBpbmplY3RlZCBgRGVzdHJveVJlZmA7XG4gKiAzKSByZXN1YnNjcmliZSBvbiBlcnJvcnMuXG4gKlxuICogQ3JlZGl0czogTmdSeCBUZWFtXG4gKiBodHRwczovL25ncnguaW8vXG4gKiBTb3VyY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9uZ3J4L3BsYXRmb3JtL2Jsb2IvbWFpbi9tb2R1bGVzL2NvbXBvbmVudC1zdG9yZS9zcmMvY29tcG9uZW50LXN0b3JlLnRzI0wzODJcbiAqIERvY3M6XG4gKiBodHRwczovL25ncnguaW8vZ3VpZGUvY29tcG9uZW50LXN0b3JlL2VmZmVjdCNlZmZlY3QtbWV0aG9kXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFZmZlY3Q8XG5cdFByb3ZpZGVkVHlwZSA9IHZvaWQsXG5cdE9yaWdpblR5cGUgZXh0ZW5kc1xuXHRcdHwgT2JzZXJ2YWJsZTxQcm92aWRlZFR5cGU+XG5cdFx0fCB1bmtub3duID0gT2JzZXJ2YWJsZTxQcm92aWRlZFR5cGU+LFxuXHRPYnNlcnZhYmxlVHlwZSA9IE9yaWdpblR5cGUgZXh0ZW5kcyBPYnNlcnZhYmxlPGluZmVyIEE+ID8gQSA6IG5ldmVyLFxuXHRSZXR1cm5UeXBlID0gUHJvdmlkZWRUeXBlIHwgT2JzZXJ2YWJsZVR5cGUgZXh0ZW5kcyB2b2lkXG5cdFx0PyAoXG5cdFx0XHRcdG9ic2VydmFibGVPclZhbHVlPzpcblx0XHRcdFx0XHR8IE9ic2VydmFibGVUeXBlXG5cdFx0XHRcdFx0fCBPYnNlcnZhYmxlPE9ic2VydmFibGVUeXBlPlxuXHRcdFx0XHRcdHwgU2lnbmFsPE9ic2VydmFibGVUeXBlPixcblx0XHRcdCkgPT4gU3Vic2NyaXB0aW9uXG5cdFx0OiAoXG5cdFx0XHRcdG9ic2VydmFibGVPclZhbHVlOlxuXHRcdFx0XHRcdHwgT2JzZXJ2YWJsZVR5cGVcblx0XHRcdFx0XHR8IE9ic2VydmFibGU8T2JzZXJ2YWJsZVR5cGU+XG5cdFx0XHRcdFx0fCBTaWduYWw8T2JzZXJ2YWJsZVR5cGU+LFxuXHRcdFx0KSA9PiBTdWJzY3JpcHRpb24sXG4+KFxuXHRnZW5lcmF0b3I6IChvcmlnaW4kOiBPcmlnaW5UeXBlKSA9PiBPYnNlcnZhYmxlPHVua25vd24+LFxuXHRvcHRpb25zPzogQ3JlYXRlRWZmZWN0T3B0aW9ucyxcbik6IFJldHVyblR5cGUge1xuXHRjb25zdCBpbmplY3RvciA9IGFzc2VydEluamVjdG9yKGNyZWF0ZUVmZmVjdCwgb3B0aW9ucz8uaW5qZWN0b3IpO1xuXHRyZXR1cm4gcnVuSW5JbmplY3Rpb25Db250ZXh0KGluamVjdG9yLCAoKSA9PiB7XG5cdFx0Y29uc3QgZGVzdHJveVJlZiA9IGluamVjdChEZXN0cm95UmVmKTtcblx0XHRjb25zdCBvcmlnaW4kID0gbmV3IFN1YmplY3Q8T2JzZXJ2YWJsZVR5cGU+KCk7XG5cdFx0Y29uc3QgcmV0cnlPbkVycm9yID0gISEob3B0aW9ucz8ucmV0cnlPbkVycm9yID8/IHRydWUpO1xuXHRcdGNvbnN0IHJldHJ5Q29uZmlnID1cblx0XHRcdHR5cGVvZiBvcHRpb25zPy5yZXRyeU9uRXJyb3IgPT09ICdvYmplY3QnICYmIG9wdGlvbnM/LnJldHJ5T25FcnJvclxuXHRcdFx0XHQ/IG9wdGlvbnM/LnJldHJ5T25FcnJvclxuXHRcdFx0XHQ6ICh7fSBhcyBSZXRyeUNvbmZpZyk7XG5cblx0XHRpZiAocmV0cnlPbkVycm9yKSB7XG5cdFx0XHRnZW5lcmF0b3Iob3JpZ2luJCBhcyBPcmlnaW5UeXBlKVxuXHRcdFx0XHQucGlwZShyZXRyeShyZXRyeUNvbmZpZyksIHRha2VVbnRpbERlc3Ryb3llZChkZXN0cm95UmVmKSlcblx0XHRcdFx0LnN1YnNjcmliZSgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRnZW5lcmF0b3Iob3JpZ2luJCBhcyBPcmlnaW5UeXBlKVxuXHRcdFx0XHQucGlwZSh0YWtlVW50aWxEZXN0cm95ZWQoZGVzdHJveVJlZikpXG5cdFx0XHRcdC5zdWJzY3JpYmUoKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gKChcblx0XHRcdG9ic2VydmFibGVPclZhbHVlPzogT2JzZXJ2YWJsZVR5cGUgfCBPYnNlcnZhYmxlPE9ic2VydmFibGVUeXBlPixcblx0XHQpOiBTdWJzY3JpcHRpb24gPT4ge1xuXHRcdFx0Y29uc3Qgb2JzZXJ2YWJsZSQgPSBpc09ic2VydmFibGUob2JzZXJ2YWJsZU9yVmFsdWUpXG5cdFx0XHRcdD8gb2JzZXJ2YWJsZU9yVmFsdWVcblx0XHRcdFx0OiBpc1NpZ25hbChvYnNlcnZhYmxlT3JWYWx1ZSlcblx0XHRcdFx0XHQ/IHRvT2JzZXJ2YWJsZShvYnNlcnZhYmxlT3JWYWx1ZSwgeyBpbmplY3RvciB9KVxuXHRcdFx0XHRcdDogb2Yob2JzZXJ2YWJsZU9yVmFsdWUpO1xuXHRcdFx0aWYgKHJldHJ5T25FcnJvcikge1xuXHRcdFx0XHRyZXR1cm4gb2JzZXJ2YWJsZSRcblx0XHRcdFx0XHQucGlwZShyZXRyeShyZXRyeUNvbmZpZyksIHRha2VVbnRpbERlc3Ryb3llZChkZXN0cm95UmVmKSlcblx0XHRcdFx0XHQuc3Vic2NyaWJlKCh2YWx1ZSkgPT4ge1xuXHRcdFx0XHRcdFx0b3JpZ2luJC5uZXh0KHZhbHVlIGFzIE9ic2VydmFibGVUeXBlKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiBvYnNlcnZhYmxlJFxuXHRcdFx0XHRcdC5waXBlKHRha2VVbnRpbERlc3Ryb3llZChkZXN0cm95UmVmKSlcblx0XHRcdFx0XHQuc3Vic2NyaWJlKCh2YWx1ZSkgPT4ge1xuXHRcdFx0XHRcdFx0b3JpZ2luJC5uZXh0KHZhbHVlIGFzIE9ic2VydmFibGVUeXBlKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9KSBhcyB1bmtub3duIGFzIFJldHVyblR5cGU7XG5cdH0pO1xufVxuIl19