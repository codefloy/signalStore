import { NgFor } from '@angular/common';
import { Directive, Input } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * An extension of `NgFor` directive that allows consumers to iterate "x times" instead of through a list of items
 *
 * @param {number} count - a positive integer starting from 0
 *
 * @example
 *
 * ```html
 * <!-- before -->
 * <p *ngFor="let i of [0, 1, 2]">{{i}}</p>
 * <!-- after -->
 * <p *ngFor="let i; repeat: 3">{{i}}</p>
 * ```
 */
export class Repeat extends NgFor {
    set ngForRepeat(count) {
        if (Number.isNaN(count) || !Number.isInteger(count)) {
            throw new Error(`[Repeat] repeat requires an integer but ${count} is passed in`);
        }
        this.ngForOf = Array.from({ length: count }, (_, i) => i);
        this.ngForTrackBy = (i) => i;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: Repeat, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.0.3", type: Repeat, isStandalone: true, selector: "[ngFor][ngForRepeat]", inputs: { ngForRepeat: "ngForRepeat" }, usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: Repeat, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[ngFor][ngForRepeat]',
                }]
        }], propDecorators: { ngForRepeat: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwZWF0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbGlicy9uZ3h0ZW5zaW9uL3JlcGVhdC9zcmMvcmVwZWF0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN4QyxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFFakQ7Ozs7Ozs7Ozs7Ozs7R0FhRztBQUtILE1BQU0sT0FBTyxNQUFPLFNBQVEsS0FBYTtJQUN4QyxJQUFhLFdBQVcsQ0FBQyxLQUFhO1FBQ3JDLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztZQUNyRCxNQUFNLElBQUksS0FBSyxDQUNkLDJDQUEyQyxLQUFLLGVBQWUsQ0FDL0QsQ0FBQztRQUNILENBQUM7UUFDRCxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxRCxJQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDOUIsQ0FBQzs4R0FUVyxNQUFNO2tHQUFOLE1BQU07OzJGQUFOLE1BQU07a0JBSmxCLFNBQVM7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLElBQUk7b0JBQ2hCLFFBQVEsRUFBRSxzQkFBc0I7aUJBQ2hDOzhCQUVhLFdBQVc7c0JBQXZCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ0ZvciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogQW4gZXh0ZW5zaW9uIG9mIGBOZ0ZvcmAgZGlyZWN0aXZlIHRoYXQgYWxsb3dzIGNvbnN1bWVycyB0byBpdGVyYXRlIFwieCB0aW1lc1wiIGluc3RlYWQgb2YgdGhyb3VnaCBhIGxpc3Qgb2YgaXRlbXNcbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gY291bnQgLSBhIHBvc2l0aXZlIGludGVnZXIgc3RhcnRpbmcgZnJvbSAwXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBgYGBodG1sXG4gKiA8IS0tIGJlZm9yZSAtLT5cbiAqIDxwICpuZ0Zvcj1cImxldCBpIG9mIFswLCAxLCAyXVwiPnt7aX19PC9wPlxuICogPCEtLSBhZnRlciAtLT5cbiAqIDxwICpuZ0Zvcj1cImxldCBpOyByZXBlYXQ6IDNcIj57e2l9fTwvcD5cbiAqIGBgYFxuICovXG5ARGlyZWN0aXZlKHtcblx0c3RhbmRhbG9uZTogdHJ1ZSxcblx0c2VsZWN0b3I6ICdbbmdGb3JdW25nRm9yUmVwZWF0XScsXG59KVxuZXhwb3J0IGNsYXNzIFJlcGVhdCBleHRlbmRzIE5nRm9yPG51bWJlcj4ge1xuXHRASW5wdXQoKSBzZXQgbmdGb3JSZXBlYXQoY291bnQ6IG51bWJlcikge1xuXHRcdGlmIChOdW1iZXIuaXNOYU4oY291bnQpIHx8ICFOdW1iZXIuaXNJbnRlZ2VyKGNvdW50KSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFxuXHRcdFx0XHRgW1JlcGVhdF0gcmVwZWF0IHJlcXVpcmVzIGFuIGludGVnZXIgYnV0ICR7Y291bnR9IGlzIHBhc3NlZCBpbmAsXG5cdFx0XHQpO1xuXHRcdH1cblx0XHR0aGlzLm5nRm9yT2YgPSBBcnJheS5mcm9tKHsgbGVuZ3RoOiBjb3VudCB9LCAoXywgaSkgPT4gaSk7XG5cdFx0dGhpcy5uZ0ZvclRyYWNrQnkgPSAoaSkgPT4gaTtcblx0fVxufVxuIl19