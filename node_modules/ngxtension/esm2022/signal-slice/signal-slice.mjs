import { DestroyRef, Injector, computed, effect, inject, signal, } from '@angular/core';
import { takeUntilDestroyed, toObservable } from '@angular/core/rxjs-interop';
import { connect } from 'ngxtension/connect';
import { Subject, isObservable, share, take } from 'rxjs';
export function signalSlice(config) {
    const destroyRef = inject(DestroyRef);
    const injector = inject(Injector);
    const { initialState, sources = [], lazySources = [], actionSources = {}, selectors = (() => ({})), effects = (() => ({})), } = config;
    const state = signal(initialState);
    const readonlyState = state.asReadonly();
    const state$ = toObservable(state);
    let lazySourcesLoaded = false;
    const subs = [];
    const slice = readonlyState;
    connectSources(state, sources);
    for (const [key, actionSource] of Object.entries(actionSources)) {
        if (isObservable(actionSource)) {
            addReducerProperties(readonlyState, state$, key, destroyRef, actionSource, subs);
        }
        else {
            const subject = new Subject();
            const observable = actionSource(readonlyState, subject);
            const sharedObservable = observable.pipe(share());
            connect(state, sharedObservable);
            addReducerProperties(readonlyState, state$, key, destroyRef, subject, subs, sharedObservable);
        }
    }
    for (const key in initialState) {
        Object.defineProperty(readonlyState, key, {
            value: computed(() => readonlyState()[key]),
        });
    }
    for (const [key, selector] of Object.entries(selectors(slice))) {
        Object.defineProperty(readonlyState, key, {
            value: computed(selector),
        });
    }
    for (const [key, namedEffect] of Object.entries(effects(slice))) {
        console.warn("The 'effects' configuration in signalSlice is deprecated. Please use standard signal effects outside of signalSlice instead.");
        Object.defineProperty(slice, key, {
            value: effect((onCleanup) => {
                const maybeCleanup = namedEffect();
                if (maybeCleanup) {
                    onCleanup(() => maybeCleanup());
                }
            }),
        });
    }
    destroyRef.onDestroy(() => {
        subs.forEach((sub) => sub.complete());
    });
    const connectLazySources = () => {
        if (!lazySourcesLoaded) {
            lazySourcesLoaded = true;
            connectSources(state, lazySources, injector, true);
        }
    };
    return new Proxy(slice, {
        get(target, property, receiver) {
            connectLazySources();
            return Reflect.get(target, property, receiver);
        },
        apply(target, thisArg, argumentsList) {
            connectLazySources();
            return Reflect.apply(target, thisArg, argumentsList);
        },
    });
}
function connectSources(state, sources, injector, useUntracked = false) {
    for (const source of sources) {
        if (isObservable(source)) {
            connect(state, source, injector, useUntracked);
        }
        else {
            connect(state, source(state.asReadonly()), injector, useUntracked);
        }
    }
}
function addReducerProperties(readonlyState, state$, key, destroyRef, subject, subs, observableFromActionSource) {
    Object.defineProperties(readonlyState, {
        [key]: {
            value: (nextValue) => {
                if (isObservable(nextValue)) {
                    return new Promise((res, rej) => {
                        nextValue.pipe(takeUntilDestroyed(destroyRef)).subscribe({
                            next: (value) => {
                                subject.next(value);
                            },
                            error: (err) => {
                                subject.error(err);
                                rej(err);
                            },
                            complete: () => {
                                subject.complete();
                                res(readonlyState());
                            },
                        });
                    });
                }
                if (observableFromActionSource) {
                    observableFromActionSource
                        .pipe(takeUntilDestroyed(destroyRef))
                        .subscribe();
                }
                return new Promise((res) => {
                    state$.pipe(take(1)).subscribe((val) => {
                        res(val);
                    });
                    subject.next(nextValue);
                });
            },
        },
        [`${key}$`]: {
            value: subject.asObservable(),
        },
    });
    subs.push(subject);
}
//# sourceMappingURL=data:application/json;base64,