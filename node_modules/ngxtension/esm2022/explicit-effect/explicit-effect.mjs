import { effect, untracked, } from '@angular/core';
/**
 * This explicit effect function will take the dependencies and the function to run when the dependencies change.
 *
 * @example
 * ```typescript
 * import { explicitEffect } from 'ngxtension/explicit-effect';
 *
 * const count = signal(0);
 * const state = signal('idle');
 *
 * explicitEffect([count, state], ([count, state], cleanup) => {
 *   console.log('count updated', count, state);
 *
 *   cleanup(() => {
 *     console.log('cleanup');
 *   });
 * });
 * ```
 *
 * @param deps - The dependencies that the effect will run on
 * @param fn - The function to run when the dependencies change
 * @param options - The options for the effect with the addition of defer (it allows the computation to run on first change, not immediately)
 */
export function explicitEffect(deps, fn, options) {
    let defer = options && options.defer;
    return effect((onCleanup) => {
        const depValues = deps.map((s) => s());
        untracked(() => {
            if (!defer) {
                fn(depValues, onCleanup);
            }
            defer = false;
        });
    }, options);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwbGljaXQtZWZmZWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbGlicy9uZ3h0ZW5zaW9uL2V4cGxpY2l0LWVmZmVjdC9zcmMvZXhwbGljaXQtZWZmZWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFJTixNQUFNLEVBQ04sU0FBUyxHQUNULE1BQU0sZUFBZSxDQUFDO0FBbUJ2Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXNCRztBQUNILE1BQU0sVUFBVSxjQUFjLENBSTdCLElBQStDLEVBQy9DLEVBQThELEVBQzlELE9BQWlEO0lBRWpELElBQUksS0FBSyxHQUFHLE9BQU8sSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDO0lBQ3JDLE9BQU8sTUFBTSxDQUFDLENBQUMsU0FBUyxFQUFFLEVBQUU7UUFDM0IsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN2QyxTQUFTLENBQUMsR0FBRyxFQUFFO1lBQ2QsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUNaLEVBQUUsQ0FBQyxTQUFnQixFQUFFLFNBQVMsQ0FBQyxDQUFDO1lBQ2pDLENBQUM7WUFDRCxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ2YsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDYixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0Q3JlYXRlRWZmZWN0T3B0aW9ucyxcblx0RWZmZWN0Q2xlYW51cFJlZ2lzdGVyRm4sXG5cdEVmZmVjdFJlZixcblx0ZWZmZWN0LFxuXHR1bnRyYWNrZWQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKipcbiAqIFdlIHdhbnQgdG8gaGF2ZSB0aGUgVHVwbGUgaW4gb3JkZXIgdG8gdXNlIHRoZSB0eXBlcyBpbiB0aGUgZnVuY3Rpb24gc2lnbmF0dXJlXG4gKi9cbnR5cGUgRXhwbGljaXRFZmZlY3RWYWx1ZXM8VD4gPSB7XG5cdFtLIGluIGtleW9mIFRdOiAoKSA9PiBUW0tdO1xufTtcblxuLyoqXG4gKiBFeHRlbmQgdGhlIHJlZ3VsYXIgc2V0IG9mIGVmZmVjdCBvcHRpb25zXG4gKi9cbmRlY2xhcmUgaW50ZXJmYWNlIENyZWF0ZUV4cGxpY2l0RWZmZWN0T3B0aW9ucyBleHRlbmRzIENyZWF0ZUVmZmVjdE9wdGlvbnMge1xuXHQvKipcblx0ICogT3B0aW9uIHRoYXQgYWxsb3dzIHRoZSBjb21wdXRhdGlvbiBub3QgdG8gZXhlY3V0ZSBpbW1lZGlhdGVseSwgYnV0IG9ubHkgcnVuIG9uIGZpcnN0IGNoYW5nZS5cblx0ICovXG5cdGRlZmVyPzogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBUaGlzIGV4cGxpY2l0IGVmZmVjdCBmdW5jdGlvbiB3aWxsIHRha2UgdGhlIGRlcGVuZGVuY2llcyBhbmQgdGhlIGZ1bmN0aW9uIHRvIHJ1biB3aGVuIHRoZSBkZXBlbmRlbmNpZXMgY2hhbmdlLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBleHBsaWNpdEVmZmVjdCB9IGZyb20gJ25neHRlbnNpb24vZXhwbGljaXQtZWZmZWN0JztcbiAqXG4gKiBjb25zdCBjb3VudCA9IHNpZ25hbCgwKTtcbiAqIGNvbnN0IHN0YXRlID0gc2lnbmFsKCdpZGxlJyk7XG4gKlxuICogZXhwbGljaXRFZmZlY3QoW2NvdW50LCBzdGF0ZV0sIChbY291bnQsIHN0YXRlXSwgY2xlYW51cCkgPT4ge1xuICogICBjb25zb2xlLmxvZygnY291bnQgdXBkYXRlZCcsIGNvdW50LCBzdGF0ZSk7XG4gKlxuICogICBjbGVhbnVwKCgpID0+IHtcbiAqICAgICBjb25zb2xlLmxvZygnY2xlYW51cCcpO1xuICogICB9KTtcbiAqIH0pO1xuICogYGBgXG4gKlxuICogQHBhcmFtIGRlcHMgLSBUaGUgZGVwZW5kZW5jaWVzIHRoYXQgdGhlIGVmZmVjdCB3aWxsIHJ1biBvblxuICogQHBhcmFtIGZuIC0gVGhlIGZ1bmN0aW9uIHRvIHJ1biB3aGVuIHRoZSBkZXBlbmRlbmNpZXMgY2hhbmdlXG4gKiBAcGFyYW0gb3B0aW9ucyAtIFRoZSBvcHRpb25zIGZvciB0aGUgZWZmZWN0IHdpdGggdGhlIGFkZGl0aW9uIG9mIGRlZmVyIChpdCBhbGxvd3MgdGhlIGNvbXB1dGF0aW9uIHRvIHJ1biBvbiBmaXJzdCBjaGFuZ2UsIG5vdCBpbW1lZGlhdGVseSlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4cGxpY2l0RWZmZWN0PFxuXHRJbnB1dCBleHRlbmRzIHJlYWRvbmx5IHVua25vd25bXSxcblx0UGFyYW1zID0gSW5wdXQsXG4+KFxuXHRkZXBzOiByZWFkb25seSBbLi4uRXhwbGljaXRFZmZlY3RWYWx1ZXM8SW5wdXQ+XSxcblx0Zm46IChkZXBzOiBQYXJhbXMsIG9uQ2xlYW51cDogRWZmZWN0Q2xlYW51cFJlZ2lzdGVyRm4pID0+IHZvaWQsXG5cdG9wdGlvbnM/OiBDcmVhdGVFeHBsaWNpdEVmZmVjdE9wdGlvbnMgfCB1bmRlZmluZWQsXG4pOiBFZmZlY3RSZWYge1xuXHRsZXQgZGVmZXIgPSBvcHRpb25zICYmIG9wdGlvbnMuZGVmZXI7XG5cdHJldHVybiBlZmZlY3QoKG9uQ2xlYW51cCkgPT4ge1xuXHRcdGNvbnN0IGRlcFZhbHVlcyA9IGRlcHMubWFwKChzKSA9PiBzKCkpO1xuXHRcdHVudHJhY2tlZCgoKSA9PiB7XG5cdFx0XHRpZiAoIWRlZmVyKSB7XG5cdFx0XHRcdGZuKGRlcFZhbHVlcyBhcyBhbnksIG9uQ2xlYW51cCk7XG5cdFx0XHR9XG5cdFx0XHRkZWZlciA9IGZhbHNlO1xuXHRcdH0pO1xuXHR9LCBvcHRpb25zKTtcbn1cbiJdfQ==