import { DestroyRef, InjectionToken, effect, inject, signal, } from '@angular/core';
import { assertInjector } from 'ngxtension/assert-injector';
export const NGXTENSION_LOCAL_STORAGE = new InjectionToken('NGXTENSION_LOCAL_STORAGE', {
    providedIn: 'root',
    factory: () => localStorage, // this would be the default
});
export function provideLocalStorageImpl(impl) {
    return {
        provide: NGXTENSION_LOCAL_STORAGE,
        useValue: impl,
    };
}
function isFunction(value) {
    return typeof value === 'function';
}
function goodTry(tryFn) {
    try {
        return tryFn();
    }
    catch {
        return undefined;
    }
}
function parseJSON(value) {
    return value === 'undefined' ? undefined : JSON.parse(value);
}
export const injectLocalStorage = (key, options = {}) => {
    const defaultValue = isFunction(options.defaultValue)
        ? options.defaultValue()
        : options.defaultValue;
    const stringify = isFunction(options.stringify)
        ? options.stringify
        : JSON.stringify;
    const parse = isFunction(options.parse) ? options.parse : parseJSON;
    const storageSync = options.storageSync ?? true;
    return assertInjector(injectLocalStorage, options.injector, () => {
        const localStorage = inject(NGXTENSION_LOCAL_STORAGE);
        const destroyRef = inject(DestroyRef);
        const initialStoredValue = goodTry(() => localStorage.getItem(key));
        const initialValue = initialStoredValue
            ? goodTry(() => parse(initialStoredValue))
            : defaultValue;
        const internalSignal = signal(initialValue);
        effect(() => {
            const value = internalSignal();
            if (value === undefined) {
                goodTry(() => localStorage.removeItem(key));
            }
            else {
                goodTry(() => localStorage.setItem(key, stringify(value)));
            }
        });
        if (storageSync) {
            const onStorage = (event) => {
                if (event.storageArea === localStorage && event.key === key) {
                    const newValue = event.newValue !== null ? parse(event.newValue) : undefined;
                    internalSignal.set(newValue);
                }
            };
            window.addEventListener('storage', onStorage);
            destroyRef.onDestroy(() => {
                window.removeEventListener('storage', onStorage);
            });
        }
        return internalSignal;
    });
};
//# sourceMappingURL=data:application/json;base64,