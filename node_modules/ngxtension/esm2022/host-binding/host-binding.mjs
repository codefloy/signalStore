/* eslint-disable @typescript-eslint/ban-types */
import { effect, ElementRef, inject, Renderer2, RendererStyleFlags2, runInInjectionContext, } from '@angular/core';
import { assertInjector } from 'ngxtension/assert-injector';
/**
 * `hostBinding` takes a `hostPropertyName` to attach a data property, a class, a style or an attribute (as `@HostBinding` would) to the host.
 * The udpate is applied based on the update of the provided signal (writable or not).
 *
 * @param {Required<HostBinding>['hostPropertyName']} hostPropertyName - the same property that is bound to a data property, a class, a style or an attribute as `@HostBinding`.
 * @param {Signal | WritableSignal} signal - the signal on which to react to changes to update the host, and the one that will be returned as it is
 * @returns {Signal | WritableSignal}
 *
 * @example
 * ```ts
 * export class MyComponent {
 *  readonly background = hostBinding('style.background', signal('blue'));
 *
 *  constructor() {
 *    setTimeout(() => this.background.set('red'), 3000);
 *  }
 * }
 * ```
 */
export function hostBinding(hostPropertyName, signal, injector) {
    injector = assertInjector(hostBinding, injector);
    runInInjectionContext(injector, () => {
        const renderer = inject(Renderer2);
        const element = inject(ElementRef).nativeElement;
        effect(() => {
            let prevClasses = [];
            const value = signal();
            const [binding, property, unit] = hostPropertyName.split('.');
            switch (binding) {
                case 'style':
                    renderer.setStyle(element, property, `${value}${unit ?? ''}`, property.startsWith('--')
                        ? RendererStyleFlags2.DashCase
                        : undefined);
                    break;
                case 'attr':
                    if (value == null) {
                        renderer.removeAttribute(element, property);
                    }
                    else {
                        renderer.setAttribute(element, property, String(value));
                    }
                    break;
                case 'class':
                    if (!property) {
                        if (prevClasses.length) {
                            prevClasses.forEach((k) => renderer.removeClass(element, k));
                        }
                        prevClasses =
                            typeof value === 'string' ? value.split(' ').filter(Boolean) : [];
                        prevClasses.forEach((k) => renderer.addClass(element, k));
                    }
                    else {
                        if (value) {
                            renderer.addClass(element, property);
                        }
                        else {
                            renderer.removeClass(element, property);
                        }
                    }
                    break;
                default:
                    renderer.setProperty(element, binding, value);
            }
        });
    });
    return signal;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9zdC1iaW5kaW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbGlicy9uZ3h0ZW5zaW9uL2hvc3QtYmluZGluZy9zcmMvaG9zdC1iaW5kaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGlEQUFpRDtBQUNqRCxPQUFPLEVBQ04sTUFBTSxFQUNOLFVBQVUsRUFFVixNQUFNLEVBRU4sU0FBUyxFQUNULG1CQUFtQixFQUNuQixxQkFBcUIsR0FHckIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRTVEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FrQkc7QUFDSCxNQUFNLFVBQVUsV0FBVyxDQUMxQixnQkFBMkQsRUFDM0QsTUFBUyxFQUNULFFBQW1CO0lBRW5CLFFBQVEsR0FBRyxjQUFjLENBQUMsV0FBVyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBRWpELHFCQUFxQixDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUU7UUFDcEMsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ25DLE1BQU0sT0FBTyxHQUFnQixNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsYUFBYSxDQUFDO1FBRTlELE1BQU0sQ0FBQyxHQUFHLEVBQUU7WUFDWCxJQUFJLFdBQVcsR0FBYSxFQUFFLENBQUM7WUFDL0IsTUFBTSxLQUFLLEdBQUcsTUFBTSxFQUFFLENBQUM7WUFDdkIsTUFBTSxDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLEdBQUcsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBRTlELFFBQVEsT0FBTyxFQUFFLENBQUM7Z0JBQ2pCLEtBQUssT0FBTztvQkFDWCxRQUFRLENBQUMsUUFBUSxDQUNoQixPQUFPLEVBQ1AsUUFBUSxFQUNSLEdBQUcsS0FBSyxHQUFHLElBQUksSUFBSSxFQUFFLEVBQUUsRUFDdkIsUUFBUSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUM7d0JBQ3hCLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRO3dCQUM5QixDQUFDLENBQUMsU0FBUyxDQUNaLENBQUM7b0JBQ0YsTUFBTTtnQkFDUCxLQUFLLE1BQU07b0JBQ1YsSUFBSSxLQUFLLElBQUksSUFBSSxFQUFFLENBQUM7d0JBQ25CLFFBQVEsQ0FBQyxlQUFlLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDO29CQUM3QyxDQUFDO3lCQUFNLENBQUM7d0JBQ1AsUUFBUSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO29CQUN6RCxDQUFDO29CQUNELE1BQU07Z0JBQ1AsS0FBSyxPQUFPO29CQUNYLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQzt3QkFDZixJQUFJLFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQzs0QkFDeEIsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQzt3QkFDOUQsQ0FBQzt3QkFDRCxXQUFXOzRCQUNWLE9BQU8sS0FBSyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQzt3QkFDbkUsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDM0QsQ0FBQzt5QkFBTSxDQUFDO3dCQUNQLElBQUksS0FBSyxFQUFFLENBQUM7NEJBQ1gsUUFBUSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUM7d0JBQ3RDLENBQUM7NkJBQU0sQ0FBQzs0QkFDUCxRQUFRLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQzt3QkFDekMsQ0FBQztvQkFDRixDQUFDO29CQUNELE1BQU07Z0JBQ1A7b0JBQ0MsUUFBUSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ2hELENBQUM7UUFDRixDQUFDLENBQUMsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0lBRUgsT0FBTyxNQUFNLENBQUM7QUFDZixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10eXBlcyAqL1xuaW1wb3J0IHtcblx0ZWZmZWN0LFxuXHRFbGVtZW50UmVmLFxuXHRIb3N0QmluZGluZyxcblx0aW5qZWN0LFxuXHRJbmplY3Rvcixcblx0UmVuZGVyZXIyLFxuXHRSZW5kZXJlclN0eWxlRmxhZ3MyLFxuXHRydW5JbkluamVjdGlvbkNvbnRleHQsXG5cdHR5cGUgU2lnbmFsLFxuXHR0eXBlIFdyaXRhYmxlU2lnbmFsLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGFzc2VydEluamVjdG9yIH0gZnJvbSAnbmd4dGVuc2lvbi9hc3NlcnQtaW5qZWN0b3InO1xuXG4vKipcbiAqIGBob3N0QmluZGluZ2AgdGFrZXMgYSBgaG9zdFByb3BlcnR5TmFtZWAgdG8gYXR0YWNoIGEgZGF0YSBwcm9wZXJ0eSwgYSBjbGFzcywgYSBzdHlsZSBvciBhbiBhdHRyaWJ1dGUgKGFzIGBASG9zdEJpbmRpbmdgIHdvdWxkKSB0byB0aGUgaG9zdC5cbiAqIFRoZSB1ZHBhdGUgaXMgYXBwbGllZCBiYXNlZCBvbiB0aGUgdXBkYXRlIG9mIHRoZSBwcm92aWRlZCBzaWduYWwgKHdyaXRhYmxlIG9yIG5vdCkuXG4gKlxuICogQHBhcmFtIHtSZXF1aXJlZDxIb3N0QmluZGluZz5bJ2hvc3RQcm9wZXJ0eU5hbWUnXX0gaG9zdFByb3BlcnR5TmFtZSAtIHRoZSBzYW1lIHByb3BlcnR5IHRoYXQgaXMgYm91bmQgdG8gYSBkYXRhIHByb3BlcnR5LCBhIGNsYXNzLCBhIHN0eWxlIG9yIGFuIGF0dHJpYnV0ZSBhcyBgQEhvc3RCaW5kaW5nYC5cbiAqIEBwYXJhbSB7U2lnbmFsIHwgV3JpdGFibGVTaWduYWx9IHNpZ25hbCAtIHRoZSBzaWduYWwgb24gd2hpY2ggdG8gcmVhY3QgdG8gY2hhbmdlcyB0byB1cGRhdGUgdGhlIGhvc3QsIGFuZCB0aGUgb25lIHRoYXQgd2lsbCBiZSByZXR1cm5lZCBhcyBpdCBpc1xuICogQHJldHVybnMge1NpZ25hbCB8IFdyaXRhYmxlU2lnbmFsfVxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0c1xuICogZXhwb3J0IGNsYXNzIE15Q29tcG9uZW50IHtcbiAqICByZWFkb25seSBiYWNrZ3JvdW5kID0gaG9zdEJpbmRpbmcoJ3N0eWxlLmJhY2tncm91bmQnLCBzaWduYWwoJ2JsdWUnKSk7XG4gKlxuICogIGNvbnN0cnVjdG9yKCkge1xuICogICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLmJhY2tncm91bmQuc2V0KCdyZWQnKSwgMzAwMCk7XG4gKiAgfVxuICogfVxuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBob3N0QmluZGluZzxULCBTIGV4dGVuZHMgU2lnbmFsPFQ+IHwgV3JpdGFibGVTaWduYWw8VD4+KFxuXHRob3N0UHJvcGVydHlOYW1lOiBSZXF1aXJlZDxIb3N0QmluZGluZz5bJ2hvc3RQcm9wZXJ0eU5hbWUnXSxcblx0c2lnbmFsOiBTLFxuXHRpbmplY3Rvcj86IEluamVjdG9yLFxuKTogUyB7XG5cdGluamVjdG9yID0gYXNzZXJ0SW5qZWN0b3IoaG9zdEJpbmRpbmcsIGluamVjdG9yKTtcblxuXHRydW5JbkluamVjdGlvbkNvbnRleHQoaW5qZWN0b3IsICgpID0+IHtcblx0XHRjb25zdCByZW5kZXJlciA9IGluamVjdChSZW5kZXJlcjIpO1xuXHRcdGNvbnN0IGVsZW1lbnQ6IEhUTUxFbGVtZW50ID0gaW5qZWN0KEVsZW1lbnRSZWYpLm5hdGl2ZUVsZW1lbnQ7XG5cblx0XHRlZmZlY3QoKCkgPT4ge1xuXHRcdFx0bGV0IHByZXZDbGFzc2VzOiBzdHJpbmdbXSA9IFtdO1xuXHRcdFx0Y29uc3QgdmFsdWUgPSBzaWduYWwoKTtcblx0XHRcdGNvbnN0IFtiaW5kaW5nLCBwcm9wZXJ0eSwgdW5pdF0gPSBob3N0UHJvcGVydHlOYW1lLnNwbGl0KCcuJyk7XG5cblx0XHRcdHN3aXRjaCAoYmluZGluZykge1xuXHRcdFx0XHRjYXNlICdzdHlsZSc6XG5cdFx0XHRcdFx0cmVuZGVyZXIuc2V0U3R5bGUoXG5cdFx0XHRcdFx0XHRlbGVtZW50LFxuXHRcdFx0XHRcdFx0cHJvcGVydHksXG5cdFx0XHRcdFx0XHRgJHt2YWx1ZX0ke3VuaXQgPz8gJyd9YCxcblx0XHRcdFx0XHRcdHByb3BlcnR5LnN0YXJ0c1dpdGgoJy0tJylcblx0XHRcdFx0XHRcdFx0PyBSZW5kZXJlclN0eWxlRmxhZ3MyLkRhc2hDYXNlXG5cdFx0XHRcdFx0XHRcdDogdW5kZWZpbmVkLFxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ2F0dHInOlxuXHRcdFx0XHRcdGlmICh2YWx1ZSA9PSBudWxsKSB7XG5cdFx0XHRcdFx0XHRyZW5kZXJlci5yZW1vdmVBdHRyaWJ1dGUoZWxlbWVudCwgcHJvcGVydHkpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZW5kZXJlci5zZXRBdHRyaWJ1dGUoZWxlbWVudCwgcHJvcGVydHksIFN0cmluZyh2YWx1ZSkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAnY2xhc3MnOlxuXHRcdFx0XHRcdGlmICghcHJvcGVydHkpIHtcblx0XHRcdFx0XHRcdGlmIChwcmV2Q2xhc3Nlcy5sZW5ndGgpIHtcblx0XHRcdFx0XHRcdFx0cHJldkNsYXNzZXMuZm9yRWFjaCgoaykgPT4gcmVuZGVyZXIucmVtb3ZlQ2xhc3MoZWxlbWVudCwgaykpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0cHJldkNsYXNzZXMgPVxuXHRcdFx0XHRcdFx0XHR0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gdmFsdWUuc3BsaXQoJyAnKS5maWx0ZXIoQm9vbGVhbikgOiBbXTtcblx0XHRcdFx0XHRcdHByZXZDbGFzc2VzLmZvckVhY2goKGspID0+IHJlbmRlcmVyLmFkZENsYXNzKGVsZW1lbnQsIGspKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0aWYgKHZhbHVlKSB7XG5cdFx0XHRcdFx0XHRcdHJlbmRlcmVyLmFkZENsYXNzKGVsZW1lbnQsIHByb3BlcnR5KTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHJlbmRlcmVyLnJlbW92ZUNsYXNzKGVsZW1lbnQsIHByb3BlcnR5KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0cmVuZGVyZXIuc2V0UHJvcGVydHkoZWxlbWVudCwgYmluZGluZywgdmFsdWUpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9KTtcblxuXHRyZXR1cm4gc2lnbmFsO1xufVxuIl19