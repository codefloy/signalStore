import { EventEmitter, type OnInit } from '@angular/core';
import { Observable } from 'rxjs';
import * as i0 from "@angular/core";
export type ResizeOptions = {
    box: ResizeObserverBoxOptions;
    debounce: number | {
        scroll: number;
        resize: number;
    };
    scroll: boolean;
    offsetSize: boolean;
    emitInZone: boolean;
    emitInitialResult: boolean;
};
export declare const defaultResizeOptions: ResizeOptions;
export declare const injectResizeOptions: {
    (): ResizeOptions;
    (injectOptions: import("@angular/core").InjectOptions & {
        optional?: false | undefined;
    } & {
        injector?: import("@angular/core").Injector | undefined;
    }): ResizeOptions;
    (injectOptions: import("@angular/core").InjectOptions & {
        injector?: import("@angular/core").Injector | undefined;
    }): ResizeOptions | null;
}, provideResizeOptions: (() => import("@angular/core").Provider) & ((value: ResizeOptions | (() => ResizeOptions)) => import("@angular/core").Provider), NGX_RESIZE_OPTIONS: import("@angular/core").InjectionToken<ResizeOptions>;
export type ResizeResult = {
    readonly entries: ReadonlyArray<ResizeObserverEntry>;
    readonly x: number;
    readonly y: number;
    readonly width: number;
    readonly height: number;
    readonly top: number;
    readonly right: number;
    readonly bottom: number;
    readonly left: number;
    readonly dpr: number;
};
/**
 * `injectResize` returns an `Observable<ResizeResult>` that observes the `resize` event on the Host element
 * of the component. `options` passed in is merged with default options
 *
 * @see {@link defaultResizeOptions}
 *
 * @param {Partial<ResizeOptions>} [options={}]
 * @see {@link ResizeOptions}
 *
 * @returns {Observable<ResizeResult>}
 * @see {@link ResizeResult}
 */
export declare function injectResize(options?: Partial<ResizeOptions>): Observable<ResizeResult>;
/**
 * A directive to be used on any element instead of the Host element. For Host element, there are 3 approaches:
 * - use {@link injectResize}
 * - use `hostDirectives`  with `HostListener` on `ngxResize`
 *
 * @param {Partial<ResizeOptions>} - partial options to control `Resize` behavior. merged with default options
 * @see {@link defaultResizeOptions}
 *
 * @returns {ResizeResult} - as an Output `(ngxResize)`
 */
export declare class NgxResize implements OnInit {
    ngxResizeOptions: Partial<ResizeOptions>;
    ngxResize: EventEmitter<ResizeResult>;
    private host;
    private zone;
    private document;
    private resizeOptions;
    private destroyRef;
    ngOnInit(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgxResize, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<NgxResize, "[ngxResize]", never, { "ngxResizeOptions": { "alias": "ngxResizeOptions"; "required": false; }; }, { "ngxResize": "ngxResize"; }, never, never, true, never>;
}
